
UartTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c64  08003c64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009114  20000070  08003cdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009184  08003cdc  00029184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000988a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018bd  00000000  00000000  0002992a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e9b  00000000  00000000  0002c270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000786b  00000000  00000000  0005010b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5836  00000000  00000000  00057976  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d1ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa0  00000000  00000000  0012d228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b40 	.word	0x08003b40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b40 	.word	0x08003b40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <_write>:
static void MX_GPIO_Init(void);
static void MX_FMC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, len, 1000);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <_write+0x34>)
 80005a8:	f001 ff6b 	bl	8002482 <HAL_UART_Transmit>
 80005ac:	4603      	mov	r3, r0
 80005ae:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK ? len : 0);
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <_write+0x2a>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	e000      	b.n	80005bc <_write+0x2c>
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <NandControllerInitAndTest>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int NandControllerInitAndTest(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
    //NAND_AddressTypedef Address;

    /*##-1- Configure the NAND device ###############################*/
    /* NAND device configuration */
    NAND_ComTiming.SetupTime = 0xf1;
 80005ce:	4ba0      	ldr	r3, [pc, #640]	; (8000850 <NandControllerInitAndTest+0x288>)
 80005d0:	22f1      	movs	r2, #241	; 0xf1
 80005d2:	601a      	str	r2, [r3, #0]
    NAND_ComTiming.WaitSetupTime = 0xf2;
 80005d4:	4b9e      	ldr	r3, [pc, #632]	; (8000850 <NandControllerInitAndTest+0x288>)
 80005d6:	22f2      	movs	r2, #242	; 0xf2
 80005d8:	605a      	str	r2, [r3, #4]
    NAND_ComTiming.HoldSetupTime = 0xf3;
 80005da:	4b9d      	ldr	r3, [pc, #628]	; (8000850 <NandControllerInitAndTest+0x288>)
 80005dc:	22f3      	movs	r2, #243	; 0xf3
 80005de:	609a      	str	r2, [r3, #8]
    NAND_ComTiming.HiZSetupTime = 0xf1;
 80005e0:	4b9b      	ldr	r3, [pc, #620]	; (8000850 <NandControllerInitAndTest+0x288>)
 80005e2:	22f1      	movs	r2, #241	; 0xf1
 80005e4:	60da      	str	r2, [r3, #12]
    NAND_AttTiming.SetupTime = 0xf1;
 80005e6:	4b9b      	ldr	r3, [pc, #620]	; (8000854 <NandControllerInitAndTest+0x28c>)
 80005e8:	22f1      	movs	r2, #241	; 0xf1
 80005ea:	601a      	str	r2, [r3, #0]
    NAND_AttTiming.WaitSetupTime = 0xf2;
 80005ec:	4b99      	ldr	r3, [pc, #612]	; (8000854 <NandControllerInitAndTest+0x28c>)
 80005ee:	22f2      	movs	r2, #242	; 0xf2
 80005f0:	605a      	str	r2, [r3, #4]
    NAND_AttTiming.HoldSetupTime = 0xf3;
 80005f2:	4b98      	ldr	r3, [pc, #608]	; (8000854 <NandControllerInitAndTest+0x28c>)
 80005f4:	22f3      	movs	r2, #243	; 0xf3
 80005f6:	609a      	str	r2, [r3, #8]
    NAND_AttTiming.HiZSetupTime = 0xf1;
 80005f8:	4b96      	ldr	r3, [pc, #600]	; (8000854 <NandControllerInitAndTest+0x28c>)
 80005fa:	22f1      	movs	r2, #241	; 0xf1
 80005fc:	60da      	str	r2, [r3, #12]

    hNAND.Init.NandBank = FMC_NAND_BANK2;
 80005fe:	4b96      	ldr	r3, [pc, #600]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
    hNAND.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000604:	4b94      	ldr	r3, [pc, #592]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000606:	2202      	movs	r2, #2
 8000608:	609a      	str	r2, [r3, #8]

    hNAND.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800060a:	4b93      	ldr	r3, [pc, #588]	; (8000858 <NandControllerInitAndTest+0x290>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
    hNAND.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 8000610:	4b91      	ldr	r3, [pc, #580]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
    hNAND.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8000616:	4b90      	ldr	r3, [pc, #576]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800061c:	615a      	str	r2, [r3, #20]
    hNAND.Init.TCLRSetupTime = 0x0;
 800061e:	4b8e      	ldr	r3, [pc, #568]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
    hNAND.Init.TARSetupTime = 0x0;
 8000624:	4b8c      	ldr	r3, [pc, #560]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
    hNAND.Config.BlockNbr = 0x400;
 800062a:	4b8b      	ldr	r3, [pc, #556]	; (8000858 <NandControllerInitAndTest+0x290>)
 800062c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
    hNAND.Config.BlockSize = 0x40;
 8000632:	4b89      	ldr	r3, [pc, #548]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
    hNAND.Config.PageSize = 0x800;
 8000638:	4b87      	ldr	r3, [pc, #540]	; (8000858 <NandControllerInitAndTest+0x290>)
 800063a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
    hNAND.Config.PlaneNbr = 0x01;
 8000640:	4b85      	ldr	r3, [pc, #532]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000642:	2201      	movs	r2, #1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
    hNAND.Config.PlaneSize = 0x400;
 8000646:	4b84      	ldr	r3, [pc, #528]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
    hNAND.Config.SpareAreaSize = 0x40;
 800064e:	4b82      	ldr	r3, [pc, #520]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	629a      	str	r2, [r3, #40]	; 0x28

    /* NAND controller initialization */
    if(HAL_NAND_Init(&hNAND, &NAND_ComTiming, &NAND_AttTiming) != HAL_OK)
 8000654:	4a7f      	ldr	r2, [pc, #508]	; (8000854 <NandControllerInitAndTest+0x28c>)
 8000656:	497e      	ldr	r1, [pc, #504]	; (8000850 <NandControllerInitAndTest+0x288>)
 8000658:	487f      	ldr	r0, [pc, #508]	; (8000858 <NandControllerInitAndTest+0x290>)
 800065a:	f000 ff4b 	bl	80014f4 <HAL_NAND_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <NandControllerInitAndTest+0xa0>
    {
        return NAND_STATUS_INIT_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	e0ef      	b.n	8000848 <NandControllerInitAndTest+0x280>
    }

    NAND_AddressTypedef Address_BLOCK_0;
    NAND_AddressTypedef ReadAddress;

    Address_BLOCK_0.Page = PAGE_2;
 8000668:	2302      	movs	r3, #2
 800066a:	81bb      	strh	r3, [r7, #12]
    Address_BLOCK_0.Plane = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]
    Address_BLOCK_0.Block = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	823b      	strh	r3, [r7, #16]

    ReadAddress.Block = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	813b      	strh	r3, [r7, #8]
    ReadAddress.Plane = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	80fb      	strh	r3, [r7, #6]


    /* Send NAND erase block operation */
    if (HAL_NAND_Erase_Block(&hNAND, &Address_BLOCK_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4875      	ldr	r0, [pc, #468]	; (8000858 <NandControllerInitAndTest+0x290>)
 8000684:	f001 f9cd 	bl	8001a22 <HAL_NAND_Erase_Block>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <NandControllerInitAndTest+0xca>
    {
        return NAND_STATUS_ERASE_ERROR;
 800068e:	2303      	movs	r3, #3
 8000690:	e0da      	b.n	8000848 <NandControllerInitAndTest+0x280>
    }

    /* Load the buffer with AA */
    for(int i=0; i<BUFFER_SIZE; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	e007      	b.n	80006a8 <NandControllerInitAndTest+0xe0>
    {
        aTxBuffer[i] = 0XAA;
 8000698:	4a70      	ldr	r2, [pc, #448]	; (800085c <NandControllerInitAndTest+0x294>)
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	4413      	add	r3, r2
 800069e:	22aa      	movs	r2, #170	; 0xaa
 80006a0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<BUFFER_SIZE; i++)
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a4:	3301      	adds	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ae:	d3f3      	bcc.n	8000698 <NandControllerInitAndTest+0xd0>
    }
    /* Program page 2 and read page 2 for 30k iterations*/
    for(int i = 0; i < 30000; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	e033      	b.n	800071e <NandControllerInitAndTest+0x156>
    {
    	/* program page 2 with data in atxBuffer */
	   if (HAL_NAND_Write_Page_8b(&hNAND, &Address_BLOCK_0, aTxBuffer, 1) != HAL_OK)
 80006b6:	f107 010c 	add.w	r1, r7, #12
 80006ba:	2301      	movs	r3, #1
 80006bc:	4a67      	ldr	r2, [pc, #412]	; (800085c <NandControllerInitAndTest+0x294>)
 80006be:	4866      	ldr	r0, [pc, #408]	; (8000858 <NandControllerInitAndTest+0x290>)
 80006c0:	f001 f88c 	bl	80017dc <HAL_NAND_Write_Page_8b>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <NandControllerInitAndTest+0x106>
	   {
			return NAND_STATUS_WRITE_ERROR;
 80006ca:	2304      	movs	r3, #4
 80006cc:	e0bc      	b.n	8000848 <NandControllerInitAndTest+0x280>
	   }
	   /* read page 2 and observe data flips */
	   if (HAL_NAND_Read_Page_8b(&hNAND, &Address_BLOCK_0, aRxBuffer, 1) != HAL_OK)
 80006ce:	f107 010c 	add.w	r1, r7, #12
 80006d2:	2301      	movs	r3, #1
 80006d4:	4a62      	ldr	r2, [pc, #392]	; (8000860 <NandControllerInitAndTest+0x298>)
 80006d6:	4860      	ldr	r0, [pc, #384]	; (8000858 <NandControllerInitAndTest+0x290>)
 80006d8:	f000 ff5a 	bl	8001590 <HAL_NAND_Read_Page_8b>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <NandControllerInitAndTest+0x11e>
	   {
			return NAND_STATUS_READ_ERROR;
 80006e2:	2305      	movs	r3, #5
 80006e4:	e0b0      	b.n	8000848 <NandControllerInitAndTest+0x280>
	   }
	   printf("Iteration %d : ", i);
 80006e6:	6a39      	ldr	r1, [r7, #32]
 80006e8:	485e      	ldr	r0, [pc, #376]	; (8000864 <NandControllerInitAndTest+0x29c>)
 80006ea:	f002 fa97 	bl	8002c1c <iprintf>
	   for(int k=0; k<BUFFER_SIZE; k++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	e00d      	b.n	8000710 <NandControllerInitAndTest+0x148>
	       {
	           printf("0x%2x", aRxBuffer[k]);
 80006f4:	4a5a      	ldr	r2, [pc, #360]	; (8000860 <NandControllerInitAndTest+0x298>)
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	485a      	ldr	r0, [pc, #360]	; (8000868 <NandControllerInitAndTest+0x2a0>)
 8000700:	f002 fa8c 	bl	8002c1c <iprintf>
	           printf(",");
 8000704:	202c      	movs	r0, #44	; 0x2c
 8000706:	f002 faa1 	bl	8002c4c <putchar>
	   for(int k=0; k<BUFFER_SIZE; k++)
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3301      	adds	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000716:	d3ed      	bcc.n	80006f4 <NandControllerInitAndTest+0x12c>
    for(int i = 0; i < 30000; i++)
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	3301      	adds	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	f247 522f 	movw	r2, #29999	; 0x752f
 8000724:	4293      	cmp	r3, r2
 8000726:	ddc6      	ble.n	80006b6 <NandControllerInitAndTest+0xee>
	       }
    }
    // bitwise comparison to identify stableBits
    for(int i=0; i<BUFFER_SIZE; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	e066      	b.n	80007fc <NandControllerInitAndTest+0x234>
	{
		uint8_t xorres;
		xorres=aRxBuffer[i]^0XFF;
 800072e:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <NandControllerInitAndTest+0x298>)
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	43db      	mvns	r3, r3
 8000738:	74fb      	strb	r3, [r7, #19]
		if ((xorres & (0X80)) == 0X00)
 800073a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db05      	blt.n	800074e <NandControllerInitAndTest+0x186>
		stableBytes[i*8+0]=1;
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4a49      	ldr	r2, [pc, #292]	; (800086c <NandControllerInitAndTest+0x2a4>)
 8000748:	2101      	movs	r1, #1
 800074a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X40)==0X00)
 800074e:	7cfb      	ldrb	r3, [r7, #19]
 8000750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <NandControllerInitAndTest+0x19e>
		stableBytes[i*8+1]=1;
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	3301      	adds	r3, #1
 800075e:	4a43      	ldr	r2, [pc, #268]	; (800086c <NandControllerInitAndTest+0x2a4>)
 8000760:	2101      	movs	r1, #1
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X20)==0X00)
 8000766:	7cfb      	ldrb	r3, [r7, #19]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <NandControllerInitAndTest+0x1b6>
		stableBytes[i*8+2]=1;
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	3302      	adds	r3, #2
 8000776:	4a3d      	ldr	r2, [pc, #244]	; (800086c <NandControllerInitAndTest+0x2a4>)
 8000778:	2101      	movs	r1, #1
 800077a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X10)==0X00)
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	2b00      	cmp	r3, #0
 8000786:	d106      	bne.n	8000796 <NandControllerInitAndTest+0x1ce>
		stableBytes[i*8+3]=1;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	3303      	adds	r3, #3
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <NandControllerInitAndTest+0x2a4>)
 8000790:	2101      	movs	r1, #1
 8000792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X08)==0X00)
 8000796:	7cfb      	ldrb	r3, [r7, #19]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <NandControllerInitAndTest+0x1e6>
		stableBytes[i*8+4]=1;
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	3304      	adds	r3, #4
 80007a6:	4a31      	ldr	r2, [pc, #196]	; (800086c <NandControllerInitAndTest+0x2a4>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X04)==0X00)
 80007ae:	7cfb      	ldrb	r3, [r7, #19]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d106      	bne.n	80007c6 <NandControllerInitAndTest+0x1fe>
		stableBytes[i*8+5]=1;
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	3305      	adds	r3, #5
 80007be:	4a2b      	ldr	r2, [pc, #172]	; (800086c <NandControllerInitAndTest+0x2a4>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X02)==0X00)
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d106      	bne.n	80007de <NandControllerInitAndTest+0x216>
		stableBytes[i*8+6]=1;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	3306      	adds	r3, #6
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <NandControllerInitAndTest+0x2a4>)
 80007d8:	2101      	movs	r1, #1
 80007da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if ((xorres & 0X01)==0X00)
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d106      	bne.n	80007f6 <NandControllerInitAndTest+0x22e>
		stableBytes[i*8+7]=1;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	3307      	adds	r3, #7
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <NandControllerInitAndTest+0x2a4>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<BUFFER_SIZE; i++)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000802:	d394      	bcc.n	800072e <NandControllerInitAndTest+0x166>
	}
	printf("Stable Bits: in page: 2\n");
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <NandControllerInitAndTest+0x2a8>)
 8000806:	f002 fa91 	bl	8002d2c <puts>
	printf("{");
 800080a:	207b      	movs	r0, #123	; 0x7b
 800080c:	f002 fa1e 	bl	8002c4c <putchar>
	for(int i =0; i<16384; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00c      	b.n	8000830 <NandControllerInitAndTest+0x268>
	{
		if (stableBytes[i]==1)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <NandControllerInitAndTest+0x2a4>)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d103      	bne.n	800082a <NandControllerInitAndTest+0x262>
		{
		printf("%d, ", i);
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <NandControllerInitAndTest+0x2ac>)
 8000826:	f002 f9f9 	bl	8002c1c <iprintf>
	for(int i =0; i<16384; i++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000836:	dbee      	blt.n	8000816 <NandControllerInitAndTest+0x24e>
		}
	}
	printf("}\n");
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <NandControllerInitAndTest+0x2b0>)
 800083a:	f002 fa77 	bl	8002d2c <puts>
	HAL_Delay(1000);
 800083e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000842:	f000 fba5 	bl	8000f90 <HAL_Delay>

    return NAND_STATUS_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000010c 	.word	0x2000010c
 8000854:	2000011c 	.word	0x2000011c
 8000858:	200000cc 	.word	0x200000cc
 800085c:	2000012c 	.word	0x2000012c
 8000860:	2000092c 	.word	0x2000092c
 8000864:	08003b58 	.word	0x08003b58
 8000868:	08003b68 	.word	0x08003b68
 800086c:	2000117c 	.word	0x2000117c
 8000870:	08003b70 	.word	0x08003b70
 8000874:	08003b88 	.word	0x08003b88
 8000878:	08003b90 	.word	0x08003b90

0800087c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000882:	f000 fb13 	bl	8000eac <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000886:	f000 f815 	bl	80008b4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800088a:	f000 f8ff 	bl	8000a8c <MX_GPIO_Init>
    MX_FMC_Init();
 800088e:	f000 f89b 	bl	80009c8 <MX_FMC_Init>
    MX_USART1_UART_Init();
 8000892:	f000 f86f 	bl	8000974 <MX_USART1_UART_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint8_t errorMsg[] = "Something Went Wrong";
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <main+0x34>)
 8000898:	463c      	mov	r4, r7
 800089a:	461d      	mov	r5, r3
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a4:	6020      	str	r0, [r4, #0]
 80008a6:	3404      	adds	r4, #4
 80008a8:	7021      	strb	r1, [r4, #0]
    NandControllerInitAndTest();
 80008aa:	f7ff fe8d 	bl	80005c8 <NandControllerInitAndTest>
    while (1)
 80008ae:	e7fe      	b.n	80008ae <main+0x32>
 80008b0:	08003b94 	.word	0x08003b94

080008b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f9a2 	bl	8002c0c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <SystemClock_Config+0xb8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <SystemClock_Config+0xb8>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <SystemClock_Config+0xb8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <SystemClock_Config+0xbc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <SystemClock_Config+0xbc>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <SystemClock_Config+0xbc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f953 	bl	8001bd4 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000934:	f000 f8e0 	bl	8000af8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60fb      	str	r3, [r7, #12]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fb80 	bl	8002058 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xae>
    {
        Error_Handler();
 800095e:	f000 f8cb 	bl	8000af8 <Error_Handler>
    }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	; 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	f001 fd1c 	bl	80023e8 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80009b6:	f000 f89f 	bl	8000af8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	40011000 	.word	0x40011000

080009c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN FMC_Init 0 */

    /* USER CODE END FMC_Init 0 */

    FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
    FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]

    /* USER CODE END FMC_Init 1 */

    /** Perform the NAND1 memory initialization sequence
     */
    hnand1.Instance = FMC_NAND_DEVICE;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_FMC_Init+0xbc>)
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_FMC_Init+0xc0>)
 80009ec:	601a      	str	r2, [r3, #0]
    /* hnand1.Init */
    hnand1.Init.NandBank = FMC_NAND_BANK2;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_FMC_Init+0xbc>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	605a      	str	r2, [r3, #4]
    hnand1.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_FMC_Init+0xbc>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	609a      	str	r2, [r3, #8]
    hnand1.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_FMC_Init+0xbc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
    hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
    hnand1.Init.TCLRSetupTime = 0;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
    hnand1.Init.TARSetupTime = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
    /* hnand1.Config */
    hnand1.Config.PageSize = 0;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hnand1.Config.SpareAreaSize = 0;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
    hnand1.Config.BlockSize = 0;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hnand1.Config.BlockNbr = 0;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hnand1.Config.PlaneNbr = 0;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
    hnand1.Config.PlaneSize = 0;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
    hnand1.Config.ExtraCommandEnable = DISABLE;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* ComSpaceTiming */
    ComSpaceTiming.SetupTime = 252;
 8000a44:	23fc      	movs	r3, #252	; 0xfc
 8000a46:	613b      	str	r3, [r7, #16]
    ComSpaceTiming.WaitSetupTime = 252;
 8000a48:	23fc      	movs	r3, #252	; 0xfc
 8000a4a:	617b      	str	r3, [r7, #20]
    ComSpaceTiming.HoldSetupTime = 252;
 8000a4c:	23fc      	movs	r3, #252	; 0xfc
 8000a4e:	61bb      	str	r3, [r7, #24]
    ComSpaceTiming.HiZSetupTime = 252;
 8000a50:	23fc      	movs	r3, #252	; 0xfc
 8000a52:	61fb      	str	r3, [r7, #28]
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = 252;
 8000a54:	23fc      	movs	r3, #252	; 0xfc
 8000a56:	603b      	str	r3, [r7, #0]
    AttSpaceTiming.WaitSetupTime = 252;
 8000a58:	23fc      	movs	r3, #252	; 0xfc
 8000a5a:	607b      	str	r3, [r7, #4]
    AttSpaceTiming.HoldSetupTime = 252;
 8000a5c:	23fc      	movs	r3, #252	; 0xfc
 8000a5e:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.HiZSetupTime = 252;
 8000a60:	23fc      	movs	r3, #252	; 0xfc
 8000a62:	60fb      	str	r3, [r7, #12]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000a64:	463a      	mov	r2, r7
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_FMC_Init+0xbc>)
 8000a6e:	f000 fd41 	bl	80014f4 <HAL_NAND_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_FMC_Init+0xb4>
    {
        Error_Handler( );
 8000a78:	f000 f83e 	bl	8000af8 <Error_Handler>
    }

    /* USER CODE BEGIN FMC_Init 2 */

    /* USER CODE END FMC_Init 2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000113c 	.word	0x2000113c
 8000a88:	a0000060 	.word	0xa0000060

08000a8c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0x8c>)
 8000bd0:	f000 fae6 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_FMC_MspInit+0x88>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d131      	bne.n	8000c68 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_FMC_MspInit+0x88>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_FMC_MspInit+0x8c>)
 8000c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_FMC_MspInit+0x8c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6393      	str	r3, [r2, #56]	; 0x38
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_FMC_MspInit+0x8c>)
 8000c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD6   ------> FMC_NWAIT
  PD7   ------> FMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c26:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <HAL_FMC_MspInit+0x90>)
 8000c42:	f000 faad 	bl	80011a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
 8000c46:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8000c4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <HAL_FMC_MspInit+0x94>)
 8000c62:	f000 fa9d 	bl	80011a0 <HAL_GPIO_Init>
 8000c66:	e000      	b.n	8000c6a <HAL_FMC_MspInit+0x82>
    return;
 8000c68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000112c 	.word	0x2000112c
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8000c88:	f7ff ffae 	bl	8000be8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f932 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
	}

return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
	return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x50>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x16>
		heap_end = &end;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <_sbrk+0x50>)
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <_sbrk+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <_sbrk+0x50>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_sbrk+0x50>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	466a      	mov	r2, sp
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d907      	bls.n	8000dce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dbe:	f001 fefb 	bl	8002bb8 <__errno>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	e006      	b.n	8000ddc <_sbrk+0x48>
	}

	heap_end += incr;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <_sbrk+0x50>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <_sbrk+0x50>)
 8000dd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20001130 	.word	0x20001130
 8000de8:	20009188 	.word	0x20009188

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <SystemInit+0x60>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <SystemInit+0x60>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <SystemInit+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <SystemInit+0x64>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <SystemInit+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <SystemInit+0x64>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <SystemInit+0x64>)
 8000e18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <SystemInit+0x64>)
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <SystemInit+0x68>)
 8000e26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <SystemInit+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <SystemInit+0x64>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SystemInit+0x60>)
 8000e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e40:	609a      	str	r2, [r3, #8]
#endif
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	24003010 	.word	0x24003010

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5e:	e003      	b.n	8000e68 <LoopCopyDataInit>

08000e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e66:	3104      	adds	r1, #4

08000e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e70:	d3f6      	bcc.n	8000e60 <CopyDataInit>
  ldr  r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e74:	e002      	b.n	8000e7c <LoopFillZerobss>

08000e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e78:	f842 3b04 	str.w	r3, [r2], #4

08000e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e80:	d3f9      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffb3 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f001 fe9d 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fcf7 	bl	800087c <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e94:	08003c6c 	.word	0x08003c6c
  ldr  r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e9c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ea0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ea4:	20009184 	.word	0x20009184

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f92f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe12 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f939 	bl	8001186 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f90f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000917c 	.word	0x2000917c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000917c 	.word	0x2000917c

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_Delay+0x40>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff47 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff5c 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffb0 	bl	80010f4 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e177      	b.n	80014ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8166 	bne.w	80014a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x4a>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	69b9      	ldr	r1, [r7, #24]
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0203 	and.w	r2, r3, #3
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d00b      	beq.n	8001286 <HAL_GPIO_Init+0xe6>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127a:	2b11      	cmp	r3, #17
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b12      	cmp	r3, #18
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80c0 	beq.w	80014a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_GPIO_Init+0x320>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a64      	ldr	r2, [pc, #400]	; (80014c0 <HAL_GPIO_Init+0x320>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_GPIO_Init+0x320>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a60      	ldr	r2, [pc, #384]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_GPIO_Init+0x328>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d037      	beq.n	80013de <HAL_GPIO_Init+0x23e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_GPIO_Init+0x32c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d031      	beq.n	80013da <HAL_GPIO_Init+0x23a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_GPIO_Init+0x330>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02b      	beq.n	80013d6 <HAL_GPIO_Init+0x236>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a54      	ldr	r2, [pc, #336]	; (80014d4 <HAL_GPIO_Init+0x334>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x232>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a53      	ldr	r2, [pc, #332]	; (80014d8 <HAL_GPIO_Init+0x338>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x33c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x340>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x344>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x348>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x34c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x21a>
 80013b6:	2309      	movs	r3, #9
 80013b8:	e012      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ba:	230a      	movs	r3, #10
 80013bc:	e010      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013be:	2308      	movs	r3, #8
 80013c0:	e00e      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c6:	2306      	movs	r3, #6
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4934      	ldr	r1, [pc, #208]	; (80014c4 <HAL_GPIO_Init+0x324>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <HAL_GPIO_Init+0x350>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001422:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <HAL_GPIO_Init+0x350>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_GPIO_Init+0x350>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144c:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x350>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_GPIO_Init+0x350>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x350>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_GPIO_Init+0x350>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_GPIO_Init+0x350>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f ae84 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021800 	.word	0x40021800
 80014e4:	40021c00 	.word	0x40021c00
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40022400 	.word	0x40022400
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e03e      	b.n	8001588 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fbae 	bl	8000c80 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3304      	adds	r3, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f001 fa94 	bl	8002a5c <FMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	461a      	mov	r2, r3
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	f001 face 	bl	8002ae0 <FMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	461a      	mov	r2, r3
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f001 fafc 	bl	8002b4c <FMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b10      	cmp	r3, #16
 800155a:	d108      	bne.n	800156e <HAL_NAND_Init+0x7a>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0204 	orr.w	r2, r2, #4
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e007      	b.n	800157e <HAL_NAND_Init+0x8a>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0204 	orr.w	r2, r2, #4
 800157c:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_NAND_Read_Page_8b+0x34>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e107      	b.n	80017d4 <HAL_NAND_Read_Page_8b+0x244>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d101      	bne.n	80015dc <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 80015d8:	2302      	movs	r3, #2
 80015da:	e0fb      	b.n	80017d4 <HAL_NAND_Read_Page_8b+0x244>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d103      	bne.n	80015ec <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 80015e4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	e002      	b.n	80015f2 <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 80015ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	889b      	ldrh	r3, [r3, #4]
 8001604:	461a      	mov	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	4618      	mov	r0, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	fb03 f300 	mul.w	r3, r3, r0
 8001614:	4413      	add	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	440b      	add	r3, r1
 8001620:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8001622:	e0c1      	b.n	80017a8 <HAL_NAND_Read_Page_8b+0x218>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	3301      	adds	r3, #1
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001644:	d835      	bhi.n	80016b2 <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d212      	bcs.n	800167e <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	0a1a      	lsrs	r2, r3, #8
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e058      	b.n	8001730 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	0a1a      	lsrs	r2, r3, #8
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	0c1a      	lsrs	r2, r3, #16
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e03e      	b.n	8001730 <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d217      	bcs.n	80016f4 <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	0a1a      	lsrs	r2, r3, #8
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	0a1a      	lsrs	r2, r3, #8
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	0c1a      	lsrs	r2, r3, #16
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001740:	2b01      	cmp	r3, #1
 8001742:	d124      	bne.n	800178e <HAL_NAND_Read_Page_8b+0x1fe>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fc18 	bl	8000f78 <HAL_GetTick>
 8001748:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 800174a:	e009      	b.n	8001760 <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 800174c:	f7ff fc14 	bl	8000f78 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175a:	d901      	bls.n	8001760 <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 800175c:	2303      	movs	r3, #3
 800175e:	e039      	b.n	80017d4 <HAL_NAND_Read_Page_8b+0x244>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 fa05 	bl	8001b70 <HAL_NAND_Read_Status>
 8001766:	4603      	mov	r3, r0
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d1ef      	bne.n	800174c <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001776:	f3bf 8f4f 	dsb	sy
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 800177a:	e008      	b.n	800178e <HAL_NAND_Read_Page_8b+0x1fe>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 800177c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	1c59      	adds	r1, r3, #1
 8001782:	6079      	str	r1, [r7, #4]
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	3301      	adds	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	429a      	cmp	r2, r3
 8001794:	d8f2      	bhi.n	800177c <HAL_NAND_Read_Page_8b+0x1ec>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	3301      	adds	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_NAND_Read_Page_8b+0x232>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f4ff af31 	bcc.w	8001624 <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_NAND_Write_Page_8b+0x34>
 800180c:	2302      	movs	r3, #2
 800180e:	e104      	b.n	8001a1a <HAL_NAND_Write_Page_8b+0x23e>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d101      	bne.n	8001828 <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
 8001826:	e0f8      	b.n	8001a1a <HAL_NAND_Write_Page_8b+0x23e>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b10      	cmp	r3, #16
 800182e:	d103      	bne.n	8001838 <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8001830:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e002      	b.n	800183e <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	885b      	ldrh	r3, [r3, #2]
 8001856:	4618      	mov	r0, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	fb03 f300 	mul.w	r3, r3, r0
 8001860:	4413      	add	r3, r2
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	440b      	add	r3, r1
 800186c:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800186e:	e0be      	b.n	80019ee <HAL_NAND_Write_Page_8b+0x212>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	3301      	adds	r3, #1
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189a:	d835      	bhi.n	8001908 <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d212      	bcs.n	80018d4 <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	0a1a      	lsrs	r2, r3, #8
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e066      	b.n	80019a2 <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	0a1a      	lsrs	r2, r3, #8
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	0c1a      	lsrs	r2, r3, #16
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e04c      	b.n	80019a2 <HAL_NAND_Write_Page_8b+0x1c6>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d217      	bcs.n	800194a <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	0a1a      	lsrs	r2, r3, #8
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e02b      	b.n	80019a2 <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	0a1a      	lsrs	r2, r3, #8
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	0c1a      	lsrs	r2, r3, #16
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	f3bf 8f4f 	dsb	sy
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 800198e:	e008      	b.n	80019a2 <HAL_NAND_Write_Page_8b+0x1c6>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	3301      	adds	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d8f2      	bhi.n	8001990 <HAL_NAND_Write_Page_8b+0x1b4>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	2210      	movs	r2, #16
 80019b2:	701a      	strb	r2, [r3, #0]
    
    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80019b4:	e00c      	b.n	80019d0 <HAL_NAND_Write_Page_8b+0x1f4>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fadf 	bl	8000f78 <HAL_GetTick>
 80019ba:	61b8      	str	r0, [r7, #24]
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 80019bc:	f7ff fadc 	bl	8000f78 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ca:	d901      	bls.n	80019d0 <HAL_NAND_Write_Page_8b+0x1f4>
      {
        return HAL_TIMEOUT; 
 80019cc:	2303      	movs	r3, #3
 80019ce:	e024      	b.n	8001a1a <HAL_NAND_Write_Page_8b+0x23e>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f8cd 	bl	8001b70 <HAL_NAND_Read_Status>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d1ec      	bne.n	80019b6 <HAL_NAND_Write_Page_8b+0x1da>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	3301      	adds	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <HAL_NAND_Write_Page_8b+0x22c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	f4ff af34 	bcc.w	8001870 <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_NAND_Erase_Block+0x20>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e092      	b.n	8001b68 <HAL_NAND_Erase_Block+0x146>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d101      	bne.n	8001a5a <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	e086      	b.n	8001b68 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d103      	bne.n	8001a6a <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 8001a62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e002      	b.n	8001a70 <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001a6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a6e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	2260      	movs	r2, #96	; 0x60
 8001a80:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	885b      	ldrh	r3, [r3, #2]
 8001a92:	4618      	mov	r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	fb03 f300 	mul.w	r3, r3, r0
 8001a9c:	440b      	add	r3, r1
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	fb11 f303 	smulbb	r3, r1, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	885b      	ldrh	r3, [r3, #2]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	fb03 f300 	mul.w	r3, r3, r0
 8001ad2:	4413      	add	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	440b      	add	r3, r1
 8001ade:	0a1a      	lsrs	r2, r3, #8
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	461a      	mov	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	885b      	ldrh	r3, [r3, #2]
 8001afa:	4618      	mov	r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	fb03 f300 	mul.w	r3, r3, r0
 8001b04:	4413      	add	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	0c1a      	lsrs	r2, r3, #16
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	22d0      	movs	r2, #208	; 0xd0
 8001b24:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2e:	f7ff fa23 	bl	8000f78 <HAL_GetTick>
 8001b32:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001b34:	e00d      	b.n	8001b52 <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8001b36:	f7ff fa1f 	bl	8000f78 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d905      	bls.n	8001b52 <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e00a      	b.n	8001b68 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f80c 	bl	8001b70 <HAL_NAND_Read_Status>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b40      	cmp	r3, #64	; 0x40
 8001b5c:	d1eb      	bne.n	8001b36 <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d103      	bne.n	8001b90 <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8001b88:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e002      	b.n	8001b96 <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b94:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	2270      	movs	r2, #112	; 0x70
 8001b9e:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e007      	b.n	8001bc6 <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8001bc0:	2340      	movs	r3, #64	; 0x40
 8001bc2:	e000      	b.n	8001bc6 <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e22d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d075      	beq.n	8001cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d112      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d05b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d157      	bne.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e208      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_OscConfig+0x74>
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a80      	ldr	r2, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f974 	bl	8000f78 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f970 	bl	8000f78 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1cd      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f960 	bl	8000f78 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f95c 	bl	8000f78 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1b9      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e18d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4952      	ldr	r1, [pc, #328]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f915 	bl	8000f78 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff f911 	bl	8000f78 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e16e      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4940      	ldr	r1, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f8f4 	bl	8000f78 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f8f0 	bl	8000f78 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e14d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d030      	beq.n	8001e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f8d4 	bl	8000f78 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f8d0 	bl	8000f78 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e12d      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x200>
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x2b4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f8bd 	bl	8000f78 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f8b9 	bl	8000f78 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e116      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a0 	beq.w	8001f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_RCC_OscConfig+0x2b8>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff f87f 	bl	8000f78 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e011      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
 8001e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e90:	f7ff f872 	bl	8000f78 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cf      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x478>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
 8001eb6:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a65      	ldr	r2, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ecc:	4b60      	ldr	r3, [pc, #384]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a5f      	ldr	r2, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x32a>
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a59      	ldr	r2, [pc, #356]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f837 	bl	8000f78 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f833 	bl	8000f78 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e08e      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x33a>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff f821 	bl	8000f78 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f81d 	bl	8000f78 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e078      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d064      	beq.n	8002040 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d05c      	beq.n	800203c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d141      	bne.n	800200e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe fff2 	bl	8000f78 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe ffee 	bl	8000f78 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04b      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	491d      	ldr	r1, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ffc7 	bl	8000f78 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ffc3 	bl	8000f78 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e020      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x41a>
 800200c:	e018      	b.n	8002040 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_OscConfig+0x480>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ffb0 	bl	8000f78 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ffac 	bl	8000f78 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e009      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x47c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x448>
 800203a:	e001      	b.n	8002040 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000
 8002050:	40023800 	.word	0x40023800
 8002054:	42470060 	.word	0x42470060

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0ca      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b6      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494c      	ldr	r1, [pc, #304]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e065      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4933      	ldr	r1, [pc, #204]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe ff16 	bl	8000f78 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe ff12 	bl	8000f78 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04d      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e030      	b.n	8002202 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4915      	ldr	r1, [pc, #84]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f81d 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021e2:	4601      	mov	r1, r0
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	fa21 f303 	lsr.w	r3, r1, r3
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7fe fe78 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	08003bac 	.word	0x08003bac
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d007      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x32>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d008      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x38>
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 808d 	bne.w	8002362 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCC_GetSysClockFreq+0x15c>)
 800224a:	60bb      	str	r3, [r7, #8]
       break;
 800224c:	e08c      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002250:	60bb      	str	r3, [r7, #8]
      break;
 8002252:	e089      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d023      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	f04f 0400 	mov.w	r4, #0
 8002274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	ea03 0501 	and.w	r5, r3, r1
 8002280:	ea04 0602 	and.w	r6, r4, r2
 8002284:	4a3d      	ldr	r2, [pc, #244]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002286:	fb02 f106 	mul.w	r1, r2, r6
 800228a:	2200      	movs	r2, #0
 800228c:	fb02 f205 	mul.w	r2, r2, r5
 8002290:	440a      	add	r2, r1
 8002292:	493a      	ldr	r1, [pc, #232]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002294:	fba5 0101 	umull	r0, r1, r5, r1
 8002298:	1853      	adds	r3, r2, r1
 800229a:	4619      	mov	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	f7fd fff3 	bl	8000290 <__aeabi_uldivmod>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e049      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	f04f 0400 	mov.w	r4, #0
 80022bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea03 0501 	and.w	r5, r3, r1
 80022c8:	ea04 0602 	and.w	r6, r4, r2
 80022cc:	4629      	mov	r1, r5
 80022ce:	4632      	mov	r2, r6
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	0154      	lsls	r4, r2, #5
 80022da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	4619      	mov	r1, r3
 80022e2:	4622      	mov	r2, r4
 80022e4:	1b49      	subs	r1, r1, r5
 80022e6:	eb62 0206 	sbc.w	r2, r2, r6
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f04f 0400 	mov.w	r4, #0
 80022f2:	0194      	lsls	r4, r2, #6
 80022f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022f8:	018b      	lsls	r3, r1, #6
 80022fa:	1a5b      	subs	r3, r3, r1
 80022fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800230e:	00d9      	lsls	r1, r3, #3
 8002310:	460b      	mov	r3, r1
 8002312:	4614      	mov	r4, r2
 8002314:	195b      	adds	r3, r3, r5
 8002316:	eb44 0406 	adc.w	r4, r4, r6
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	02a2      	lsls	r2, r4, #10
 8002324:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002328:	0299      	lsls	r1, r3, #10
 800232a:	460b      	mov	r3, r1
 800232c:	4614      	mov	r4, r2
 800232e:	4618      	mov	r0, r3
 8002330:	4621      	mov	r1, r4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 0400 	mov.w	r4, #0
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	f7fd ffa8 	bl	8000290 <__aeabi_uldivmod>
 8002340:	4603      	mov	r3, r0
 8002342:	460c      	mov	r4, r1
 8002344:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	60bb      	str	r3, [r7, #8]
      break;
 8002360:	e002      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002364:	60bb      	str	r3, [r7, #8]
      break;
 8002366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002368:	68bb      	ldr	r3, [r7, #8]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	00f42400 	.word	0x00f42400
 800237c:	017d7840 	.word	0x017d7840

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4601      	mov	r1, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08003bbc 	.word	0x08003bbc

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffdc 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c8:	4601      	mov	r1, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0b5b      	lsrs	r3, r3, #13
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	08003bbc 	.word	0x08003bbc

080023e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e03f      	b.n	800247a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fba2 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f90b 	bl	8002648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af02      	add	r7, sp, #8
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	f040 8083 	bne.w	80025aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_UART_Transmit+0x2e>
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e07b      	b.n	80025ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x40>
 80024be:	2302      	movs	r3, #2
 80024c0:	e074      	b.n	80025ac <HAL_UART_Transmit+0x12a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2221      	movs	r2, #33	; 0x21
 80024d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fd4e 	bl	8000f78 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ea:	e042      	b.n	8002572 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d122      	bne.n	800254a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2200      	movs	r2, #0
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f850 	bl	80025b4 <UART_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e046      	b.n	80025ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3302      	adds	r3, #2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e017      	b.n	8002572 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	e013      	b.n	8002572 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f82d 	bl	80025b4 <UART_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e023      	b.n	80025ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1b7      	bne.n	80024ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2200      	movs	r2, #0
 8002584:	2140      	movs	r1, #64	; 0x40
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f814 	bl	80025b4 <UART_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00a      	b.n	80025ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c4:	e02c      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025d4:	f7fe fcd0 	bl	8000f78 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d21d      	bcs.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e00f      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0c3      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002688:	f023 030c 	bic.w	r3, r3, #12
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	430b      	orrs	r3, r1
 8002694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b4:	f040 80e4 	bne.w	8002880 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4aab      	ldr	r2, [pc, #684]	; (800296c <UART_SetConfig+0x324>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <UART_SetConfig+0x84>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4aaa      	ldr	r2, [pc, #680]	; (8002970 <UART_SetConfig+0x328>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d16c      	bne.n	80027a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026cc:	f7ff fe78 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009a      	lsls	r2, r3, #2
 80026da:	441a      	add	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4aa3      	ldr	r2, [pc, #652]	; (8002974 <UART_SetConfig+0x32c>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	011c      	lsls	r4, r3, #4
 80026f0:	f7ff fe66 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fbb2 f5f3 	udiv	r5, r2, r3
 800270a:	f7ff fe59 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 800270e:	4602      	mov	r2, r0
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a93      	ldr	r2, [pc, #588]	; (8002974 <UART_SetConfig+0x32c>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2264      	movs	r2, #100	; 0x64
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	1aeb      	subs	r3, r5, r3
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	3332      	adds	r3, #50	; 0x32
 8002738:	4a8e      	ldr	r2, [pc, #568]	; (8002974 <UART_SetConfig+0x32c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002746:	441c      	add	r4, r3
 8002748:	f7ff fe3a 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 800274c:	4602      	mov	r2, r0
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002762:	f7ff fe2d 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002766:	4602      	mov	r2, r0
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	4a7d      	ldr	r2, [pc, #500]	; (8002974 <UART_SetConfig+0x32c>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2264      	movs	r2, #100	; 0x64
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	1aeb      	subs	r3, r5, r3
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	3332      	adds	r3, #50	; 0x32
 8002790:	4a78      	ldr	r2, [pc, #480]	; (8002974 <UART_SetConfig+0x32c>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 0207 	and.w	r2, r3, #7
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4422      	add	r2, r4
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e154      	b.n	8002a50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027a6:	f7ff fdf7 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009a      	lsls	r2, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <UART_SetConfig+0x32c>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	011c      	lsls	r4, r3, #4
 80027ca:	f7ff fde5 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80027e4:	f7ff fdd8 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009a      	lsls	r2, r3, #2
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4a5d      	ldr	r2, [pc, #372]	; (8002974 <UART_SetConfig+0x32c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2264      	movs	r2, #100	; 0x64
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	1aeb      	subs	r3, r5, r3
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	3332      	adds	r3, #50	; 0x32
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <UART_SetConfig+0x32c>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002820:	441c      	add	r4, r3
 8002822:	f7ff fdb9 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002826:	4602      	mov	r2, r0
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009a      	lsls	r2, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fbb2 f5f3 	udiv	r5, r2, r3
 800283c:	f7ff fdac 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002840:	4602      	mov	r2, r0
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a47      	ldr	r2, [pc, #284]	; (8002974 <UART_SetConfig+0x32c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2264      	movs	r2, #100	; 0x64
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	1aeb      	subs	r3, r5, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a42      	ldr	r2, [pc, #264]	; (8002974 <UART_SetConfig+0x32c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4422      	add	r2, r4
 800287c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800287e:	e0e7      	b.n	8002a50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a39      	ldr	r2, [pc, #228]	; (800296c <UART_SetConfig+0x324>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <UART_SetConfig+0x24c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a38      	ldr	r2, [pc, #224]	; (8002970 <UART_SetConfig+0x328>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d171      	bne.n	8002978 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002894:	f7ff fd94 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002898:	4602      	mov	r2, r0
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009a      	lsls	r2, r3, #2
 80028a2:	441a      	add	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4a31      	ldr	r2, [pc, #196]	; (8002974 <UART_SetConfig+0x32c>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	011c      	lsls	r4, r3, #4
 80028b8:	f7ff fd82 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80028d2:	f7ff fd75 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <UART_SetConfig+0x32c>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2264      	movs	r2, #100	; 0x64
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	1aeb      	subs	r3, r5, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <UART_SetConfig+0x32c>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	441c      	add	r4, r3
 800290e:	f7ff fd57 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002912:	4602      	mov	r2, r0
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fbb2 f5f3 	udiv	r5, r2, r3
 8002928:	f7ff fd4a 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 800292c:	4602      	mov	r2, r0
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009a      	lsls	r2, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <UART_SetConfig+0x32c>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	1aeb      	subs	r3, r5, r3
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	3332      	adds	r3, #50	; 0x32
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <UART_SetConfig+0x32c>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	f003 020f 	and.w	r2, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4422      	add	r2, r4
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	e071      	b.n	8002a50 <UART_SetConfig+0x408>
 800296c:	40011000 	.word	0x40011000
 8002970:	40011400 	.word	0x40011400
 8002974:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002978:	f7ff fd0e 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 800297c:	4602      	mov	r2, r0
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <UART_SetConfig+0x410>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	011c      	lsls	r4, r3, #4
 800299c:	f7ff fcfc 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009a      	lsls	r2, r3, #2
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80029b6:	f7ff fcef 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <UART_SetConfig+0x410>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2264      	movs	r2, #100	; 0x64
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	1aeb      	subs	r3, r5, r3
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	3332      	adds	r3, #50	; 0x32
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <UART_SetConfig+0x410>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f0:	441c      	add	r4, r3
 80029f2:	f7ff fcd1 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a0c:	f7ff fcc4 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009a      	lsls	r2, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <UART_SetConfig+0x410>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2264      	movs	r2, #100	; 0x64
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	1aeb      	subs	r3, r5, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	3332      	adds	r3, #50	; 0x32
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <UART_SetConfig+0x410>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 020f 	and.w	r2, r3, #15
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4422      	add	r2, r4
 8002a4c:	609a      	str	r2, [r3, #8]
}
 8002a4e:	e7ff      	b.n	8002a50 <UART_SetConfig+0x408>
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));   

  if(Init->NandBank == FMC_NAND_BANK2)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d103      	bne.n	8002a7a <FMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e002      	b.n	8002a80 <FMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FMC_PCR2_PWAITEN  | FMC_PCR2_PBKEN | FMC_PCR2_PTYP | \
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <FMC_NAND_Init+0x80>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
                       FMC_PCR2_PWID | FMC_PCR2_ECCEN | FMC_PCR2_TCLR | \
                       FMC_PCR2_TAR | FMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
                     Init->MemoryDataWidth             |\
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
 8002a90:	431a      	orrs	r2, r3
                     Init->EccComputation              |\
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth             |\
 8002a96:	431a      	orrs	r2, r3
                     Init->ECCPageSize                 |\
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation              |\
 8002a9c:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)     |\
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                 |\
 8002aa4:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FMC_NAND_BANK2)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d103      	bne.n	8002ac8 <FMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e002      	b.n	8002ace <FMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0

}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	fff00181 	.word	0xfff00181

08002ae0 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d103      	bne.n	8002afe <FMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e002      	b.n	8002b04 <FMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PMEM2_MEMSET2  | FMC_PMEM2_MEMWAIT2 | FMC_PMEM2_MEMHOLD2 | \
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
                       FMC_PMEM2_MEMHIZ2)); 
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002b12:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002b1a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002b22:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FMC_NAND_BANK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d103      	bne.n	8002b38 <FMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	e002      	b.n	8002b3e <FMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d103      	bne.n	8002b6a <FMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e002      	b.n	8002b70 <FMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PATT2_ATTSET2  | FMC_PATT2_ATTWAIT2 | FMC_PATT2_ATTHOLD2 | \
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
                       FMC_PATT2_ATTHIZ2));
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002b7e:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002b86:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002b8e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
                       
  if(Bank == FMC_NAND_BANK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d103      	bne.n	8002ba4 <FMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e002      	b.n	8002baa <FMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <__errno>:
 8002bb8:	4b01      	ldr	r3, [pc, #4]	; (8002bc0 <__errno+0x8>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0d      	ldr	r6, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1ba4      	subs	r4, r4, r6
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2500      	movs	r5, #0
 8002bd0:	42a5      	cmp	r5, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4e0b      	ldr	r6, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 ffb2 	bl	8003b40 <_init>
 8002bdc:	1ba4      	subs	r4, r4, r6
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2500      	movs	r5, #0
 8002be2:	42a5      	cmp	r5, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bec:	4798      	blx	r3
 8002bee:	3501      	adds	r5, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf6:	4798      	blx	r3
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08003c64 	.word	0x08003c64
 8002c00:	08003c64 	.word	0x08003c64
 8002c04:	08003c64 	.word	0x08003c64
 8002c08:	08003c68 	.word	0x08003c68

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <iprintf>:
 8002c1c:	b40f      	push	{r0, r1, r2, r3}
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <iprintf+0x2c>)
 8002c20:	b513      	push	{r0, r1, r4, lr}
 8002c22:	681c      	ldr	r4, [r3, #0]
 8002c24:	b124      	cbz	r4, 8002c30 <iprintf+0x14>
 8002c26:	69a3      	ldr	r3, [r4, #24]
 8002c28:	b913      	cbnz	r3, 8002c30 <iprintf+0x14>
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f000 fa36 	bl	800309c <__sinit>
 8002c30:	ab05      	add	r3, sp, #20
 8002c32:	9a04      	ldr	r2, [sp, #16]
 8002c34:	68a1      	ldr	r1, [r4, #8]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f000 fbef 	bl	800341c <_vfiprintf_r>
 8002c3e:	b002      	add	sp, #8
 8002c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c44:	b004      	add	sp, #16
 8002c46:	4770      	bx	lr
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <putchar>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <putchar+0x24>)
 8002c50:	681c      	ldr	r4, [r3, #0]
 8002c52:	4605      	mov	r5, r0
 8002c54:	b124      	cbz	r4, 8002c60 <putchar+0x14>
 8002c56:	69a3      	ldr	r3, [r4, #24]
 8002c58:	b913      	cbnz	r3, 8002c60 <putchar+0x14>
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 fa1e 	bl	800309c <__sinit>
 8002c60:	68a2      	ldr	r2, [r4, #8]
 8002c62:	4629      	mov	r1, r5
 8002c64:	4620      	mov	r0, r4
 8002c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c6a:	f000 be75 	b.w	8003958 <_putc_r>
 8002c6e:	bf00      	nop
 8002c70:	2000000c 	.word	0x2000000c

08002c74 <_puts_r>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	460e      	mov	r6, r1
 8002c78:	4605      	mov	r5, r0
 8002c7a:	b118      	cbz	r0, 8002c84 <_puts_r+0x10>
 8002c7c:	6983      	ldr	r3, [r0, #24]
 8002c7e:	b90b      	cbnz	r3, 8002c84 <_puts_r+0x10>
 8002c80:	f000 fa0c 	bl	800309c <__sinit>
 8002c84:	69ab      	ldr	r3, [r5, #24]
 8002c86:	68ac      	ldr	r4, [r5, #8]
 8002c88:	b913      	cbnz	r3, 8002c90 <_puts_r+0x1c>
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 fa06 	bl	800309c <__sinit>
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <_puts_r+0xac>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d117      	bne.n	8002cc6 <_puts_r+0x52>
 8002c96:	686c      	ldr	r4, [r5, #4]
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	071b      	lsls	r3, r3, #28
 8002c9c:	d51d      	bpl.n	8002cda <_puts_r+0x66>
 8002c9e:	6923      	ldr	r3, [r4, #16]
 8002ca0:	b1db      	cbz	r3, 8002cda <_puts_r+0x66>
 8002ca2:	3e01      	subs	r6, #1
 8002ca4:	68a3      	ldr	r3, [r4, #8]
 8002ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60a3      	str	r3, [r4, #8]
 8002cae:	b9e9      	cbnz	r1, 8002cec <_puts_r+0x78>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da2e      	bge.n	8002d12 <_puts_r+0x9e>
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	210a      	movs	r1, #10
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 f83f 	bl	8002d3c <__swbuf_r>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d011      	beq.n	8002ce6 <_puts_r+0x72>
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	e011      	b.n	8002cea <_puts_r+0x76>
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <_puts_r+0xb0>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d101      	bne.n	8002cd0 <_puts_r+0x5c>
 8002ccc:	68ac      	ldr	r4, [r5, #8]
 8002cce:	e7e3      	b.n	8002c98 <_puts_r+0x24>
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <_puts_r+0xb4>)
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	bf08      	it	eq
 8002cd6:	68ec      	ldreq	r4, [r5, #12]
 8002cd8:	e7de      	b.n	8002c98 <_puts_r+0x24>
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f000 f87f 	bl	8002de0 <__swsetup_r>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d0dd      	beq.n	8002ca2 <_puts_r+0x2e>
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da04      	bge.n	8002cfa <_puts_r+0x86>
 8002cf0:	69a2      	ldr	r2, [r4, #24]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	dc06      	bgt.n	8002d04 <_puts_r+0x90>
 8002cf6:	290a      	cmp	r1, #10
 8002cf8:	d004      	beq.n	8002d04 <_puts_r+0x90>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	7019      	strb	r1, [r3, #0]
 8002d02:	e7cf      	b.n	8002ca4 <_puts_r+0x30>
 8002d04:	4622      	mov	r2, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 f818 	bl	8002d3c <__swbuf_r>
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d1c9      	bne.n	8002ca4 <_puts_r+0x30>
 8002d10:	e7e9      	b.n	8002ce6 <_puts_r+0x72>
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	200a      	movs	r0, #10
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	6022      	str	r2, [r4, #0]
 8002d1a:	7018      	strb	r0, [r3, #0]
 8002d1c:	e7e5      	b.n	8002cea <_puts_r+0x76>
 8002d1e:	bf00      	nop
 8002d20:	08003be8 	.word	0x08003be8
 8002d24:	08003c08 	.word	0x08003c08
 8002d28:	08003bc8 	.word	0x08003bc8

08002d2c <puts>:
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <puts+0xc>)
 8002d2e:	4601      	mov	r1, r0
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	f7ff bf9f 	b.w	8002c74 <_puts_r>
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <__swbuf_r>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	460e      	mov	r6, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	4605      	mov	r5, r0
 8002d44:	b118      	cbz	r0, 8002d4e <__swbuf_r+0x12>
 8002d46:	6983      	ldr	r3, [r0, #24]
 8002d48:	b90b      	cbnz	r3, 8002d4e <__swbuf_r+0x12>
 8002d4a:	f000 f9a7 	bl	800309c <__sinit>
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <__swbuf_r+0x98>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	d12a      	bne.n	8002daa <__swbuf_r+0x6e>
 8002d54:	686c      	ldr	r4, [r5, #4]
 8002d56:	69a3      	ldr	r3, [r4, #24]
 8002d58:	60a3      	str	r3, [r4, #8]
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	071a      	lsls	r2, r3, #28
 8002d5e:	d52e      	bpl.n	8002dbe <__swbuf_r+0x82>
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	b363      	cbz	r3, 8002dbe <__swbuf_r+0x82>
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	1ac0      	subs	r0, r0, r3
 8002d6a:	6963      	ldr	r3, [r4, #20]
 8002d6c:	b2f6      	uxtb	r6, r6
 8002d6e:	4283      	cmp	r3, r0
 8002d70:	4637      	mov	r7, r6
 8002d72:	dc04      	bgt.n	8002d7e <__swbuf_r+0x42>
 8002d74:	4621      	mov	r1, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f926 	bl	8002fc8 <_fflush_r>
 8002d7c:	bb28      	cbnz	r0, 8002dca <__swbuf_r+0x8e>
 8002d7e:	68a3      	ldr	r3, [r4, #8]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60a3      	str	r3, [r4, #8]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	6022      	str	r2, [r4, #0]
 8002d8a:	701e      	strb	r6, [r3, #0]
 8002d8c:	6963      	ldr	r3, [r4, #20]
 8002d8e:	3001      	adds	r0, #1
 8002d90:	4283      	cmp	r3, r0
 8002d92:	d004      	beq.n	8002d9e <__swbuf_r+0x62>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	07db      	lsls	r3, r3, #31
 8002d98:	d519      	bpl.n	8002dce <__swbuf_r+0x92>
 8002d9a:	2e0a      	cmp	r6, #10
 8002d9c:	d117      	bne.n	8002dce <__swbuf_r+0x92>
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4628      	mov	r0, r5
 8002da2:	f000 f911 	bl	8002fc8 <_fflush_r>
 8002da6:	b190      	cbz	r0, 8002dce <__swbuf_r+0x92>
 8002da8:	e00f      	b.n	8002dca <__swbuf_r+0x8e>
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <__swbuf_r+0x9c>)
 8002dac:	429c      	cmp	r4, r3
 8002dae:	d101      	bne.n	8002db4 <__swbuf_r+0x78>
 8002db0:	68ac      	ldr	r4, [r5, #8]
 8002db2:	e7d0      	b.n	8002d56 <__swbuf_r+0x1a>
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <__swbuf_r+0xa0>)
 8002db6:	429c      	cmp	r4, r3
 8002db8:	bf08      	it	eq
 8002dba:	68ec      	ldreq	r4, [r5, #12]
 8002dbc:	e7cb      	b.n	8002d56 <__swbuf_r+0x1a>
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 f80d 	bl	8002de0 <__swsetup_r>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d0cc      	beq.n	8002d64 <__swbuf_r+0x28>
 8002dca:	f04f 37ff 	mov.w	r7, #4294967295
 8002dce:	4638      	mov	r0, r7
 8002dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08003be8 	.word	0x08003be8
 8002dd8:	08003c08 	.word	0x08003c08
 8002ddc:	08003bc8 	.word	0x08003bc8

08002de0 <__swsetup_r>:
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <__swsetup_r+0xcc>)
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	4606      	mov	r6, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	b125      	cbz	r5, 8002df6 <__swsetup_r+0x16>
 8002dec:	69ab      	ldr	r3, [r5, #24]
 8002dee:	b913      	cbnz	r3, 8002df6 <__swsetup_r+0x16>
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f953 	bl	800309c <__sinit>
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <__swsetup_r+0xd0>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d10f      	bne.n	8002e1c <__swsetup_r+0x3c>
 8002dfc:	686c      	ldr	r4, [r5, #4]
 8002dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	0715      	lsls	r5, r2, #28
 8002e06:	d42c      	bmi.n	8002e62 <__swsetup_r+0x82>
 8002e08:	06d0      	lsls	r0, r2, #27
 8002e0a:	d411      	bmi.n	8002e30 <__swsetup_r+0x50>
 8002e0c:	2209      	movs	r2, #9
 8002e0e:	6032      	str	r2, [r6, #0]
 8002e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e14:	81a3      	strh	r3, [r4, #12]
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	e03e      	b.n	8002e9a <__swsetup_r+0xba>
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <__swsetup_r+0xd4>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d101      	bne.n	8002e26 <__swsetup_r+0x46>
 8002e22:	68ac      	ldr	r4, [r5, #8]
 8002e24:	e7eb      	b.n	8002dfe <__swsetup_r+0x1e>
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <__swsetup_r+0xd8>)
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	bf08      	it	eq
 8002e2c:	68ec      	ldreq	r4, [r5, #12]
 8002e2e:	e7e6      	b.n	8002dfe <__swsetup_r+0x1e>
 8002e30:	0751      	lsls	r1, r2, #29
 8002e32:	d512      	bpl.n	8002e5a <__swsetup_r+0x7a>
 8002e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e36:	b141      	cbz	r1, 8002e4a <__swsetup_r+0x6a>
 8002e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	d002      	beq.n	8002e46 <__swsetup_r+0x66>
 8002e40:	4630      	mov	r0, r6
 8002e42:	f000 fa19 	bl	8003278 <_free_r>
 8002e46:	2300      	movs	r3, #0
 8002e48:	6363      	str	r3, [r4, #52]	; 0x34
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e50:	81a3      	strh	r3, [r4, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	b94b      	cbnz	r3, 8002e7a <__swsetup_r+0x9a>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d003      	beq.n	8002e7a <__swsetup_r+0x9a>
 8002e72:	4621      	mov	r1, r4
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f9bf 	bl	80031f8 <__smakebuf_r>
 8002e7a:	89a2      	ldrh	r2, [r4, #12]
 8002e7c:	f012 0301 	ands.w	r3, r2, #1
 8002e80:	d00c      	beq.n	8002e9c <__swsetup_r+0xbc>
 8002e82:	2300      	movs	r3, #0
 8002e84:	60a3      	str	r3, [r4, #8]
 8002e86:	6963      	ldr	r3, [r4, #20]
 8002e88:	425b      	negs	r3, r3
 8002e8a:	61a3      	str	r3, [r4, #24]
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	b953      	cbnz	r3, 8002ea6 <__swsetup_r+0xc6>
 8002e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e98:	d1ba      	bne.n	8002e10 <__swsetup_r+0x30>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	0792      	lsls	r2, r2, #30
 8002e9e:	bf58      	it	pl
 8002ea0:	6963      	ldrpl	r3, [r4, #20]
 8002ea2:	60a3      	str	r3, [r4, #8]
 8002ea4:	e7f2      	b.n	8002e8c <__swsetup_r+0xac>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e7f7      	b.n	8002e9a <__swsetup_r+0xba>
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	08003be8 	.word	0x08003be8
 8002eb4:	08003c08 	.word	0x08003c08
 8002eb8:	08003bc8 	.word	0x08003bc8

08002ebc <__sflush_r>:
 8002ebc:	898a      	ldrh	r2, [r1, #12]
 8002ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	0710      	lsls	r0, r2, #28
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	d458      	bmi.n	8002f7c <__sflush_r+0xc0>
 8002eca:	684b      	ldr	r3, [r1, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dc05      	bgt.n	8002edc <__sflush_r+0x20>
 8002ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dc02      	bgt.n	8002edc <__sflush_r+0x20>
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	d0f9      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ee8:	682f      	ldr	r7, [r5, #0]
 8002eea:	6a21      	ldr	r1, [r4, #32]
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	d032      	beq.n	8002f56 <__sflush_r+0x9a>
 8002ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	075a      	lsls	r2, r3, #29
 8002ef6:	d505      	bpl.n	8002f04 <__sflush_r+0x48>
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	1ac0      	subs	r0, r0, r3
 8002efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002efe:	b10b      	cbz	r3, 8002f04 <__sflush_r+0x48>
 8002f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f02:	1ac0      	subs	r0, r0, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	4602      	mov	r2, r0
 8002f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f0a:	6a21      	ldr	r1, [r4, #32]
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	47b0      	blx	r6
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	d106      	bne.n	8002f24 <__sflush_r+0x68>
 8002f16:	6829      	ldr	r1, [r5, #0]
 8002f18:	291d      	cmp	r1, #29
 8002f1a:	d848      	bhi.n	8002fae <__sflush_r+0xf2>
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <__sflush_r+0x108>)
 8002f1e:	40ca      	lsrs	r2, r1
 8002f20:	07d6      	lsls	r6, r2, #31
 8002f22:	d544      	bpl.n	8002fae <__sflush_r+0xf2>
 8002f24:	2200      	movs	r2, #0
 8002f26:	6062      	str	r2, [r4, #4]
 8002f28:	04d9      	lsls	r1, r3, #19
 8002f2a:	6922      	ldr	r2, [r4, #16]
 8002f2c:	6022      	str	r2, [r4, #0]
 8002f2e:	d504      	bpl.n	8002f3a <__sflush_r+0x7e>
 8002f30:	1c42      	adds	r2, r0, #1
 8002f32:	d101      	bne.n	8002f38 <__sflush_r+0x7c>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b903      	cbnz	r3, 8002f3a <__sflush_r+0x7e>
 8002f38:	6560      	str	r0, [r4, #84]	; 0x54
 8002f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f3c:	602f      	str	r7, [r5, #0]
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d0c9      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f46:	4299      	cmp	r1, r3
 8002f48:	d002      	beq.n	8002f50 <__sflush_r+0x94>
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f000 f994 	bl	8003278 <_free_r>
 8002f50:	2000      	movs	r0, #0
 8002f52:	6360      	str	r0, [r4, #52]	; 0x34
 8002f54:	e7c0      	b.n	8002ed8 <__sflush_r+0x1c>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b0      	blx	r6
 8002f5c:	1c41      	adds	r1, r0, #1
 8002f5e:	d1c8      	bne.n	8002ef2 <__sflush_r+0x36>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0c5      	beq.n	8002ef2 <__sflush_r+0x36>
 8002f66:	2b1d      	cmp	r3, #29
 8002f68:	d001      	beq.n	8002f6e <__sflush_r+0xb2>
 8002f6a:	2b16      	cmp	r3, #22
 8002f6c:	d101      	bne.n	8002f72 <__sflush_r+0xb6>
 8002f6e:	602f      	str	r7, [r5, #0]
 8002f70:	e7b1      	b.n	8002ed6 <__sflush_r+0x1a>
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e7ad      	b.n	8002ed8 <__sflush_r+0x1c>
 8002f7c:	690f      	ldr	r7, [r1, #16]
 8002f7e:	2f00      	cmp	r7, #0
 8002f80:	d0a9      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002f82:	0793      	lsls	r3, r2, #30
 8002f84:	680e      	ldr	r6, [r1, #0]
 8002f86:	bf08      	it	eq
 8002f88:	694b      	ldreq	r3, [r1, #20]
 8002f8a:	600f      	str	r7, [r1, #0]
 8002f8c:	bf18      	it	ne
 8002f8e:	2300      	movne	r3, #0
 8002f90:	eba6 0807 	sub.w	r8, r6, r7
 8002f94:	608b      	str	r3, [r1, #8]
 8002f96:	f1b8 0f00 	cmp.w	r8, #0
 8002f9a:	dd9c      	ble.n	8002ed6 <__sflush_r+0x1a>
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	463a      	mov	r2, r7
 8002fa0:	6a21      	ldr	r1, [r4, #32]
 8002fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b0      	blx	r6
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	dc06      	bgt.n	8002fba <__sflush_r+0xfe>
 8002fac:	89a3      	ldrh	r3, [r4, #12]
 8002fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e78e      	b.n	8002ed8 <__sflush_r+0x1c>
 8002fba:	4407      	add	r7, r0
 8002fbc:	eba8 0800 	sub.w	r8, r8, r0
 8002fc0:	e7e9      	b.n	8002f96 <__sflush_r+0xda>
 8002fc2:	bf00      	nop
 8002fc4:	20400001 	.word	0x20400001

08002fc8 <_fflush_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	4605      	mov	r5, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	b1db      	cbz	r3, 800300a <_fflush_r+0x42>
 8002fd2:	b118      	cbz	r0, 8002fdc <_fflush_r+0x14>
 8002fd4:	6983      	ldr	r3, [r0, #24]
 8002fd6:	b90b      	cbnz	r3, 8002fdc <_fflush_r+0x14>
 8002fd8:	f000 f860 	bl	800309c <__sinit>
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <_fflush_r+0x48>)
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	d109      	bne.n	8002ff6 <_fflush_r+0x2e>
 8002fe2:	686c      	ldr	r4, [r5, #4]
 8002fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe8:	b17b      	cbz	r3, 800300a <_fflush_r+0x42>
 8002fea:	4621      	mov	r1, r4
 8002fec:	4628      	mov	r0, r5
 8002fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff2:	f7ff bf63 	b.w	8002ebc <__sflush_r>
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_fflush_r+0x4c>)
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	d101      	bne.n	8003000 <_fflush_r+0x38>
 8002ffc:	68ac      	ldr	r4, [r5, #8]
 8002ffe:	e7f1      	b.n	8002fe4 <_fflush_r+0x1c>
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <_fflush_r+0x50>)
 8003002:	429c      	cmp	r4, r3
 8003004:	bf08      	it	eq
 8003006:	68ec      	ldreq	r4, [r5, #12]
 8003008:	e7ec      	b.n	8002fe4 <_fflush_r+0x1c>
 800300a:	2000      	movs	r0, #0
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	08003be8 	.word	0x08003be8
 8003014:	08003c08 	.word	0x08003c08
 8003018:	08003bc8 	.word	0x08003bc8

0800301c <std>:
 800301c:	2300      	movs	r3, #0
 800301e:	b510      	push	{r4, lr}
 8003020:	4604      	mov	r4, r0
 8003022:	e9c0 3300 	strd	r3, r3, [r0]
 8003026:	6083      	str	r3, [r0, #8]
 8003028:	8181      	strh	r1, [r0, #12]
 800302a:	6643      	str	r3, [r0, #100]	; 0x64
 800302c:	81c2      	strh	r2, [r0, #14]
 800302e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003032:	6183      	str	r3, [r0, #24]
 8003034:	4619      	mov	r1, r3
 8003036:	2208      	movs	r2, #8
 8003038:	305c      	adds	r0, #92	; 0x5c
 800303a:	f7ff fde7 	bl	8002c0c <memset>
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <std+0x38>)
 8003040:	6263      	str	r3, [r4, #36]	; 0x24
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <std+0x3c>)
 8003044:	62a3      	str	r3, [r4, #40]	; 0x28
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <std+0x40>)
 8003048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <std+0x44>)
 800304c:	6224      	str	r4, [r4, #32]
 800304e:	6323      	str	r3, [r4, #48]	; 0x30
 8003050:	bd10      	pop	{r4, pc}
 8003052:	bf00      	nop
 8003054:	080039e5 	.word	0x080039e5
 8003058:	08003a07 	.word	0x08003a07
 800305c:	08003a3f 	.word	0x08003a3f
 8003060:	08003a63 	.word	0x08003a63

08003064 <_cleanup_r>:
 8003064:	4901      	ldr	r1, [pc, #4]	; (800306c <_cleanup_r+0x8>)
 8003066:	f000 b885 	b.w	8003174 <_fwalk_reent>
 800306a:	bf00      	nop
 800306c:	08002fc9 	.word	0x08002fc9

08003070 <__sfmoreglue>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	1e4a      	subs	r2, r1, #1
 8003074:	2568      	movs	r5, #104	; 0x68
 8003076:	4355      	muls	r5, r2
 8003078:	460e      	mov	r6, r1
 800307a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800307e:	f000 f949 	bl	8003314 <_malloc_r>
 8003082:	4604      	mov	r4, r0
 8003084:	b140      	cbz	r0, 8003098 <__sfmoreglue+0x28>
 8003086:	2100      	movs	r1, #0
 8003088:	e9c0 1600 	strd	r1, r6, [r0]
 800308c:	300c      	adds	r0, #12
 800308e:	60a0      	str	r0, [r4, #8]
 8003090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003094:	f7ff fdba 	bl	8002c0c <memset>
 8003098:	4620      	mov	r0, r4
 800309a:	bd70      	pop	{r4, r5, r6, pc}

0800309c <__sinit>:
 800309c:	6983      	ldr	r3, [r0, #24]
 800309e:	b510      	push	{r4, lr}
 80030a0:	4604      	mov	r4, r0
 80030a2:	bb33      	cbnz	r3, 80030f2 <__sinit+0x56>
 80030a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80030a8:	6503      	str	r3, [r0, #80]	; 0x50
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <__sinit+0x58>)
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <__sinit+0x5c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6282      	str	r2, [r0, #40]	; 0x28
 80030b2:	4298      	cmp	r0, r3
 80030b4:	bf04      	itt	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	6183      	streq	r3, [r0, #24]
 80030ba:	f000 f81f 	bl	80030fc <__sfp>
 80030be:	6060      	str	r0, [r4, #4]
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 f81b 	bl	80030fc <__sfp>
 80030c6:	60a0      	str	r0, [r4, #8]
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 f817 	bl	80030fc <__sfp>
 80030ce:	2200      	movs	r2, #0
 80030d0:	60e0      	str	r0, [r4, #12]
 80030d2:	2104      	movs	r1, #4
 80030d4:	6860      	ldr	r0, [r4, #4]
 80030d6:	f7ff ffa1 	bl	800301c <std>
 80030da:	2201      	movs	r2, #1
 80030dc:	2109      	movs	r1, #9
 80030de:	68a0      	ldr	r0, [r4, #8]
 80030e0:	f7ff ff9c 	bl	800301c <std>
 80030e4:	2202      	movs	r2, #2
 80030e6:	2112      	movs	r1, #18
 80030e8:	68e0      	ldr	r0, [r4, #12]
 80030ea:	f7ff ff97 	bl	800301c <std>
 80030ee:	2301      	movs	r3, #1
 80030f0:	61a3      	str	r3, [r4, #24]
 80030f2:	bd10      	pop	{r4, pc}
 80030f4:	08003bc4 	.word	0x08003bc4
 80030f8:	08003065 	.word	0x08003065

080030fc <__sfp>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <__sfp+0x70>)
 8003100:	681e      	ldr	r6, [r3, #0]
 8003102:	69b3      	ldr	r3, [r6, #24]
 8003104:	4607      	mov	r7, r0
 8003106:	b913      	cbnz	r3, 800310e <__sfp+0x12>
 8003108:	4630      	mov	r0, r6
 800310a:	f7ff ffc7 	bl	800309c <__sinit>
 800310e:	3648      	adds	r6, #72	; 0x48
 8003110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003114:	3b01      	subs	r3, #1
 8003116:	d503      	bpl.n	8003120 <__sfp+0x24>
 8003118:	6833      	ldr	r3, [r6, #0]
 800311a:	b133      	cbz	r3, 800312a <__sfp+0x2e>
 800311c:	6836      	ldr	r6, [r6, #0]
 800311e:	e7f7      	b.n	8003110 <__sfp+0x14>
 8003120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003124:	b16d      	cbz	r5, 8003142 <__sfp+0x46>
 8003126:	3468      	adds	r4, #104	; 0x68
 8003128:	e7f4      	b.n	8003114 <__sfp+0x18>
 800312a:	2104      	movs	r1, #4
 800312c:	4638      	mov	r0, r7
 800312e:	f7ff ff9f 	bl	8003070 <__sfmoreglue>
 8003132:	6030      	str	r0, [r6, #0]
 8003134:	2800      	cmp	r0, #0
 8003136:	d1f1      	bne.n	800311c <__sfp+0x20>
 8003138:	230c      	movs	r3, #12
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4604      	mov	r4, r0
 800313e:	4620      	mov	r0, r4
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <__sfp+0x74>)
 8003144:	6665      	str	r5, [r4, #100]	; 0x64
 8003146:	e9c4 5500 	strd	r5, r5, [r4]
 800314a:	60a5      	str	r5, [r4, #8]
 800314c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003150:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003154:	2208      	movs	r2, #8
 8003156:	4629      	mov	r1, r5
 8003158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800315c:	f7ff fd56 	bl	8002c0c <memset>
 8003160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003168:	e7e9      	b.n	800313e <__sfp+0x42>
 800316a:	bf00      	nop
 800316c:	08003bc4 	.word	0x08003bc4
 8003170:	ffff0001 	.word	0xffff0001

08003174 <_fwalk_reent>:
 8003174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003178:	4680      	mov	r8, r0
 800317a:	4689      	mov	r9, r1
 800317c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003180:	2600      	movs	r6, #0
 8003182:	b914      	cbnz	r4, 800318a <_fwalk_reent+0x16>
 8003184:	4630      	mov	r0, r6
 8003186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800318a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800318e:	3f01      	subs	r7, #1
 8003190:	d501      	bpl.n	8003196 <_fwalk_reent+0x22>
 8003192:	6824      	ldr	r4, [r4, #0]
 8003194:	e7f5      	b.n	8003182 <_fwalk_reent+0xe>
 8003196:	89ab      	ldrh	r3, [r5, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d907      	bls.n	80031ac <_fwalk_reent+0x38>
 800319c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a0:	3301      	adds	r3, #1
 80031a2:	d003      	beq.n	80031ac <_fwalk_reent+0x38>
 80031a4:	4629      	mov	r1, r5
 80031a6:	4640      	mov	r0, r8
 80031a8:	47c8      	blx	r9
 80031aa:	4306      	orrs	r6, r0
 80031ac:	3568      	adds	r5, #104	; 0x68
 80031ae:	e7ee      	b.n	800318e <_fwalk_reent+0x1a>

080031b0 <__swhatbuf_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	460e      	mov	r6, r1
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	2900      	cmp	r1, #0
 80031ba:	b096      	sub	sp, #88	; 0x58
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	da07      	bge.n	80031d2 <__swhatbuf_r+0x22>
 80031c2:	2300      	movs	r3, #0
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	89b3      	ldrh	r3, [r6, #12]
 80031c8:	061a      	lsls	r2, r3, #24
 80031ca:	d410      	bmi.n	80031ee <__swhatbuf_r+0x3e>
 80031cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d0:	e00e      	b.n	80031f0 <__swhatbuf_r+0x40>
 80031d2:	466a      	mov	r2, sp
 80031d4:	f000 fc6c 	bl	8003ab0 <_fstat_r>
 80031d8:	2800      	cmp	r0, #0
 80031da:	dbf2      	blt.n	80031c2 <__swhatbuf_r+0x12>
 80031dc:	9a01      	ldr	r2, [sp, #4]
 80031de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031e6:	425a      	negs	r2, r3
 80031e8:	415a      	adcs	r2, r3
 80031ea:	602a      	str	r2, [r5, #0]
 80031ec:	e7ee      	b.n	80031cc <__swhatbuf_r+0x1c>
 80031ee:	2340      	movs	r3, #64	; 0x40
 80031f0:	2000      	movs	r0, #0
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	b016      	add	sp, #88	; 0x58
 80031f6:	bd70      	pop	{r4, r5, r6, pc}

080031f8 <__smakebuf_r>:
 80031f8:	898b      	ldrh	r3, [r1, #12]
 80031fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031fc:	079d      	lsls	r5, r3, #30
 80031fe:	4606      	mov	r6, r0
 8003200:	460c      	mov	r4, r1
 8003202:	d507      	bpl.n	8003214 <__smakebuf_r+0x1c>
 8003204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	6123      	str	r3, [r4, #16]
 800320c:	2301      	movs	r3, #1
 800320e:	6163      	str	r3, [r4, #20]
 8003210:	b002      	add	sp, #8
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	ab01      	add	r3, sp, #4
 8003216:	466a      	mov	r2, sp
 8003218:	f7ff ffca 	bl	80031b0 <__swhatbuf_r>
 800321c:	9900      	ldr	r1, [sp, #0]
 800321e:	4605      	mov	r5, r0
 8003220:	4630      	mov	r0, r6
 8003222:	f000 f877 	bl	8003314 <_malloc_r>
 8003226:	b948      	cbnz	r0, 800323c <__smakebuf_r+0x44>
 8003228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800322c:	059a      	lsls	r2, r3, #22
 800322e:	d4ef      	bmi.n	8003210 <__smakebuf_r+0x18>
 8003230:	f023 0303 	bic.w	r3, r3, #3
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	e7e3      	b.n	8003204 <__smakebuf_r+0xc>
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <__smakebuf_r+0x7c>)
 800323e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	6020      	str	r0, [r4, #0]
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	9b00      	ldr	r3, [sp, #0]
 800324c:	6163      	str	r3, [r4, #20]
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	6120      	str	r0, [r4, #16]
 8003252:	b15b      	cbz	r3, 800326c <__smakebuf_r+0x74>
 8003254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003258:	4630      	mov	r0, r6
 800325a:	f000 fc3b 	bl	8003ad4 <_isatty_r>
 800325e:	b128      	cbz	r0, 800326c <__smakebuf_r+0x74>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	431d      	orrs	r5, r3
 8003270:	81a5      	strh	r5, [r4, #12]
 8003272:	e7cd      	b.n	8003210 <__smakebuf_r+0x18>
 8003274:	08003065 	.word	0x08003065

08003278 <_free_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4605      	mov	r5, r0
 800327c:	2900      	cmp	r1, #0
 800327e:	d045      	beq.n	800330c <_free_r+0x94>
 8003280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003284:	1f0c      	subs	r4, r1, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfb8      	it	lt
 800328a:	18e4      	addlt	r4, r4, r3
 800328c:	f000 fc44 	bl	8003b18 <__malloc_lock>
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <_free_r+0x98>)
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	4610      	mov	r0, r2
 8003296:	b933      	cbnz	r3, 80032a6 <_free_r+0x2e>
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	6014      	str	r4, [r2, #0]
 800329c:	4628      	mov	r0, r5
 800329e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032a2:	f000 bc3a 	b.w	8003b1a <__malloc_unlock>
 80032a6:	42a3      	cmp	r3, r4
 80032a8:	d90c      	bls.n	80032c4 <_free_r+0x4c>
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	1862      	adds	r2, r4, r1
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bf04      	itt	eq
 80032b2:	681a      	ldreq	r2, [r3, #0]
 80032b4:	685b      	ldreq	r3, [r3, #4]
 80032b6:	6063      	str	r3, [r4, #4]
 80032b8:	bf04      	itt	eq
 80032ba:	1852      	addeq	r2, r2, r1
 80032bc:	6022      	streq	r2, [r4, #0]
 80032be:	6004      	str	r4, [r0, #0]
 80032c0:	e7ec      	b.n	800329c <_free_r+0x24>
 80032c2:	4613      	mov	r3, r2
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	b10a      	cbz	r2, 80032cc <_free_r+0x54>
 80032c8:	42a2      	cmp	r2, r4
 80032ca:	d9fa      	bls.n	80032c2 <_free_r+0x4a>
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	1858      	adds	r0, r3, r1
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d10b      	bne.n	80032ec <_free_r+0x74>
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	4401      	add	r1, r0
 80032d8:	1858      	adds	r0, r3, r1
 80032da:	4282      	cmp	r2, r0
 80032dc:	6019      	str	r1, [r3, #0]
 80032de:	d1dd      	bne.n	800329c <_free_r+0x24>
 80032e0:	6810      	ldr	r0, [r2, #0]
 80032e2:	6852      	ldr	r2, [r2, #4]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	4401      	add	r1, r0
 80032e8:	6019      	str	r1, [r3, #0]
 80032ea:	e7d7      	b.n	800329c <_free_r+0x24>
 80032ec:	d902      	bls.n	80032f4 <_free_r+0x7c>
 80032ee:	230c      	movs	r3, #12
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	e7d3      	b.n	800329c <_free_r+0x24>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	1821      	adds	r1, r4, r0
 80032f8:	428a      	cmp	r2, r1
 80032fa:	bf04      	itt	eq
 80032fc:	6811      	ldreq	r1, [r2, #0]
 80032fe:	6852      	ldreq	r2, [r2, #4]
 8003300:	6062      	str	r2, [r4, #4]
 8003302:	bf04      	itt	eq
 8003304:	1809      	addeq	r1, r1, r0
 8003306:	6021      	streq	r1, [r4, #0]
 8003308:	605c      	str	r4, [r3, #4]
 800330a:	e7c7      	b.n	800329c <_free_r+0x24>
 800330c:	bd38      	pop	{r3, r4, r5, pc}
 800330e:	bf00      	nop
 8003310:	20001134 	.word	0x20001134

08003314 <_malloc_r>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	1ccd      	adds	r5, r1, #3
 8003318:	f025 0503 	bic.w	r5, r5, #3
 800331c:	3508      	adds	r5, #8
 800331e:	2d0c      	cmp	r5, #12
 8003320:	bf38      	it	cc
 8003322:	250c      	movcc	r5, #12
 8003324:	2d00      	cmp	r5, #0
 8003326:	4606      	mov	r6, r0
 8003328:	db01      	blt.n	800332e <_malloc_r+0x1a>
 800332a:	42a9      	cmp	r1, r5
 800332c:	d903      	bls.n	8003336 <_malloc_r+0x22>
 800332e:	230c      	movs	r3, #12
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	2000      	movs	r0, #0
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	f000 fbef 	bl	8003b18 <__malloc_lock>
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <_malloc_r+0xac>)
 800333c:	6814      	ldr	r4, [r2, #0]
 800333e:	4621      	mov	r1, r4
 8003340:	b991      	cbnz	r1, 8003368 <_malloc_r+0x54>
 8003342:	4c20      	ldr	r4, [pc, #128]	; (80033c4 <_malloc_r+0xb0>)
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	b91b      	cbnz	r3, 8003350 <_malloc_r+0x3c>
 8003348:	4630      	mov	r0, r6
 800334a:	f000 fb3b 	bl	80039c4 <_sbrk_r>
 800334e:	6020      	str	r0, [r4, #0]
 8003350:	4629      	mov	r1, r5
 8003352:	4630      	mov	r0, r6
 8003354:	f000 fb36 	bl	80039c4 <_sbrk_r>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d124      	bne.n	80033a6 <_malloc_r+0x92>
 800335c:	230c      	movs	r3, #12
 800335e:	6033      	str	r3, [r6, #0]
 8003360:	4630      	mov	r0, r6
 8003362:	f000 fbda 	bl	8003b1a <__malloc_unlock>
 8003366:	e7e4      	b.n	8003332 <_malloc_r+0x1e>
 8003368:	680b      	ldr	r3, [r1, #0]
 800336a:	1b5b      	subs	r3, r3, r5
 800336c:	d418      	bmi.n	80033a0 <_malloc_r+0x8c>
 800336e:	2b0b      	cmp	r3, #11
 8003370:	d90f      	bls.n	8003392 <_malloc_r+0x7e>
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	50cd      	str	r5, [r1, r3]
 8003376:	18cc      	adds	r4, r1, r3
 8003378:	4630      	mov	r0, r6
 800337a:	f000 fbce 	bl	8003b1a <__malloc_unlock>
 800337e:	f104 000b 	add.w	r0, r4, #11
 8003382:	1d23      	adds	r3, r4, #4
 8003384:	f020 0007 	bic.w	r0, r0, #7
 8003388:	1ac3      	subs	r3, r0, r3
 800338a:	d0d3      	beq.n	8003334 <_malloc_r+0x20>
 800338c:	425a      	negs	r2, r3
 800338e:	50e2      	str	r2, [r4, r3]
 8003390:	e7d0      	b.n	8003334 <_malloc_r+0x20>
 8003392:	428c      	cmp	r4, r1
 8003394:	684b      	ldr	r3, [r1, #4]
 8003396:	bf16      	itet	ne
 8003398:	6063      	strne	r3, [r4, #4]
 800339a:	6013      	streq	r3, [r2, #0]
 800339c:	460c      	movne	r4, r1
 800339e:	e7eb      	b.n	8003378 <_malloc_r+0x64>
 80033a0:	460c      	mov	r4, r1
 80033a2:	6849      	ldr	r1, [r1, #4]
 80033a4:	e7cc      	b.n	8003340 <_malloc_r+0x2c>
 80033a6:	1cc4      	adds	r4, r0, #3
 80033a8:	f024 0403 	bic.w	r4, r4, #3
 80033ac:	42a0      	cmp	r0, r4
 80033ae:	d005      	beq.n	80033bc <_malloc_r+0xa8>
 80033b0:	1a21      	subs	r1, r4, r0
 80033b2:	4630      	mov	r0, r6
 80033b4:	f000 fb06 	bl	80039c4 <_sbrk_r>
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0cf      	beq.n	800335c <_malloc_r+0x48>
 80033bc:	6025      	str	r5, [r4, #0]
 80033be:	e7db      	b.n	8003378 <_malloc_r+0x64>
 80033c0:	20001134 	.word	0x20001134
 80033c4:	20001138 	.word	0x20001138

080033c8 <__sfputc_r>:
 80033c8:	6893      	ldr	r3, [r2, #8]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	b410      	push	{r4}
 80033d0:	6093      	str	r3, [r2, #8]
 80033d2:	da08      	bge.n	80033e6 <__sfputc_r+0x1e>
 80033d4:	6994      	ldr	r4, [r2, #24]
 80033d6:	42a3      	cmp	r3, r4
 80033d8:	db01      	blt.n	80033de <__sfputc_r+0x16>
 80033da:	290a      	cmp	r1, #10
 80033dc:	d103      	bne.n	80033e6 <__sfputc_r+0x1e>
 80033de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033e2:	f7ff bcab 	b.w	8002d3c <__swbuf_r>
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	1c58      	adds	r0, r3, #1
 80033ea:	6010      	str	r0, [r2, #0]
 80033ec:	7019      	strb	r1, [r3, #0]
 80033ee:	4608      	mov	r0, r1
 80033f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <__sfputs_r>:
 80033f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f8:	4606      	mov	r6, r0
 80033fa:	460f      	mov	r7, r1
 80033fc:	4614      	mov	r4, r2
 80033fe:	18d5      	adds	r5, r2, r3
 8003400:	42ac      	cmp	r4, r5
 8003402:	d101      	bne.n	8003408 <__sfputs_r+0x12>
 8003404:	2000      	movs	r0, #0
 8003406:	e007      	b.n	8003418 <__sfputs_r+0x22>
 8003408:	463a      	mov	r2, r7
 800340a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340e:	4630      	mov	r0, r6
 8003410:	f7ff ffda 	bl	80033c8 <__sfputc_r>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d1f3      	bne.n	8003400 <__sfputs_r+0xa>
 8003418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800341c <_vfiprintf_r>:
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	460c      	mov	r4, r1
 8003422:	b09d      	sub	sp, #116	; 0x74
 8003424:	4617      	mov	r7, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4606      	mov	r6, r0
 800342a:	b118      	cbz	r0, 8003434 <_vfiprintf_r+0x18>
 800342c:	6983      	ldr	r3, [r0, #24]
 800342e:	b90b      	cbnz	r3, 8003434 <_vfiprintf_r+0x18>
 8003430:	f7ff fe34 	bl	800309c <__sinit>
 8003434:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <_vfiprintf_r+0x20c>)
 8003436:	429c      	cmp	r4, r3
 8003438:	d158      	bne.n	80034ec <_vfiprintf_r+0xd0>
 800343a:	6874      	ldr	r4, [r6, #4]
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	0718      	lsls	r0, r3, #28
 8003440:	d55e      	bpl.n	8003500 <_vfiprintf_r+0xe4>
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <_vfiprintf_r+0xe4>
 8003448:	2300      	movs	r3, #0
 800344a:	9309      	str	r3, [sp, #36]	; 0x24
 800344c:	2320      	movs	r3, #32
 800344e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003452:	2330      	movs	r3, #48	; 0x30
 8003454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003458:	9503      	str	r5, [sp, #12]
 800345a:	f04f 0b01 	mov.w	fp, #1
 800345e:	46b8      	mov	r8, r7
 8003460:	4645      	mov	r5, r8
 8003462:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003466:	b10b      	cbz	r3, 800346c <_vfiprintf_r+0x50>
 8003468:	2b25      	cmp	r3, #37	; 0x25
 800346a:	d154      	bne.n	8003516 <_vfiprintf_r+0xfa>
 800346c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003470:	d00b      	beq.n	800348a <_vfiprintf_r+0x6e>
 8003472:	4653      	mov	r3, sl
 8003474:	463a      	mov	r2, r7
 8003476:	4621      	mov	r1, r4
 8003478:	4630      	mov	r0, r6
 800347a:	f7ff ffbc 	bl	80033f6 <__sfputs_r>
 800347e:	3001      	adds	r0, #1
 8003480:	f000 80c2 	beq.w	8003608 <_vfiprintf_r+0x1ec>
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	4453      	add	r3, sl
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	f898 3000 	ldrb.w	r3, [r8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80ba 	beq.w	8003608 <_vfiprintf_r+0x1ec>
 8003494:	2300      	movs	r3, #0
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	9307      	str	r3, [sp, #28]
 80034a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a6:	931a      	str	r3, [sp, #104]	; 0x68
 80034a8:	46a8      	mov	r8, r5
 80034aa:	2205      	movs	r2, #5
 80034ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80034b0:	485e      	ldr	r0, [pc, #376]	; (800362c <_vfiprintf_r+0x210>)
 80034b2:	f7fc fe9d 	bl	80001f0 <memchr>
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	bb78      	cbnz	r0, 800351a <_vfiprintf_r+0xfe>
 80034ba:	06d9      	lsls	r1, r3, #27
 80034bc:	bf44      	itt	mi
 80034be:	2220      	movmi	r2, #32
 80034c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034c4:	071a      	lsls	r2, r3, #28
 80034c6:	bf44      	itt	mi
 80034c8:	222b      	movmi	r2, #43	; 0x2b
 80034ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034ce:	782a      	ldrb	r2, [r5, #0]
 80034d0:	2a2a      	cmp	r2, #42	; 0x2a
 80034d2:	d02a      	beq.n	800352a <_vfiprintf_r+0x10e>
 80034d4:	9a07      	ldr	r2, [sp, #28]
 80034d6:	46a8      	mov	r8, r5
 80034d8:	2000      	movs	r0, #0
 80034da:	250a      	movs	r5, #10
 80034dc:	4641      	mov	r1, r8
 80034de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e2:	3b30      	subs	r3, #48	; 0x30
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d969      	bls.n	80035bc <_vfiprintf_r+0x1a0>
 80034e8:	b360      	cbz	r0, 8003544 <_vfiprintf_r+0x128>
 80034ea:	e024      	b.n	8003536 <_vfiprintf_r+0x11a>
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <_vfiprintf_r+0x214>)
 80034ee:	429c      	cmp	r4, r3
 80034f0:	d101      	bne.n	80034f6 <_vfiprintf_r+0xda>
 80034f2:	68b4      	ldr	r4, [r6, #8]
 80034f4:	e7a2      	b.n	800343c <_vfiprintf_r+0x20>
 80034f6:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <_vfiprintf_r+0x218>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	bf08      	it	eq
 80034fc:	68f4      	ldreq	r4, [r6, #12]
 80034fe:	e79d      	b.n	800343c <_vfiprintf_r+0x20>
 8003500:	4621      	mov	r1, r4
 8003502:	4630      	mov	r0, r6
 8003504:	f7ff fc6c 	bl	8002de0 <__swsetup_r>
 8003508:	2800      	cmp	r0, #0
 800350a:	d09d      	beq.n	8003448 <_vfiprintf_r+0x2c>
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	b01d      	add	sp, #116	; 0x74
 8003512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003516:	46a8      	mov	r8, r5
 8003518:	e7a2      	b.n	8003460 <_vfiprintf_r+0x44>
 800351a:	4a44      	ldr	r2, [pc, #272]	; (800362c <_vfiprintf_r+0x210>)
 800351c:	1a80      	subs	r0, r0, r2
 800351e:	fa0b f000 	lsl.w	r0, fp, r0
 8003522:	4318      	orrs	r0, r3
 8003524:	9004      	str	r0, [sp, #16]
 8003526:	4645      	mov	r5, r8
 8003528:	e7be      	b.n	80034a8 <_vfiprintf_r+0x8c>
 800352a:	9a03      	ldr	r2, [sp, #12]
 800352c:	1d11      	adds	r1, r2, #4
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	9103      	str	r1, [sp, #12]
 8003532:	2a00      	cmp	r2, #0
 8003534:	db01      	blt.n	800353a <_vfiprintf_r+0x11e>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e004      	b.n	8003544 <_vfiprintf_r+0x128>
 800353a:	4252      	negs	r2, r2
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	9207      	str	r2, [sp, #28]
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	f898 3000 	ldrb.w	r3, [r8]
 8003548:	2b2e      	cmp	r3, #46	; 0x2e
 800354a:	d10e      	bne.n	800356a <_vfiprintf_r+0x14e>
 800354c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003550:	2b2a      	cmp	r3, #42	; 0x2a
 8003552:	d138      	bne.n	80035c6 <_vfiprintf_r+0x1aa>
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	9203      	str	r2, [sp, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	bfb8      	it	lt
 8003560:	f04f 33ff 	movlt.w	r3, #4294967295
 8003564:	f108 0802 	add.w	r8, r8, #2
 8003568:	9305      	str	r3, [sp, #20]
 800356a:	4d33      	ldr	r5, [pc, #204]	; (8003638 <_vfiprintf_r+0x21c>)
 800356c:	f898 1000 	ldrb.w	r1, [r8]
 8003570:	2203      	movs	r2, #3
 8003572:	4628      	mov	r0, r5
 8003574:	f7fc fe3c 	bl	80001f0 <memchr>
 8003578:	b140      	cbz	r0, 800358c <_vfiprintf_r+0x170>
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	1b40      	subs	r0, r0, r5
 800357e:	fa03 f000 	lsl.w	r0, r3, r0
 8003582:	9b04      	ldr	r3, [sp, #16]
 8003584:	4303      	orrs	r3, r0
 8003586:	f108 0801 	add.w	r8, r8, #1
 800358a:	9304      	str	r3, [sp, #16]
 800358c:	f898 1000 	ldrb.w	r1, [r8]
 8003590:	482a      	ldr	r0, [pc, #168]	; (800363c <_vfiprintf_r+0x220>)
 8003592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003596:	2206      	movs	r2, #6
 8003598:	f108 0701 	add.w	r7, r8, #1
 800359c:	f7fc fe28 	bl	80001f0 <memchr>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d037      	beq.n	8003614 <_vfiprintf_r+0x1f8>
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <_vfiprintf_r+0x224>)
 80035a6:	bb1b      	cbnz	r3, 80035f0 <_vfiprintf_r+0x1d4>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	3307      	adds	r3, #7
 80035ac:	f023 0307 	bic.w	r3, r3, #7
 80035b0:	3308      	adds	r3, #8
 80035b2:	9303      	str	r3, [sp, #12]
 80035b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b6:	444b      	add	r3, r9
 80035b8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ba:	e750      	b.n	800345e <_vfiprintf_r+0x42>
 80035bc:	fb05 3202 	mla	r2, r5, r2, r3
 80035c0:	2001      	movs	r0, #1
 80035c2:	4688      	mov	r8, r1
 80035c4:	e78a      	b.n	80034dc <_vfiprintf_r+0xc0>
 80035c6:	2300      	movs	r3, #0
 80035c8:	f108 0801 	add.w	r8, r8, #1
 80035cc:	9305      	str	r3, [sp, #20]
 80035ce:	4619      	mov	r1, r3
 80035d0:	250a      	movs	r5, #10
 80035d2:	4640      	mov	r0, r8
 80035d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035d8:	3a30      	subs	r2, #48	; 0x30
 80035da:	2a09      	cmp	r2, #9
 80035dc:	d903      	bls.n	80035e6 <_vfiprintf_r+0x1ca>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0c3      	beq.n	800356a <_vfiprintf_r+0x14e>
 80035e2:	9105      	str	r1, [sp, #20]
 80035e4:	e7c1      	b.n	800356a <_vfiprintf_r+0x14e>
 80035e6:	fb05 2101 	mla	r1, r5, r1, r2
 80035ea:	2301      	movs	r3, #1
 80035ec:	4680      	mov	r8, r0
 80035ee:	e7f0      	b.n	80035d2 <_vfiprintf_r+0x1b6>
 80035f0:	ab03      	add	r3, sp, #12
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4622      	mov	r2, r4
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <_vfiprintf_r+0x228>)
 80035f8:	a904      	add	r1, sp, #16
 80035fa:	4630      	mov	r0, r6
 80035fc:	f3af 8000 	nop.w
 8003600:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003604:	4681      	mov	r9, r0
 8003606:	d1d5      	bne.n	80035b4 <_vfiprintf_r+0x198>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	065b      	lsls	r3, r3, #25
 800360c:	f53f af7e 	bmi.w	800350c <_vfiprintf_r+0xf0>
 8003610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003612:	e77d      	b.n	8003510 <_vfiprintf_r+0xf4>
 8003614:	ab03      	add	r3, sp, #12
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4622      	mov	r2, r4
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <_vfiprintf_r+0x228>)
 800361c:	a904      	add	r1, sp, #16
 800361e:	4630      	mov	r0, r6
 8003620:	f000 f888 	bl	8003734 <_printf_i>
 8003624:	e7ec      	b.n	8003600 <_vfiprintf_r+0x1e4>
 8003626:	bf00      	nop
 8003628:	08003be8 	.word	0x08003be8
 800362c:	08003c28 	.word	0x08003c28
 8003630:	08003c08 	.word	0x08003c08
 8003634:	08003bc8 	.word	0x08003bc8
 8003638:	08003c2e 	.word	0x08003c2e
 800363c:	08003c32 	.word	0x08003c32
 8003640:	00000000 	.word	0x00000000
 8003644:	080033f7 	.word	0x080033f7

08003648 <_printf_common>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	4691      	mov	r9, r2
 800364e:	461f      	mov	r7, r3
 8003650:	688a      	ldr	r2, [r1, #8]
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003658:	4293      	cmp	r3, r2
 800365a:	bfb8      	it	lt
 800365c:	4613      	movlt	r3, r2
 800365e:	f8c9 3000 	str.w	r3, [r9]
 8003662:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003666:	4606      	mov	r6, r0
 8003668:	460c      	mov	r4, r1
 800366a:	b112      	cbz	r2, 8003672 <_printf_common+0x2a>
 800366c:	3301      	adds	r3, #1
 800366e:	f8c9 3000 	str.w	r3, [r9]
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	0699      	lsls	r1, r3, #26
 8003676:	bf42      	ittt	mi
 8003678:	f8d9 3000 	ldrmi.w	r3, [r9]
 800367c:	3302      	addmi	r3, #2
 800367e:	f8c9 3000 	strmi.w	r3, [r9]
 8003682:	6825      	ldr	r5, [r4, #0]
 8003684:	f015 0506 	ands.w	r5, r5, #6
 8003688:	d107      	bne.n	800369a <_printf_common+0x52>
 800368a:	f104 0a19 	add.w	sl, r4, #25
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	f8d9 2000 	ldr.w	r2, [r9]
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	42ab      	cmp	r3, r5
 8003698:	dc28      	bgt.n	80036ec <_printf_common+0xa4>
 800369a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	3300      	adds	r3, #0
 80036a2:	bf18      	it	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	0692      	lsls	r2, r2, #26
 80036a8:	d42d      	bmi.n	8003706 <_printf_common+0xbe>
 80036aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ae:	4639      	mov	r1, r7
 80036b0:	4630      	mov	r0, r6
 80036b2:	47c0      	blx	r8
 80036b4:	3001      	adds	r0, #1
 80036b6:	d020      	beq.n	80036fa <_printf_common+0xb2>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	68e5      	ldr	r5, [r4, #12]
 80036bc:	f8d9 2000 	ldr.w	r2, [r9]
 80036c0:	f003 0306 	and.w	r3, r3, #6
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	bf08      	it	eq
 80036c8:	1aad      	subeq	r5, r5, r2
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	bf0c      	ite	eq
 80036d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d4:	2500      	movne	r5, #0
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bfc4      	itt	gt
 80036da:	1a9b      	subgt	r3, r3, r2
 80036dc:	18ed      	addgt	r5, r5, r3
 80036de:	f04f 0900 	mov.w	r9, #0
 80036e2:	341a      	adds	r4, #26
 80036e4:	454d      	cmp	r5, r9
 80036e6:	d11a      	bne.n	800371e <_printf_common+0xd6>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e008      	b.n	80036fe <_printf_common+0xb6>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4652      	mov	r2, sl
 80036f0:	4639      	mov	r1, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d103      	bne.n	8003702 <_printf_common+0xba>
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003702:	3501      	adds	r5, #1
 8003704:	e7c3      	b.n	800368e <_printf_common+0x46>
 8003706:	18e1      	adds	r1, r4, r3
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	2030      	movs	r0, #48	; 0x30
 800370c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003710:	4422      	add	r2, r4
 8003712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371a:	3302      	adds	r3, #2
 800371c:	e7c5      	b.n	80036aa <_printf_common+0x62>
 800371e:	2301      	movs	r3, #1
 8003720:	4622      	mov	r2, r4
 8003722:	4639      	mov	r1, r7
 8003724:	4630      	mov	r0, r6
 8003726:	47c0      	blx	r8
 8003728:	3001      	adds	r0, #1
 800372a:	d0e6      	beq.n	80036fa <_printf_common+0xb2>
 800372c:	f109 0901 	add.w	r9, r9, #1
 8003730:	e7d8      	b.n	80036e4 <_printf_common+0x9c>
	...

08003734 <_printf_i>:
 8003734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800373c:	460c      	mov	r4, r1
 800373e:	7e09      	ldrb	r1, [r1, #24]
 8003740:	b085      	sub	sp, #20
 8003742:	296e      	cmp	r1, #110	; 0x6e
 8003744:	4617      	mov	r7, r2
 8003746:	4606      	mov	r6, r0
 8003748:	4698      	mov	r8, r3
 800374a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800374c:	f000 80b3 	beq.w	80038b6 <_printf_i+0x182>
 8003750:	d822      	bhi.n	8003798 <_printf_i+0x64>
 8003752:	2963      	cmp	r1, #99	; 0x63
 8003754:	d036      	beq.n	80037c4 <_printf_i+0x90>
 8003756:	d80a      	bhi.n	800376e <_printf_i+0x3a>
 8003758:	2900      	cmp	r1, #0
 800375a:	f000 80b9 	beq.w	80038d0 <_printf_i+0x19c>
 800375e:	2958      	cmp	r1, #88	; 0x58
 8003760:	f000 8083 	beq.w	800386a <_printf_i+0x136>
 8003764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800376c:	e032      	b.n	80037d4 <_printf_i+0xa0>
 800376e:	2964      	cmp	r1, #100	; 0x64
 8003770:	d001      	beq.n	8003776 <_printf_i+0x42>
 8003772:	2969      	cmp	r1, #105	; 0x69
 8003774:	d1f6      	bne.n	8003764 <_printf_i+0x30>
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	6813      	ldr	r3, [r2, #0]
 800377a:	0605      	lsls	r5, r0, #24
 800377c:	f103 0104 	add.w	r1, r3, #4
 8003780:	d52a      	bpl.n	80037d8 <_printf_i+0xa4>
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	da03      	bge.n	8003792 <_printf_i+0x5e>
 800378a:	222d      	movs	r2, #45	; 0x2d
 800378c:	425b      	negs	r3, r3
 800378e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003792:	486f      	ldr	r0, [pc, #444]	; (8003950 <_printf_i+0x21c>)
 8003794:	220a      	movs	r2, #10
 8003796:	e039      	b.n	800380c <_printf_i+0xd8>
 8003798:	2973      	cmp	r1, #115	; 0x73
 800379a:	f000 809d 	beq.w	80038d8 <_printf_i+0x1a4>
 800379e:	d808      	bhi.n	80037b2 <_printf_i+0x7e>
 80037a0:	296f      	cmp	r1, #111	; 0x6f
 80037a2:	d020      	beq.n	80037e6 <_printf_i+0xb2>
 80037a4:	2970      	cmp	r1, #112	; 0x70
 80037a6:	d1dd      	bne.n	8003764 <_printf_i+0x30>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	e003      	b.n	80037ba <_printf_i+0x86>
 80037b2:	2975      	cmp	r1, #117	; 0x75
 80037b4:	d017      	beq.n	80037e6 <_printf_i+0xb2>
 80037b6:	2978      	cmp	r1, #120	; 0x78
 80037b8:	d1d4      	bne.n	8003764 <_printf_i+0x30>
 80037ba:	2378      	movs	r3, #120	; 0x78
 80037bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037c0:	4864      	ldr	r0, [pc, #400]	; (8003954 <_printf_i+0x220>)
 80037c2:	e055      	b.n	8003870 <_printf_i+0x13c>
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	1d19      	adds	r1, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6011      	str	r1, [r2, #0]
 80037cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e08c      	b.n	80038f2 <_printf_i+0x1be>
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6011      	str	r1, [r2, #0]
 80037dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037e0:	bf18      	it	ne
 80037e2:	b21b      	sxthne	r3, r3
 80037e4:	e7cf      	b.n	8003786 <_printf_i+0x52>
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1d18      	adds	r0, r3, #4
 80037ec:	6010      	str	r0, [r2, #0]
 80037ee:	0628      	lsls	r0, r5, #24
 80037f0:	d501      	bpl.n	80037f6 <_printf_i+0xc2>
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	e002      	b.n	80037fc <_printf_i+0xc8>
 80037f6:	0668      	lsls	r0, r5, #25
 80037f8:	d5fb      	bpl.n	80037f2 <_printf_i+0xbe>
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	4854      	ldr	r0, [pc, #336]	; (8003950 <_printf_i+0x21c>)
 80037fe:	296f      	cmp	r1, #111	; 0x6f
 8003800:	bf14      	ite	ne
 8003802:	220a      	movne	r2, #10
 8003804:	2208      	moveq	r2, #8
 8003806:	2100      	movs	r1, #0
 8003808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380c:	6865      	ldr	r5, [r4, #4]
 800380e:	60a5      	str	r5, [r4, #8]
 8003810:	2d00      	cmp	r5, #0
 8003812:	f2c0 8095 	blt.w	8003940 <_printf_i+0x20c>
 8003816:	6821      	ldr	r1, [r4, #0]
 8003818:	f021 0104 	bic.w	r1, r1, #4
 800381c:	6021      	str	r1, [r4, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d13d      	bne.n	800389e <_printf_i+0x16a>
 8003822:	2d00      	cmp	r5, #0
 8003824:	f040 808e 	bne.w	8003944 <_printf_i+0x210>
 8003828:	4665      	mov	r5, ip
 800382a:	2a08      	cmp	r2, #8
 800382c:	d10b      	bne.n	8003846 <_printf_i+0x112>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	07db      	lsls	r3, r3, #31
 8003832:	d508      	bpl.n	8003846 <_printf_i+0x112>
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	6862      	ldr	r2, [r4, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	bfde      	ittt	le
 800383c:	2330      	movle	r3, #48	; 0x30
 800383e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003842:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003846:	ebac 0305 	sub.w	r3, ip, r5
 800384a:	6123      	str	r3, [r4, #16]
 800384c:	f8cd 8000 	str.w	r8, [sp]
 8003850:	463b      	mov	r3, r7
 8003852:	aa03      	add	r2, sp, #12
 8003854:	4621      	mov	r1, r4
 8003856:	4630      	mov	r0, r6
 8003858:	f7ff fef6 	bl	8003648 <_printf_common>
 800385c:	3001      	adds	r0, #1
 800385e:	d14d      	bne.n	80038fc <_printf_i+0x1c8>
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	b005      	add	sp, #20
 8003866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800386a:	4839      	ldr	r0, [pc, #228]	; (8003950 <_printf_i+0x21c>)
 800386c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	6821      	ldr	r1, [r4, #0]
 8003874:	1d1d      	adds	r5, r3, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6015      	str	r5, [r2, #0]
 800387a:	060a      	lsls	r2, r1, #24
 800387c:	d50b      	bpl.n	8003896 <_printf_i+0x162>
 800387e:	07ca      	lsls	r2, r1, #31
 8003880:	bf44      	itt	mi
 8003882:	f041 0120 	orrmi.w	r1, r1, #32
 8003886:	6021      	strmi	r1, [r4, #0]
 8003888:	b91b      	cbnz	r3, 8003892 <_printf_i+0x15e>
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	f022 0220 	bic.w	r2, r2, #32
 8003890:	6022      	str	r2, [r4, #0]
 8003892:	2210      	movs	r2, #16
 8003894:	e7b7      	b.n	8003806 <_printf_i+0xd2>
 8003896:	064d      	lsls	r5, r1, #25
 8003898:	bf48      	it	mi
 800389a:	b29b      	uxthmi	r3, r3
 800389c:	e7ef      	b.n	800387e <_printf_i+0x14a>
 800389e:	4665      	mov	r5, ip
 80038a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80038a4:	fb02 3311 	mls	r3, r2, r1, r3
 80038a8:	5cc3      	ldrb	r3, [r0, r3]
 80038aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ae:	460b      	mov	r3, r1
 80038b0:	2900      	cmp	r1, #0
 80038b2:	d1f5      	bne.n	80038a0 <_printf_i+0x16c>
 80038b4:	e7b9      	b.n	800382a <_printf_i+0xf6>
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	6825      	ldr	r5, [r4, #0]
 80038ba:	6961      	ldr	r1, [r4, #20]
 80038bc:	1d18      	adds	r0, r3, #4
 80038be:	6010      	str	r0, [r2, #0]
 80038c0:	0628      	lsls	r0, r5, #24
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	d501      	bpl.n	80038ca <_printf_i+0x196>
 80038c6:	6019      	str	r1, [r3, #0]
 80038c8:	e002      	b.n	80038d0 <_printf_i+0x19c>
 80038ca:	066a      	lsls	r2, r5, #25
 80038cc:	d5fb      	bpl.n	80038c6 <_printf_i+0x192>
 80038ce:	8019      	strh	r1, [r3, #0]
 80038d0:	2300      	movs	r3, #0
 80038d2:	6123      	str	r3, [r4, #16]
 80038d4:	4665      	mov	r5, ip
 80038d6:	e7b9      	b.n	800384c <_printf_i+0x118>
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	1d19      	adds	r1, r3, #4
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	681d      	ldr	r5, [r3, #0]
 80038e0:	6862      	ldr	r2, [r4, #4]
 80038e2:	2100      	movs	r1, #0
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7fc fc83 	bl	80001f0 <memchr>
 80038ea:	b108      	cbz	r0, 80038f0 <_printf_i+0x1bc>
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	6060      	str	r0, [r4, #4]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	2300      	movs	r3, #0
 80038f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fa:	e7a7      	b.n	800384c <_printf_i+0x118>
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	462a      	mov	r2, r5
 8003900:	4639      	mov	r1, r7
 8003902:	4630      	mov	r0, r6
 8003904:	47c0      	blx	r8
 8003906:	3001      	adds	r0, #1
 8003908:	d0aa      	beq.n	8003860 <_printf_i+0x12c>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	079b      	lsls	r3, r3, #30
 800390e:	d413      	bmi.n	8003938 <_printf_i+0x204>
 8003910:	68e0      	ldr	r0, [r4, #12]
 8003912:	9b03      	ldr	r3, [sp, #12]
 8003914:	4298      	cmp	r0, r3
 8003916:	bfb8      	it	lt
 8003918:	4618      	movlt	r0, r3
 800391a:	e7a3      	b.n	8003864 <_printf_i+0x130>
 800391c:	2301      	movs	r3, #1
 800391e:	464a      	mov	r2, r9
 8003920:	4639      	mov	r1, r7
 8003922:	4630      	mov	r0, r6
 8003924:	47c0      	blx	r8
 8003926:	3001      	adds	r0, #1
 8003928:	d09a      	beq.n	8003860 <_printf_i+0x12c>
 800392a:	3501      	adds	r5, #1
 800392c:	68e3      	ldr	r3, [r4, #12]
 800392e:	9a03      	ldr	r2, [sp, #12]
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	42ab      	cmp	r3, r5
 8003934:	dcf2      	bgt.n	800391c <_printf_i+0x1e8>
 8003936:	e7eb      	b.n	8003910 <_printf_i+0x1dc>
 8003938:	2500      	movs	r5, #0
 800393a:	f104 0919 	add.w	r9, r4, #25
 800393e:	e7f5      	b.n	800392c <_printf_i+0x1f8>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ac      	bne.n	800389e <_printf_i+0x16a>
 8003944:	7803      	ldrb	r3, [r0, #0]
 8003946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800394a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394e:	e76c      	b.n	800382a <_printf_i+0xf6>
 8003950:	08003c39 	.word	0x08003c39
 8003954:	08003c4a 	.word	0x08003c4a

08003958 <_putc_r>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	460d      	mov	r5, r1
 800395c:	4614      	mov	r4, r2
 800395e:	4606      	mov	r6, r0
 8003960:	b118      	cbz	r0, 800396a <_putc_r+0x12>
 8003962:	6983      	ldr	r3, [r0, #24]
 8003964:	b90b      	cbnz	r3, 800396a <_putc_r+0x12>
 8003966:	f7ff fb99 	bl	800309c <__sinit>
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <_putc_r+0x60>)
 800396c:	429c      	cmp	r4, r3
 800396e:	d112      	bne.n	8003996 <_putc_r+0x3e>
 8003970:	6874      	ldr	r4, [r6, #4]
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	da16      	bge.n	80039aa <_putc_r+0x52>
 800397c:	69a2      	ldr	r2, [r4, #24]
 800397e:	4293      	cmp	r3, r2
 8003980:	db02      	blt.n	8003988 <_putc_r+0x30>
 8003982:	b2eb      	uxtb	r3, r5
 8003984:	2b0a      	cmp	r3, #10
 8003986:	d110      	bne.n	80039aa <_putc_r+0x52>
 8003988:	4622      	mov	r2, r4
 800398a:	4629      	mov	r1, r5
 800398c:	4630      	mov	r0, r6
 800398e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003992:	f7ff b9d3 	b.w	8002d3c <__swbuf_r>
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <_putc_r+0x64>)
 8003998:	429c      	cmp	r4, r3
 800399a:	d101      	bne.n	80039a0 <_putc_r+0x48>
 800399c:	68b4      	ldr	r4, [r6, #8]
 800399e:	e7e8      	b.n	8003972 <_putc_r+0x1a>
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_putc_r+0x68>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	bf08      	it	eq
 80039a6:	68f4      	ldreq	r4, [r6, #12]
 80039a8:	e7e3      	b.n	8003972 <_putc_r+0x1a>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	6022      	str	r2, [r4, #0]
 80039b0:	701d      	strb	r5, [r3, #0]
 80039b2:	b2e8      	uxtb	r0, r5
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
 80039b6:	bf00      	nop
 80039b8:	08003be8 	.word	0x08003be8
 80039bc:	08003c08 	.word	0x08003c08
 80039c0:	08003bc8 	.word	0x08003bc8

080039c4 <_sbrk_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4c06      	ldr	r4, [pc, #24]	; (80039e0 <_sbrk_r+0x1c>)
 80039c8:	2300      	movs	r3, #0
 80039ca:	4605      	mov	r5, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	f7fd f9e0 	bl	8000d94 <_sbrk>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_sbrk_r+0x1a>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	b103      	cbz	r3, 80039de <_sbrk_r+0x1a>
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	20009180 	.word	0x20009180

080039e4 <__sread>:
 80039e4:	b510      	push	{r4, lr}
 80039e6:	460c      	mov	r4, r1
 80039e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ec:	f000 f896 	bl	8003b1c <_read_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	bfab      	itete	ge
 80039f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039f6:	89a3      	ldrhlt	r3, [r4, #12]
 80039f8:	181b      	addge	r3, r3, r0
 80039fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039fe:	bfac      	ite	ge
 8003a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a02:	81a3      	strhlt	r3, [r4, #12]
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <__swrite>:
 8003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	461f      	mov	r7, r3
 8003a0c:	898b      	ldrh	r3, [r1, #12]
 8003a0e:	05db      	lsls	r3, r3, #23
 8003a10:	4605      	mov	r5, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4616      	mov	r6, r2
 8003a16:	d505      	bpl.n	8003a24 <__swrite+0x1e>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a20:	f000 f868 	bl	8003af4 <_lseek_r>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	4632      	mov	r2, r6
 8003a32:	463b      	mov	r3, r7
 8003a34:	4628      	mov	r0, r5
 8003a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	f000 b817 	b.w	8003a6c <_write_r>

08003a3e <__sseek>:
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	460c      	mov	r4, r1
 8003a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a46:	f000 f855 	bl	8003af4 <_lseek_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	bf15      	itete	ne
 8003a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a5a:	81a3      	strheq	r3, [r4, #12]
 8003a5c:	bf18      	it	ne
 8003a5e:	81a3      	strhne	r3, [r4, #12]
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <__sclose>:
 8003a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a66:	f000 b813 	b.w	8003a90 <_close_r>
	...

08003a6c <_write_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4c07      	ldr	r4, [pc, #28]	; (8003a8c <_write_r+0x20>)
 8003a70:	4605      	mov	r5, r0
 8003a72:	4608      	mov	r0, r1
 8003a74:	4611      	mov	r1, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	6022      	str	r2, [r4, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f7fc fd88 	bl	8000590 <_write>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d102      	bne.n	8003a8a <_write_r+0x1e>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	b103      	cbz	r3, 8003a8a <_write_r+0x1e>
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	20009180 	.word	0x20009180

08003a90 <_close_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4c06      	ldr	r4, [pc, #24]	; (8003aac <_close_r+0x1c>)
 8003a94:	2300      	movs	r3, #0
 8003a96:	4605      	mov	r5, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	f7fd f945 	bl	8000d2a <_close>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_close_r+0x1a>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_close_r+0x1a>
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	20009180 	.word	0x20009180

08003ab0 <_fstat_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4c07      	ldr	r4, [pc, #28]	; (8003ad0 <_fstat_r+0x20>)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	f7fd f940 	bl	8000d42 <_fstat>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d102      	bne.n	8003acc <_fstat_r+0x1c>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	b103      	cbz	r3, 8003acc <_fstat_r+0x1c>
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	bd38      	pop	{r3, r4, r5, pc}
 8003ace:	bf00      	nop
 8003ad0:	20009180 	.word	0x20009180

08003ad4 <_isatty_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4c06      	ldr	r4, [pc, #24]	; (8003af0 <_isatty_r+0x1c>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4605      	mov	r5, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	f7fd f93f 	bl	8000d62 <_isatty>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_isatty_r+0x1a>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_isatty_r+0x1a>
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	20009180 	.word	0x20009180

08003af4 <_lseek_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4c07      	ldr	r4, [pc, #28]	; (8003b14 <_lseek_r+0x20>)
 8003af8:	4605      	mov	r5, r0
 8003afa:	4608      	mov	r0, r1
 8003afc:	4611      	mov	r1, r2
 8003afe:	2200      	movs	r2, #0
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7fd f938 	bl	8000d78 <_lseek>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_lseek_r+0x1e>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_lseek_r+0x1e>
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20009180 	.word	0x20009180

08003b18 <__malloc_lock>:
 8003b18:	4770      	bx	lr

08003b1a <__malloc_unlock>:
 8003b1a:	4770      	bx	lr

08003b1c <_read_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4c07      	ldr	r4, [pc, #28]	; (8003b3c <_read_r+0x20>)
 8003b20:	4605      	mov	r5, r0
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	6022      	str	r2, [r4, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fd f8e0 	bl	8000cf0 <_read>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_read_r+0x1e>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_read_r+0x1e>
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20009180 	.word	0x20009180

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
