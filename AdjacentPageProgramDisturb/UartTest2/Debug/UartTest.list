
UartTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b68  08002b68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08002b84  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078fe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000143d  00000000  00000000  0002793a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  00028d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  00029558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022169  00000000  00000000  00029c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069b4  00000000  00000000  0004bde9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d054f  00000000  00000000  0005279d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd0  00000000  00000000  00122d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002b38 	.word	0x08002b38

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002b38 	.word	0x08002b38

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <NandControllerInitAndTest>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int NandControllerInitAndTest(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0e8      	sub	sp, #416	; 0x1a0
 8000500:	af00      	add	r7, sp, #0

 /*##-1- Configure the NAND device ###############################*/
//	hNAND.Instance = FMC_NAND_DEVICE;
//
	/* NAND device configuration */
	NAND_ComTiming.SetupTime = 0xf1;
 8000502:	4ba7      	ldr	r3, [pc, #668]	; (80007a0 <NandControllerInitAndTest+0x2a4>)
 8000504:	22f1      	movs	r2, #241	; 0xf1
 8000506:	601a      	str	r2, [r3, #0]
	NAND_ComTiming.WaitSetupTime = 0xf2;
 8000508:	4ba5      	ldr	r3, [pc, #660]	; (80007a0 <NandControllerInitAndTest+0x2a4>)
 800050a:	22f2      	movs	r2, #242	; 0xf2
 800050c:	605a      	str	r2, [r3, #4]
	NAND_ComTiming.HoldSetupTime = 0xf3;
 800050e:	4ba4      	ldr	r3, [pc, #656]	; (80007a0 <NandControllerInitAndTest+0x2a4>)
 8000510:	22f3      	movs	r2, #243	; 0xf3
 8000512:	609a      	str	r2, [r3, #8]
	NAND_ComTiming.HiZSetupTime = 0xf1;
 8000514:	4ba2      	ldr	r3, [pc, #648]	; (80007a0 <NandControllerInitAndTest+0x2a4>)
 8000516:	22f1      	movs	r2, #241	; 0xf1
 8000518:	60da      	str	r2, [r3, #12]
	NAND_AttTiming.SetupTime = 0xf1;
 800051a:	4ba2      	ldr	r3, [pc, #648]	; (80007a4 <NandControllerInitAndTest+0x2a8>)
 800051c:	22f1      	movs	r2, #241	; 0xf1
 800051e:	601a      	str	r2, [r3, #0]
	NAND_AttTiming.WaitSetupTime = 0xf2;
 8000520:	4ba0      	ldr	r3, [pc, #640]	; (80007a4 <NandControllerInitAndTest+0x2a8>)
 8000522:	22f2      	movs	r2, #242	; 0xf2
 8000524:	605a      	str	r2, [r3, #4]
	NAND_AttTiming.HoldSetupTime = 0xf3;
 8000526:	4b9f      	ldr	r3, [pc, #636]	; (80007a4 <NandControllerInitAndTest+0x2a8>)
 8000528:	22f3      	movs	r2, #243	; 0xf3
 800052a:	609a      	str	r2, [r3, #8]
	NAND_AttTiming.HiZSetupTime = 0xf1;
 800052c:	4b9d      	ldr	r3, [pc, #628]	; (80007a4 <NandControllerInitAndTest+0x2a8>)
 800052e:	22f1      	movs	r2, #241	; 0xf1
 8000530:	60da      	str	r2, [r3, #12]

	hNAND.Init.NandBank = FMC_NAND_BANK2;
 8000532:	4b9d      	ldr	r3, [pc, #628]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000534:	2210      	movs	r2, #16
 8000536:	605a      	str	r2, [r3, #4]
	hNAND.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000538:	4b9b      	ldr	r3, [pc, #620]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800053a:	2202      	movs	r2, #2
 800053c:	609a      	str	r2, [r3, #8]

	hNAND.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800053e:	4b9a      	ldr	r3, [pc, #616]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
	hNAND.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 8000544:	4b98      	ldr	r3, [pc, #608]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
	hNAND.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_512BYTE;
 800054a:	4b97      	ldr	r3, [pc, #604]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800054c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000550:	615a      	str	r2, [r3, #20]
	hNAND.Init.TCLRSetupTime = 0x0;
 8000552:	4b95      	ldr	r3, [pc, #596]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
	hNAND.Init.TARSetupTime = 0x0;
 8000558:	4b93      	ldr	r3, [pc, #588]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
	hNAND.Config.BlockNbr = 0x400;
 800055e:	4b92      	ldr	r3, [pc, #584]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
	hNAND.Config.BlockSize = 0x40;
 8000566:	4b90      	ldr	r3, [pc, #576]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
	hNAND.Config.PageSize = 0x800;
 800056c:	4b8e      	ldr	r3, [pc, #568]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800056e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
	hNAND.Config.PlaneNbr = 0x01;
 8000574:	4b8c      	ldr	r3, [pc, #560]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000576:	2201      	movs	r2, #1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
	hNAND.Config.PlaneSize = 0x400;
 800057a:	4b8b      	ldr	r3, [pc, #556]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800057c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
	hNAND.Config.SpareAreaSize = 0x40;
 8000582:	4b89      	ldr	r3, [pc, #548]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	629a      	str	r2, [r3, #40]	; 0x28

	/* NAND controller initialization */
	if(HAL_NAND_Init(&hNAND, &NAND_ComTiming, &NAND_AttTiming) != HAL_OK)
 8000588:	4a86      	ldr	r2, [pc, #536]	; (80007a4 <NandControllerInitAndTest+0x2a8>)
 800058a:	4985      	ldr	r1, [pc, #532]	; (80007a0 <NandControllerInitAndTest+0x2a4>)
 800058c:	4886      	ldr	r0, [pc, #536]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 800058e:	f000 fecb 	bl	8001328 <HAL_NAND_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <NandControllerInitAndTest+0xa0>
	{
		return NAND_STATUS_INIT_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	e0fc      	b.n	8000796 <NandControllerInitAndTest+0x29a>
	}

	/*##-2- Read & check the NAND device IDs ########################*/
	/* Read the NAND memory ID */
	if(HAL_NAND_Read_ID(&hNAND, &NAND_ID) != HAL_OK)
 800059c:	4983      	ldr	r1, [pc, #524]	; (80007ac <NandControllerInitAndTest+0x2b0>)
 800059e:	4882      	ldr	r0, [pc, #520]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 80005a0:	f000 ff10 	bl	80013c4 <HAL_NAND_Read_ID>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <NandControllerInitAndTest+0xb2>
	{
		return NAND_STATUS_READ_ID_ERROR;
 80005aa:	2302      	movs	r3, #2
 80005ac:	e0f3      	b.n	8000796 <NandControllerInitAndTest+0x29a>
	}

	NAND_AddressTypedef Address;
	NAND_AddressTypedef ReadAddress[64];
	/*##-3- Erase NAND memory #######################################*/
	Address.Page = PAGE_1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
	Address.Plane = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
	Address.Block = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	/*ReadAddress.Page = PAGE_1;
	ReadAddress.Plane = 0;
	ReadAddress.Block = 0;*/

	for(int i=0; i<64; i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80005c6:	e027      	b.n	8000618 <NandControllerInitAndTest+0x11c>
		{
			ReadAddress[i].Block = 0;
 80005c8:	4639      	mov	r1, r7
 80005ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80005ce:	4613      	mov	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	4413      	add	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	440b      	add	r3, r1
 80005d8:	3304      	adds	r3, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	801a      	strh	r2, [r3, #0]
			ReadAddress[i].Plane = 0;
 80005de:	4639      	mov	r1, r7
 80005e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	440b      	add	r3, r1
 80005ee:	3302      	adds	r3, #2
 80005f0:	2200      	movs	r2, #0
 80005f2:	801a      	strh	r2, [r3, #0]
			ReadAddress[i].Page = i;
 80005f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80005f8:	b298      	uxth	r0, r3
 80005fa:	4639      	mov	r1, r7
 80005fc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	440b      	add	r3, r1
 800060a:	4602      	mov	r2, r0
 800060c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<64; i++)
 800060e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000612:	3301      	adds	r3, #1
 8000614:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000618:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800061c:	2b3f      	cmp	r3, #63	; 0x3f
 800061e:	ddd3      	ble.n	80005c8 <NandControllerInitAndTest+0xcc>
		}
	/* Send NAND erase block operation */
	if (HAL_NAND_Erase_Block(&hNAND, &Address) != HAL_OK)
 8000620:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000624:	4619      	mov	r1, r3
 8000626:	4860      	ldr	r0, [pc, #384]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000628:	f001 f98f 	bl	800194a <HAL_NAND_Erase_Block>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <NandControllerInitAndTest+0x13a>
	{
		return NAND_STATUS_ERASE_ERROR;
 8000632:	2303      	movs	r3, #3
 8000634:	e0af      	b.n	8000796 <NandControllerInitAndTest+0x29a>
	}
	//check trail
	for(int i=0; i<2048; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800063c:	e00a      	b.n	8000654 <NandControllerInitAndTest+0x158>
	{
		aTxBuffer[i] = 0XAA;
 800063e:	4a5c      	ldr	r2, [pc, #368]	; (80007b0 <NandControllerInitAndTest+0x2b4>)
 8000640:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000644:	4413      	add	r3, r2
 8000646:	22aa      	movs	r2, #170	; 0xaa
 8000648:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<2048; i++)
 800064a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800064e:	3301      	adds	r3, #1
 8000650:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000654:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065c:	dbef      	blt.n	800063e <NandControllerInitAndTest+0x142>
	}

	if (HAL_NAND_Write_Page_8b(&hNAND, &Address, aTxBuffer, 64) != HAL_OK)
 800065e:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <NandControllerInitAndTest+0x2b4>)
 8000666:	4850      	ldr	r0, [pc, #320]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000668:	f001 f84c 	bl	8001704 <HAL_NAND_Write_Page_8b>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <NandControllerInitAndTest+0x17a>
	{
		return NAND_STATUS_WRITE_ERROR;
 8000672:	2304      	movs	r3, #4
 8000674:	e08f      	b.n	8000796 <NandControllerInitAndTest+0x29a>
	}

	if (HAL_NAND_Read_Page_8b(&hNAND, &Address, aRxBuffer, 1) != HAL_OK)
 8000676:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800067a:	2301      	movs	r3, #1
 800067c:	4a4d      	ldr	r2, [pc, #308]	; (80007b4 <NandControllerInitAndTest+0x2b8>)
 800067e:	484a      	ldr	r0, [pc, #296]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000680:	f000 ff1a 	bl	80014b8 <HAL_NAND_Read_Page_8b>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <NandControllerInitAndTest+0x192>
	{
		return NAND_STATUS_READ_ERROR;
 800068a:	2305      	movs	r3, #5
 800068c:	e083      	b.n	8000796 <NandControllerInitAndTest+0x29a>
	}
	HAL_UART_Transmit(&huart1, aRxBuffer, (uint16_t)strlen(aRxBuffer), 100);
 800068e:	4849      	ldr	r0, [pc, #292]	; (80007b4 <NandControllerInitAndTest+0x2b8>)
 8000690:	f7ff fdac 	bl	80001ec <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	4946      	ldr	r1, [pc, #280]	; (80007b4 <NandControllerInitAndTest+0x2b8>)
 800069c:	4846      	ldr	r0, [pc, #280]	; (80007b8 <NandControllerInitAndTest+0x2bc>)
 800069e:	f001 fe84 	bl	80023aa <HAL_UART_Transmit>
	if (HAL_NAND_Read_Page_8b(&hNAND, &ReadAddress[3], temp, 1) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	f103 0112 	add.w	r1, r3, #18
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a44      	ldr	r2, [pc, #272]	; (80007bc <NandControllerInitAndTest+0x2c0>)
 80006ac:	483e      	ldr	r0, [pc, #248]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 80006ae:	f000 ff03 	bl	80014b8 <HAL_NAND_Read_Page_8b>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <NandControllerInitAndTest+0x1c0>
		{
			return NAND_STATUS_READ_ERROR;
 80006b8:	2305      	movs	r3, #5
 80006ba:	e06c      	b.n	8000796 <NandControllerInitAndTest+0x29a>
		}
		HAL_UART_Transmit(&huart1, temp, (uint16_t)strlen(temp), 100);
 80006bc:	483f      	ldr	r0, [pc, #252]	; (80007bc <NandControllerInitAndTest+0x2c0>)
 80006be:	f7ff fd95 	bl	80001ec <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	493c      	ldr	r1, [pc, #240]	; (80007bc <NandControllerInitAndTest+0x2c0>)
 80006ca:	483b      	ldr	r0, [pc, #236]	; (80007b8 <NandControllerInitAndTest+0x2bc>)
 80006cc:	f001 fe6d 	bl	80023aa <HAL_UART_Transmit>
	}

	*/

	//bool flag = false;
	int flag = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	if(flag==1)
 80006d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d15a      	bne.n	8000794 <NandControllerInitAndTest+0x298>
	{
		/*##-4- NAND memory read/write access ###########################*/
		/* Write data to the NAND memory */

		for(int i=0; i<2048; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80006e4:	e00a      	b.n	80006fc <NandControllerInitAndTest+0x200>
		{
			aTxBuffer[i] = 0XAA;
 80006e6:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <NandControllerInitAndTest+0x2b4>)
 80006e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80006ec:	4413      	add	r3, r2
 80006ee:	22aa      	movs	r2, #170	; 0xaa
 80006f0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<2048; i++)
 80006f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80006f6:	3301      	adds	r3, #1
 80006f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80006fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000704:	dbef      	blt.n	80006e6 <NandControllerInitAndTest+0x1ea>
		}

		for(int i = 0; i < 1000; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800070c:	e010      	b.n	8000730 <NandControllerInitAndTest+0x234>
		{
			if (HAL_NAND_Write_Page_8b(&hNAND, &Address, aTxBuffer, 1) != HAL_OK)
 800070e:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000712:	2301      	movs	r3, #1
 8000714:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <NandControllerInitAndTest+0x2b4>)
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000718:	f000 fff4 	bl	8001704 <HAL_NAND_Write_Page_8b>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <NandControllerInitAndTest+0x22a>
			{
				return NAND_STATUS_WRITE_ERROR;
 8000722:	2304      	movs	r3, #4
 8000724:	e037      	b.n	8000796 <NandControllerInitAndTest+0x29a>
		for(int i = 0; i < 1000; i++)
 8000726:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800072a:	3301      	adds	r3, #1
 800072c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000730:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000738:	dbe9      	blt.n	800070e <NandControllerInitAndTest+0x212>
			}
			HAL_UART_Transmit(&huart1, aRxBuffer, strlen(aRxBuffer), 100);
			//HAL_UART_Transmit(&huart1, data, size, 100);
			HAL_Delay(500);*/
		}
		for(int i=0; i<64; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000740:	e024      	b.n	800078c <NandControllerInitAndTest+0x290>
			{
				//if(Address.Page!=ReadAddress[i].Page)
				//{
					if (HAL_NAND_Read_Page_8b(&hNAND, &ReadAddress[i], temp1, 1) != HAL_OK)
 8000742:	4639      	mov	r1, r7
 8000744:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4419      	add	r1, r3
 8000752:	2301      	movs	r3, #1
 8000754:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <NandControllerInitAndTest+0x2c4>)
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <NandControllerInitAndTest+0x2ac>)
 8000758:	f000 feae 	bl	80014b8 <HAL_NAND_Read_Page_8b>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <NandControllerInitAndTest+0x26a>
					{
						return NAND_STATUS_READ_ERROR;
 8000762:	2305      	movs	r3, #5
 8000764:	e017      	b.n	8000796 <NandControllerInitAndTest+0x29a>
					}
					HAL_UART_Transmit(&huart1, temp1, (uint16_t) strlen((const char*)temp1), 100);
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <NandControllerInitAndTest+0x2c4>)
 8000768:	f7ff fd40 	bl	80001ec <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	4913      	ldr	r1, [pc, #76]	; (80007c0 <NandControllerInitAndTest+0x2c4>)
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <NandControllerInitAndTest+0x2bc>)
 8000776:	f001 fe18 	bl	80023aa <HAL_UART_Transmit>
					//HAL_UART_Transmit(&huart1, data, size, 100);
					HAL_Delay(500);
 800077a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077e:	f000 fb21 	bl	8000dc4 <HAL_Delay>
		for(int i=0; i<64; i++)
 8000782:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000786:	3301      	adds	r3, #1
 8000788:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800078c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000790:	2b3f      	cmp	r3, #63	; 0x3f
 8000792:	ddd6      	ble.n	8000742 <NandControllerInitAndTest+0x246>
				j++;
			}
		}
		HAL_UART_Transmit(&huart1, stableBits, j, 1000);*/
	}
	return NAND_STATUS_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000a8 	.word	0x200000a8
 80007a4:	200000b8 	.word	0x200000b8
 80007a8:	20000068 	.word	0x20000068
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	200000cc 	.word	0x200000cc
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	20000028 	.word	0x20000028
 80007bc:	200000cc 	.word	0x200000cc
 80007c0:	200000cc 	.word	0x200000cc

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fa8a 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f80a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f8f4 	bl	80009bc <MX_GPIO_Init>
  MX_FMC_Init();
 80007d4:	f000 f890 	bl	80008f8 <MX_FMC_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 f864 	bl	80008a4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  NandControllerInitAndTest();
 80007dc:	f7ff fe8e 	bl	80004fc <NandControllerInitAndTest>
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x1c>
	...

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f998 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <SystemClock_Config+0xb8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a22      	ldr	r2, [pc, #136]	; (800089c <SystemClock_Config+0xb8>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <SystemClock_Config+0xb8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <SystemClock_Config+0xbc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <SystemClock_Config+0xbc>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <SystemClock_Config+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f94f 	bl	8001afc <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000864:	f000 f8e0 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fb7c 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088e:	f000 f8cb 	bl	8000a28 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART1_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008dc:	f001 fd18 	bl	8002310 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f89f 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000028 	.word	0x20000028
 80008f4:	40011000 	.word	0x40011000

080008f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_FMC_Init+0xbc>)
 800091a:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <MX_FMC_Init+0xc0>)
 800091c:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK2;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000920:	2210      	movs	r2, #16
 8000922:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000926:	2202      	movs	r2, #2
 8000928:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_FMC_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_FMC_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_FMC_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_FMC_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_FMC_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_FMC_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000974:	23fc      	movs	r3, #252	; 0xfc
 8000976:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8000978:	23fc      	movs	r3, #252	; 0xfc
 800097a:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 800097c:	23fc      	movs	r3, #252	; 0xfc
 800097e:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8000980:	23fc      	movs	r3, #252	; 0xfc
 8000982:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000984:	23fc      	movs	r3, #252	; 0xfc
 8000986:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8000988:	23fc      	movs	r3, #252	; 0xfc
 800098a:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 800098c:	23fc      	movs	r3, #252	; 0xfc
 800098e:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8000990:	23fc      	movs	r3, #252	; 0xfc
 8000992:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000994:	463a      	mov	r2, r7
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_FMC_Init+0xbc>)
 800099e:	f000 fcc3 	bl	8001328 <HAL_NAND_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80009a8:	f000 f83e 	bl	8000a28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200008d0 	.word	0x200008d0
 80009b8:	a0000060 	.word	0xa0000060

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_GPIO_Init+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_GPIO_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <MX_GPIO_Init+0x68>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_GPIO_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af4:	2307      	movs	r3, #7
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_UART_MspInit+0x8c>)
 8000b00:	f000 fa68 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_FMC_MspInit+0x88>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d131      	bne.n	8000b98 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_FMC_MspInit+0x88>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_FMC_MspInit+0x8c>)
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_FMC_MspInit+0x8c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6393      	str	r3, [r2, #56]	; 0x38
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_FMC_MspInit+0x8c>)
 8000b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD6   ------> FMC_NWAIT
  PD7   ------> FMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b56:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <HAL_FMC_MspInit+0x90>)
 8000b72:	f000 fa2f 	bl	8000fd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
 8000b76:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8000b7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_FMC_MspInit+0x94>)
 8000b92:	f000 fa1f 	bl	8000fd4 <HAL_GPIO_Init>
 8000b96:	e000      	b.n	8000b9a <HAL_FMC_MspInit+0x82>
    return;
 8000b98:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200008cc 	.word	0x200008cc
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8000bb8:	f7ff ffae 	bl	8000b18 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8b4 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <SystemInit+0x60>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <SystemInit+0x60>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <SystemInit+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <SystemInit+0x64>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SystemInit+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <SystemInit+0x64>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <SystemInit+0x64>)
 8000c4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SystemInit+0x64>)
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <SystemInit+0x68>)
 8000c5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <SystemInit+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <SystemInit+0x64>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SystemInit+0x60>)
 8000c70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c74:	609a      	str	r2, [r3, #8]
#endif
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	40023800 	.word	0x40023800
 8000c88:	24003010 	.word	0x24003010

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c92:	e003      	b.n	8000c9c <LoopCopyDataInit>

08000c94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c9a:	3104      	adds	r1, #4

08000c9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ca0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ca2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca4:	d3f6      	bcc.n	8000c94 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca8:	e002      	b.n	8000cb0 <LoopFillZerobss>

08000caa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000caa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cac:	f842 3b04 	str.w	r3, [r2], #4

08000cb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb4:	d3f9      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffb3 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f001 ff11 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fd81 	bl	80007c4 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000cc8:	08002b78 	.word	0x08002b78
  ldr  r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000cd4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000cd8:	20000914 	.word	0x20000914

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f92f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe90 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f939 	bl	8000fba <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f90f 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000910 	.word	0x20000910

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000910 	.word	0x20000910

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_Delay+0x40>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff5c 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb0 	bl	8000f28 <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e177      	b.n	80012e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8166 	bne.w	80012da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x4a>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	69b9      	ldr	r1, [r7, #24]
 8001062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0203 	and.w	r2, r3, #3
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00b      	beq.n	80010ba <HAL_GPIO_Init+0xe6>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80c0 	beq.w	80012da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_GPIO_Init+0x320>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_GPIO_Init+0x320>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <HAL_GPIO_Init+0x320>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_GPIO_Init+0x328>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d037      	beq.n	8001212 <HAL_GPIO_Init+0x23e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_GPIO_Init+0x32c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_GPIO_Init+0x23a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a55      	ldr	r2, [pc, #340]	; (8001304 <HAL_GPIO_Init+0x330>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x236>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a54      	ldr	r2, [pc, #336]	; (8001308 <HAL_GPIO_Init+0x334>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x232>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a53      	ldr	r2, [pc, #332]	; (800130c <HAL_GPIO_Init+0x338>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x22e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x33c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x22a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x340>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x344>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x348>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x34c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x21a>
 80011ea:	2309      	movs	r3, #9
 80011ec:	e012      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011ee:	230a      	movs	r3, #10
 80011f0:	e010      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e00e      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00c      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00a      	b.n	8001214 <HAL_GPIO_Init+0x240>
 80011fe:	2305      	movs	r3, #5
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x240>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x240>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x240>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4934      	ldr	r1, [pc, #208]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <HAL_GPIO_Init+0x350>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_GPIO_Init+0x350>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_GPIO_Init+0x350>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <HAL_GPIO_Init+0x350>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_GPIO_Init+0x350>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_GPIO_Init+0x350>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_GPIO_Init+0x350>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_GPIO_Init+0x350>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f ae84 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40022000 	.word	0x40022000
 8001320:	40022400 	.word	0x40022400
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e03e      	b.n	80013bc <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fc2c 	bl	8000bb0 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3304      	adds	r3, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f001 fb0e 	bl	8002984 <FMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	461a      	mov	r2, r3
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	f001 fb48 	bl	8002a08 <FMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f001 fb76 	bl	8002a74 <FMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d108      	bne.n	80013a2 <HAL_NAND_Init+0x7a>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0204 	orr.w	r2, r2, #4
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_NAND_Init+0x8a>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0204 	orr.w	r2, r2, #4
 80013b0:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hnand);  
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_NAND_Read_ID+0x24>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e061      	b.n	80014ac <HAL_NAND_Read_ID+0xe8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d101      	bne.n	8001400 <HAL_NAND_Read_ID+0x3c>
  {
     return HAL_BUSY;
 80013fc:	2302      	movs	r3, #2
 80013fe:	e055      	b.n	80014ac <HAL_NAND_Read_ID+0xe8>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d103      	bne.n	8001410 <HAL_NAND_Read_ID+0x4c>
  {
    deviceaddress = NAND_DEVICE1;
 8001408:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e002      	b.n	8001416 <HAL_NAND_Read_ID+0x52>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001414:	617b      	str	r3, [r7, #20]
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Read ID command sequence */   
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	2290      	movs	r2, #144	; 0x90
 8001426:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

  /* Read the electronic signature from NAND flash */
#ifdef FSMC_PCR2_PWID
  if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8)
#else /* FMC_PCR2_PWID is defined */
  if (hnand->Init.MemoryDataWidth == FMC_NAND_PCC_MEM_BUS_WIDTH_8)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <HAL_NAND_Read_ID+0xa4>
#endif
  {
    data = *(__IO uint32_t *)deviceaddress;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]

    /* Return the data read */
    pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	701a      	strb	r2, [r3, #0]
    pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2da      	uxtb	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	705a      	strb	r2, [r3, #1]
    pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	b2da      	uxtb	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	709a      	strb	r2, [r3, #2]
    pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	0e1b      	lsrs	r3, r3, #24
 8001460:	b2da      	uxtb	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	70da      	strb	r2, [r3, #3]
 8001466:	e018      	b.n	800149a <HAL_NAND_Read_ID+0xd6>
  }
  else
  {
    data = *(__IO uint32_t *)deviceaddress;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
    data1 = *((__IO uint32_t *)deviceaddress + 4U);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3310      	adds	r3, #16
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
    
    /* Return the data read */
    pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	701a      	strb	r2, [r3, #0]
    pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	b2da      	uxtb	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	705a      	strb	r2, [r3, #1]
    pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	709a      	strb	r2, [r3, #2]
    pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	b2da      	uxtb	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	70da      	strb	r2, [r3, #3]
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]
   
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_NAND_Read_Page_8b+0x34>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e107      	b.n	80016fc <HAL_NAND_Read_Page_8b+0x244>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d101      	bne.n	8001504 <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8001500:	2302      	movs	r3, #2
 8001502:	e0fb      	b.n	80016fc <HAL_NAND_Read_Page_8b+0x244>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d103      	bne.n	8001514 <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 800150c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	e002      	b.n	800151a <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	885b      	ldrh	r3, [r3, #2]
 8001532:	4618      	mov	r0, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	fb03 f300 	mul.w	r3, r3, r0
 800153c:	4413      	add	r3, r2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	440b      	add	r3, r1
 8001548:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800154a:	e0c1      	b.n	80016d0 <HAL_NAND_Read_Page_8b+0x218>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	3301      	adds	r3, #1
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d835      	bhi.n	80015da <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d212      	bcs.n	80015a6 <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	0a1a      	lsrs	r2, r3, #8
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e058      	b.n	8001658 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	0a1a      	lsrs	r2, r3, #8
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	0c1a      	lsrs	r2, r3, #16
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e03e      	b.n	8001658 <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d217      	bcs.n	800161c <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	0a1a      	lsrs	r2, r3, #8
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e01d      	b.n	8001658 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	0a1a      	lsrs	r2, r3, #8
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	0c1a      	lsrs	r2, r3, #16
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001668:	2b01      	cmp	r3, #1
 800166a:	d124      	bne.n	80016b6 <HAL_NAND_Read_Page_8b+0x1fe>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fb9e 	bl	8000dac <HAL_GetTick>
 8001670:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001672:	e009      	b.n	8001688 <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8001674:	f7ff fb9a 	bl	8000dac <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001682:	d901      	bls.n	8001688 <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 8001684:	2303      	movs	r3, #3
 8001686:	e039      	b.n	80016fc <HAL_NAND_Read_Page_8b+0x244>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 fa05 	bl	8001a98 <HAL_NAND_Read_Status>
 800168e:	4603      	mov	r3, r0
 8001690:	2b40      	cmp	r3, #64	; 0x40
 8001692:	d1ef      	bne.n	8001674 <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800169e:	f3bf 8f4f 	dsb	sy
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 80016a2:	e008      	b.n	80016b6 <HAL_NAND_Read_Page_8b+0x1fe>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	6079      	str	r1, [r7, #4]
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d8f2      	bhi.n	80016a4 <HAL_NAND_Read_Page_8b+0x1ec>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	3301      	adds	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_NAND_Read_Page_8b+0x232>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f4ff af31 	bcc.w	800154c <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_NAND_Write_Page_8b+0x34>
 8001734:	2302      	movs	r3, #2
 8001736:	e104      	b.n	8001942 <HAL_NAND_Write_Page_8b+0x23e>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d101      	bne.n	8001750 <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 800174c:	2302      	movs	r3, #2
 800174e:	e0f8      	b.n	8001942 <HAL_NAND_Write_Page_8b+0x23e>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d103      	bne.n	8001760 <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8001758:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
 800175e:	e002      	b.n	8001766 <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	4618      	mov	r0, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	fb03 f300 	mul.w	r3, r3, r0
 8001788:	4413      	add	r3, r2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	440b      	add	r3, r1
 8001794:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8001796:	e0be      	b.n	8001916 <HAL_NAND_Write_Page_8b+0x212>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	3301      	adds	r3, #1
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d835      	bhi.n	8001830 <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d212      	bcs.n	80017fc <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	0a1a      	lsrs	r2, r3, #8
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e066      	b.n	80018ca <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	0a1a      	lsrs	r2, r3, #8
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	0c1a      	lsrs	r2, r3, #16
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e04c      	b.n	80018ca <HAL_NAND_Write_Page_8b+0x1c6>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d217      	bcs.n	8001872 <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	0a1a      	lsrs	r2, r3, #8
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e02b      	b.n	80018ca <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	0a1a      	lsrs	r2, r3, #8
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	f3bf 8f4f 	dsb	sy
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	0c1a      	lsrs	r2, r3, #16
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	f3bf 8f4f 	dsb	sy
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 80018b6:	e008      	b.n	80018ca <HAL_NAND_Write_Page_8b+0x1c6>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3301      	adds	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d8f2      	bhi.n	80018b8 <HAL_NAND_Write_Page_8b+0x1b4>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	2210      	movs	r2, #16
 80018da:	701a      	strb	r2, [r3, #0]
    
    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80018dc:	e00c      	b.n	80018f8 <HAL_NAND_Write_Page_8b+0x1f4>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa65 	bl	8000dac <HAL_GetTick>
 80018e2:	61b8      	str	r0, [r7, #24]
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 80018e4:	f7ff fa62 	bl	8000dac <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f2:	d901      	bls.n	80018f8 <HAL_NAND_Write_Page_8b+0x1f4>
      {
        return HAL_TIMEOUT; 
 80018f4:	2303      	movs	r3, #3
 80018f6:	e024      	b.n	8001942 <HAL_NAND_Write_Page_8b+0x23e>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f8cd 	bl	8001a98 <HAL_NAND_Read_Status>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d1ec      	bne.n	80018de <HAL_NAND_Write_Page_8b+0x1da>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	3301      	adds	r3, #1
 8001908:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_NAND_Write_Page_8b+0x22c>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	429a      	cmp	r2, r3
 800192c:	f4ff af34 	bcc.w	8001798 <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_NAND_Erase_Block+0x20>
 8001966:	2302      	movs	r3, #2
 8001968:	e092      	b.n	8001a90 <HAL_NAND_Erase_Block+0x146>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d101      	bne.n	8001982 <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	e086      	b.n	8001a90 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d103      	bne.n	8001992 <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 800198a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e002      	b.n	8001998 <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001996:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	2260      	movs	r2, #96	; 0x60
 80019a8:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	4619      	mov	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	4618      	mov	r0, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	fb03 f300 	mul.w	r3, r3, r0
 80019c4:	440b      	add	r3, r1
 80019c6:	b2d9      	uxtb	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	fb11 f303 	smulbb	r3, r1, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80019da:	4413      	add	r3, r2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	889b      	ldrh	r3, [r3, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	4618      	mov	r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	fb03 f300 	mul.w	r3, r3, r0
 80019fa:	4413      	add	r3, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	440b      	add	r3, r1
 8001a06:	0a1a      	lsrs	r2, r3, #8
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	885b      	ldrh	r3, [r3, #2]
 8001a22:	4618      	mov	r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	fb03 f300 	mul.w	r3, r3, r0
 8001a2c:	4413      	add	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	440b      	add	r3, r1
 8001a38:	0c1a      	lsrs	r2, r3, #16
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	22d0      	movs	r2, #208	; 0xd0
 8001a4c:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a56:	f7ff f9a9 	bl	8000dac <HAL_GetTick>
 8001a5a:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001a5c:	e00d      	b.n	8001a7a <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8001a5e:	f7ff f9a5 	bl	8000dac <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d905      	bls.n	8001a7a <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00a      	b.n	8001a90 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f80c 	bl	8001a98 <HAL_NAND_Read_Status>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d1eb      	bne.n	8001a5e <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d103      	bne.n	8001ab8 <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8001ab0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e002      	b.n	8001abe <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001abc:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	2270      	movs	r2, #112	; 0x70
 8001ac6:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	e000      	b.n	8001aee <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e22d      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d075      	beq.n	8001c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1a:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d00c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b32:	4b9d      	ldr	r3, [pc, #628]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x108>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e208      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x74>
 8001b62:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a90      	ldr	r2, [pc, #576]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a8a      	ldr	r2, [pc, #552]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a87      	ldr	r2, [pc, #540]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f8fa 	bl	8000dac <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f8f6 	bl	8000dac <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1cd      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xc0>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8e6 	bl	8000dac <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f8e2 	bl	8000dac <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1b9      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0xe8>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x152>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e18d      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4952      	ldr	r1, [pc, #328]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x2b0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f89b 	bl	8000dac <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f897 	bl	8000dac <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e16e      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4940      	ldr	r1, [pc, #256]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCC_OscConfig+0x2b0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f87a 	bl	8000dac <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f876 	bl	8000dac <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e14d      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d030      	beq.n	8001d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d016      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_RCC_OscConfig+0x2b4>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f85a 	bl	8000dac <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f856 	bl	8000dac <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e12d      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x200>
 8001d1a:	e015      	b.n	8001d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_OscConfig+0x2b4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f843 	bl	8000dac <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff f83f 	bl	8000dac <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e116      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a0 	beq.w	8001e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x2b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_RCC_OscConfig+0x2b8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_RCC_OscConfig+0x2b8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f805 	bl	8000dac <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e011      	b.n	8001dca <HAL_RCC_OscConfig+0x2ce>
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470000 	.word	0x42470000
 8001db0:	42470e80 	.word	0x42470e80
 8001db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe fff8 	bl	8000dac <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0cf      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x478>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d106      	bne.n	8001dec <HAL_RCC_OscConfig+0x2f0>
 8001dde:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x312>
 8001df4:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a5f      	ldr	r2, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a5c      	ldr	r2, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x32a>
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a59      	ldr	r2, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ffbd 	bl	8000dac <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7fe ffb9 	bl	8000dac <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e08e      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x33a>
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe ffa7 	bl	8000dac <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe ffa3 	bl	8000dac <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e078      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d064      	beq.n	8001f68 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d05c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d141      	bne.n	8001f36 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCC_OscConfig+0x480>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ff78 	bl	8000dac <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ff74 	bl	8000dac <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04b      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	491d      	ldr	r1, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_OscConfig+0x480>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe ff4d 	bl	8000dac <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe ff49 	bl	8000dac <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e020      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x41a>
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_OscConfig+0x480>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff36 	bl	8000dac <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff32 	bl	8000dac <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e009      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_RCC_OscConfig+0x47c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x448>
 8001f62:	e001      	b.n	8001f68 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	42470060 	.word	0x42470060

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ca      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d90c      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b6      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a51      	ldr	r2, [pc, #324]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494c      	ldr	r1, [pc, #304]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d044      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d119      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07d      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06d      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e065      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4933      	ldr	r1, [pc, #204]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe fe9c 	bl	8000dac <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe fe98 	bl	8000dac <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04d      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCC_ClockConfig+0x1b4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e030      	b.n	800212a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4915      	ldr	r1, [pc, #84]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490d      	ldr	r1, [pc, #52]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f81d 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 800210a:	4601      	mov	r1, r0
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	fa21 f303 	lsr.w	r3, r1, r3
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002122:	2000      	movs	r0, #0
 8002124:	f7fe fdfe 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	08002b50 	.word	0x08002b50
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d007      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x32>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d008      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x38>
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 808d 	bne.w	800228a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002172:	60bb      	str	r3, [r7, #8]
       break;
 8002174:	e08c      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002176:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002178:	60bb      	str	r3, [r7, #8]
      break;
 800217a:	e089      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002184:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002186:	4b45      	ldr	r3, [pc, #276]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d023      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	f04f 0400 	mov.w	r4, #0
 800219c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	ea03 0501 	and.w	r5, r3, r1
 80021a8:	ea04 0602 	and.w	r6, r4, r2
 80021ac:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ae:	fb02 f106 	mul.w	r1, r2, r6
 80021b2:	2200      	movs	r2, #0
 80021b4:	fb02 f205 	mul.w	r2, r2, r5
 80021b8:	440a      	add	r2, r1
 80021ba:	493a      	ldr	r1, [pc, #232]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021bc:	fba5 0101 	umull	r0, r1, r5, r1
 80021c0:	1853      	adds	r3, r2, r1
 80021c2:	4619      	mov	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	f7fe f815 	bl	80001fc <__aeabi_uldivmod>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e049      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	f04f 0400 	mov.w	r4, #0
 80021e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	ea03 0501 	and.w	r5, r3, r1
 80021f0:	ea04 0602 	and.w	r6, r4, r2
 80021f4:	4629      	mov	r1, r5
 80021f6:	4632      	mov	r2, r6
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	0154      	lsls	r4, r2, #5
 8002202:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002206:	014b      	lsls	r3, r1, #5
 8002208:	4619      	mov	r1, r3
 800220a:	4622      	mov	r2, r4
 800220c:	1b49      	subs	r1, r1, r5
 800220e:	eb62 0206 	sbc.w	r2, r2, r6
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	0194      	lsls	r4, r2, #6
 800221c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002220:	018b      	lsls	r3, r1, #6
 8002222:	1a5b      	subs	r3, r3, r1
 8002224:	eb64 0402 	sbc.w	r4, r4, r2
 8002228:	f04f 0100 	mov.w	r1, #0
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	00e2      	lsls	r2, r4, #3
 8002232:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002236:	00d9      	lsls	r1, r3, #3
 8002238:	460b      	mov	r3, r1
 800223a:	4614      	mov	r4, r2
 800223c:	195b      	adds	r3, r3, r5
 800223e:	eb44 0406 	adc.w	r4, r4, r6
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	02a2      	lsls	r2, r4, #10
 800224c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002250:	0299      	lsls	r1, r3, #10
 8002252:	460b      	mov	r3, r1
 8002254:	4614      	mov	r4, r2
 8002256:	4618      	mov	r0, r3
 8002258:	4621      	mov	r1, r4
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	f7fd ffca 	bl	80001fc <__aeabi_uldivmod>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_GetSysClockFreq+0x158>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	3301      	adds	r3, #1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	60bb      	str	r3, [r7, #8]
      break;
 8002288:	e002      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800228c:	60bb      	str	r3, [r7, #8]
      break;
 800228e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002290:	68bb      	ldr	r3, [r7, #8]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	017d7840 	.word	0x017d7840

080022a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022c4:	f7ff fff0 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022c8:	4601      	mov	r1, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0a9b      	lsrs	r3, r3, #10
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	08002b60 	.word	0x08002b60

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022ec:	f7ff ffdc 	bl	80022a8 <HAL_RCC_GetHCLKFreq>
 80022f0:	4601      	mov	r1, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0b5b      	lsrs	r3, r3, #13
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	08002b60 	.word	0x08002b60

08002310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e03f      	b.n	80023a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe fba6 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f90b 	bl	8002570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af02      	add	r7, sp, #8
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	f040 8083 	bne.w	80024d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_UART_Transmit+0x2e>
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07b      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Transmit+0x40>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e074      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2221      	movs	r2, #33	; 0x21
 80023fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002400:	f7fe fcd4 	bl	8000dac <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002412:	e042      	b.n	800249a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242a:	d122      	bne.n	8002472 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2200      	movs	r2, #0
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f850 	bl	80024dc <UART_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e046      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002458:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3302      	adds	r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	e017      	b.n	800249a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	e013      	b.n	800249a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f82d 	bl	80024dc <UART_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e023      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1b7      	bne.n	8002414 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2140      	movs	r1, #64	; 0x40
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f814 	bl	80024dc <UART_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e00a      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ec:	e02c      	b.n	8002548 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d028      	beq.n	8002548 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0x30>
 80024fc:	f7fe fc56 	bl	8000dac <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	429a      	cmp	r2, r3
 800250a:	d21d      	bcs.n	8002548 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800251a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e00f      	b.n	8002568 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	429a      	cmp	r2, r3
 8002564:	d0c3      	beq.n	80024ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025b0:	f023 030c 	bic.w	r3, r3, #12
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	430b      	orrs	r3, r1
 80025bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	f040 80e4 	bne.w	80027a8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4aab      	ldr	r2, [pc, #684]	; (8002894 <UART_SetConfig+0x324>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <UART_SetConfig+0x84>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4aaa      	ldr	r2, [pc, #680]	; (8002898 <UART_SetConfig+0x328>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d16c      	bne.n	80026ce <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025f4:	f7ff fe78 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	441a      	add	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4aa3      	ldr	r2, [pc, #652]	; (800289c <UART_SetConfig+0x32c>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	011c      	lsls	r4, r3, #4
 8002618:	f7ff fe66 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 800261c:	4602      	mov	r2, r0
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	441a      	add	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002632:	f7ff fe59 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002636:	4602      	mov	r2, r0
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4a93      	ldr	r2, [pc, #588]	; (800289c <UART_SetConfig+0x32c>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2264      	movs	r2, #100	; 0x64
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	1aeb      	subs	r3, r5, r3
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	3332      	adds	r3, #50	; 0x32
 8002660:	4a8e      	ldr	r2, [pc, #568]	; (800289c <UART_SetConfig+0x32c>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800266e:	441c      	add	r4, r3
 8002670:	f7ff fe3a 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002674:	4602      	mov	r2, r0
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009a      	lsls	r2, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb2 f5f3 	udiv	r5, r2, r3
 800268a:	f7ff fe2d 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 800268e:	4602      	mov	r2, r0
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	4a7d      	ldr	r2, [pc, #500]	; (800289c <UART_SetConfig+0x32c>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2264      	movs	r2, #100	; 0x64
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	1aeb      	subs	r3, r5, r3
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	4a78      	ldr	r2, [pc, #480]	; (800289c <UART_SetConfig+0x32c>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 0207 	and.w	r2, r3, #7
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4422      	add	r2, r4
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e154      	b.n	8002978 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026ce:	f7ff fdf7 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009a      	lsls	r2, r3, #2
 80026dc:	441a      	add	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	4a6c      	ldr	r2, [pc, #432]	; (800289c <UART_SetConfig+0x32c>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	011c      	lsls	r4, r3, #4
 80026f2:	f7ff fde5 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fbb2 f5f3 	udiv	r5, r2, r3
 800270c:	f7ff fdd8 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 8002710:	4602      	mov	r2, r0
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009a      	lsls	r2, r3, #2
 800271a:	441a      	add	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4a5d      	ldr	r2, [pc, #372]	; (800289c <UART_SetConfig+0x32c>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	2264      	movs	r2, #100	; 0x64
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	1aeb      	subs	r3, r5, r3
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	3332      	adds	r3, #50	; 0x32
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <UART_SetConfig+0x32c>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002748:	441c      	add	r4, r3
 800274a:	f7ff fdb9 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 800274e:	4602      	mov	r2, r0
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	009a      	lsls	r2, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fbb2 f5f3 	udiv	r5, r2, r3
 8002764:	f7ff fdac 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 8002768:	4602      	mov	r2, r0
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009a      	lsls	r2, r3, #2
 8002772:	441a      	add	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4a47      	ldr	r2, [pc, #284]	; (800289c <UART_SetConfig+0x32c>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	2264      	movs	r2, #100	; 0x64
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	1aeb      	subs	r3, r5, r3
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	3332      	adds	r3, #50	; 0x32
 8002792:	4a42      	ldr	r2, [pc, #264]	; (800289c <UART_SetConfig+0x32c>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	f003 0207 	and.w	r2, r3, #7
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4422      	add	r2, r4
 80027a4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80027a6:	e0e7      	b.n	8002978 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <UART_SetConfig+0x324>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <UART_SetConfig+0x24c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a38      	ldr	r2, [pc, #224]	; (8002898 <UART_SetConfig+0x328>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d171      	bne.n	80028a0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027bc:	f7ff fd94 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4a31      	ldr	r2, [pc, #196]	; (800289c <UART_SetConfig+0x32c>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	011c      	lsls	r4, r3, #4
 80027e0:	f7ff fd82 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80027fa:	f7ff fd75 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	4a21      	ldr	r2, [pc, #132]	; (800289c <UART_SetConfig+0x32c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2264      	movs	r2, #100	; 0x64
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	1aeb      	subs	r3, r5, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <UART_SetConfig+0x32c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	441c      	add	r4, r3
 8002836:	f7ff fd57 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 800283a:	4602      	mov	r2, r0
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002850:	f7ff fd4a 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002854:	4602      	mov	r2, r0
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <UART_SetConfig+0x32c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2264      	movs	r2, #100	; 0x64
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	1aeb      	subs	r3, r5, r3
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	3332      	adds	r3, #50	; 0x32
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <UART_SetConfig+0x32c>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 020f 	and.w	r2, r3, #15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4422      	add	r2, r4
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	e071      	b.n	8002978 <UART_SetConfig+0x408>
 8002894:	40011000 	.word	0x40011000
 8002898:	40011400 	.word	0x40011400
 800289c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028a0:	f7ff fd0e 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009a      	lsls	r2, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <UART_SetConfig+0x410>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	011c      	lsls	r4, r3, #4
 80028c4:	f7ff fcfc 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	fbb2 f5f3 	udiv	r5, r2, r3
 80028de:	f7ff fcef 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	441a      	add	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	4a21      	ldr	r2, [pc, #132]	; (8002980 <UART_SetConfig+0x410>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2264      	movs	r2, #100	; 0x64
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	1aeb      	subs	r3, r5, r3
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	3332      	adds	r3, #50	; 0x32
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <UART_SetConfig+0x410>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002918:	441c      	add	r4, r3
 800291a:	f7ff fcd1 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 800291e:	4602      	mov	r2, r0
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f5f3 	udiv	r5, r2, r3
 8002934:	f7ff fcc4 	bl	80022c0 <HAL_RCC_GetPCLK1Freq>
 8002938:	4602      	mov	r2, r0
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009a      	lsls	r2, r3, #2
 8002942:	441a      	add	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <UART_SetConfig+0x410>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	2264      	movs	r2, #100	; 0x64
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	1aeb      	subs	r3, r5, r3
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	3332      	adds	r3, #50	; 0x32
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <UART_SetConfig+0x410>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4422      	add	r2, r4
 8002974:	609a      	str	r2, [r3, #8]
}
 8002976:	e7ff      	b.n	8002978 <UART_SetConfig+0x408>
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));   

  if(Init->NandBank == FMC_NAND_BANK2)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b10      	cmp	r3, #16
 8002998:	d103      	bne.n	80029a2 <FMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e002      	b.n	80029a8 <FMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FMC_PCR2_PWAITEN  | FMC_PCR2_PBKEN | FMC_PCR2_PTYP | \
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <FMC_NAND_Init+0x80>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
                       FMC_PCR2_PWID | FMC_PCR2_ECCEN | FMC_PCR2_TCLR | \
                       FMC_PCR2_TAR | FMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
                     Init->MemoryDataWidth             |\
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
 80029b8:	431a      	orrs	r2, r3
                     Init->EccComputation              |\
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth             |\
 80029be:	431a      	orrs	r2, r3
                     Init->ECCPageSize                 |\
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation              |\
 80029c4:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)     |\
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                 |\
 80029cc:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FMC_NAND_BANK2)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d103      	bne.n	80029f0 <FMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <FMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0

}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	fff00181 	.word	0xfff00181

08002a08 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d103      	bne.n	8002a26 <FMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e002      	b.n	8002a2c <FMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PMEM2_MEMSET2  | FMC_PMEM2_MEMWAIT2 | FMC_PMEM2_MEMHOLD2 | \
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
                       FMC_PMEM2_MEMHIZ2)); 
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a3a:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002a42:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002a4a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FMC_NAND_BANK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d103      	bne.n	8002a60 <FMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	e002      	b.n	8002a66 <FMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d103      	bne.n	8002a92 <FMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e002      	b.n	8002a98 <FMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PATT2_ATTSET2  | FMC_PATT2_ATTWAIT2 | FMC_PATT2_ATTHOLD2 | \
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
                       FMC_PATT2_ATTHIZ2));
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002aa6:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002aae:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002ab6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
                       
  if(Bank == FMC_NAND_BANK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d103      	bne.n	8002acc <FMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	e002      	b.n	8002ad2 <FMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	4e0d      	ldr	r6, [pc, #52]	; (8002b18 <__libc_init_array+0x38>)
 8002ae4:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae6:	1ba4      	subs	r4, r4, r6
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	2500      	movs	r5, #0
 8002aec:	42a5      	cmp	r5, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	4e0b      	ldr	r6, [pc, #44]	; (8002b20 <__libc_init_array+0x40>)
 8002af2:	4c0c      	ldr	r4, [pc, #48]	; (8002b24 <__libc_init_array+0x44>)
 8002af4:	f000 f820 	bl	8002b38 <_init>
 8002af8:	1ba4      	subs	r4, r4, r6
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	2500      	movs	r5, #0
 8002afe:	42a5      	cmp	r5, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b08:	4798      	blx	r3
 8002b0a:	3501      	adds	r5, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b12:	4798      	blx	r3
 8002b14:	3501      	adds	r5, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08002b70 	.word	0x08002b70
 8002b1c:	08002b70 	.word	0x08002b70
 8002b20:	08002b70 	.word	0x08002b70
 8002b24:	08002b74 	.word	0x08002b74

08002b28 <memset>:
 8002b28:	4402      	add	r2, r0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <_init>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

08002b44 <_fini>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr
