
UartTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b48  08003b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b50  08003b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002114  20000070  08003bc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002184  08003bc8  00022184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000985f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d7  00000000  00000000  000298ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002ba88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e9b  00000000  00000000  0002c260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007854  00000000  00000000  000500fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5862  00000000  00000000  0005794f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d1b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  0012d22c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003a5c 	.word	0x08003a5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003a5c 	.word	0x08003a5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <_write>:
static void MX_FMC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
/* write function override to use printf */
int _write(int file, char *data, int len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, len, 1000);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <_write+0x34>)
 80005a8:	f001 fef9 	bl	800239e <HAL_UART_Transmit>
 80005ac:	4603      	mov	r3, r0
 80005ae:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? len : 0);
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <_write+0x2a>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	e000      	b.n	80005bc <_write+0x2c>
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <NandControllerInitAndTest>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Nand config initialization and program disturb logic*/
int NandControllerInitAndTest(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
    //NAND_AddressTypedef Address;

    /*##-1- Configure the NAND device ###############################*/
    //
    /* NAND device configuration */
    NAND_ComTiming.SetupTime = 0xf1;
 80005ce:	4b6f      	ldr	r3, [pc, #444]	; (800078c <NandControllerInitAndTest+0x1c4>)
 80005d0:	22f1      	movs	r2, #241	; 0xf1
 80005d2:	601a      	str	r2, [r3, #0]
    NAND_ComTiming.WaitSetupTime = 0xf2;
 80005d4:	4b6d      	ldr	r3, [pc, #436]	; (800078c <NandControllerInitAndTest+0x1c4>)
 80005d6:	22f2      	movs	r2, #242	; 0xf2
 80005d8:	605a      	str	r2, [r3, #4]
    NAND_ComTiming.HoldSetupTime = 0xf3;
 80005da:	4b6c      	ldr	r3, [pc, #432]	; (800078c <NandControllerInitAndTest+0x1c4>)
 80005dc:	22f3      	movs	r2, #243	; 0xf3
 80005de:	609a      	str	r2, [r3, #8]
    NAND_ComTiming.HiZSetupTime = 0xf1;
 80005e0:	4b6a      	ldr	r3, [pc, #424]	; (800078c <NandControllerInitAndTest+0x1c4>)
 80005e2:	22f1      	movs	r2, #241	; 0xf1
 80005e4:	60da      	str	r2, [r3, #12]
    NAND_AttTiming.SetupTime = 0xf1;
 80005e6:	4b6a      	ldr	r3, [pc, #424]	; (8000790 <NandControllerInitAndTest+0x1c8>)
 80005e8:	22f1      	movs	r2, #241	; 0xf1
 80005ea:	601a      	str	r2, [r3, #0]
    NAND_AttTiming.WaitSetupTime = 0xf2;
 80005ec:	4b68      	ldr	r3, [pc, #416]	; (8000790 <NandControllerInitAndTest+0x1c8>)
 80005ee:	22f2      	movs	r2, #242	; 0xf2
 80005f0:	605a      	str	r2, [r3, #4]
    NAND_AttTiming.HoldSetupTime = 0xf3;
 80005f2:	4b67      	ldr	r3, [pc, #412]	; (8000790 <NandControllerInitAndTest+0x1c8>)
 80005f4:	22f3      	movs	r2, #243	; 0xf3
 80005f6:	609a      	str	r2, [r3, #8]
    NAND_AttTiming.HiZSetupTime = 0xf1;
 80005f8:	4b65      	ldr	r3, [pc, #404]	; (8000790 <NandControllerInitAndTest+0x1c8>)
 80005fa:	22f1      	movs	r2, #241	; 0xf1
 80005fc:	60da      	str	r2, [r3, #12]

    hNAND.Init.NandBank = FMC_NAND_BANK2;
 80005fe:	4b65      	ldr	r3, [pc, #404]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
    hNAND.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000604:	4b63      	ldr	r3, [pc, #396]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000606:	2202      	movs	r2, #2
 8000608:	609a      	str	r2, [r3, #8]

    hNAND.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800060a:	4b62      	ldr	r3, [pc, #392]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
    hNAND.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
    hNAND.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8000616:	4b5f      	ldr	r3, [pc, #380]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800061c:	615a      	str	r2, [r3, #20]
    hNAND.Init.TCLRSetupTime = 0x0;
 800061e:	4b5d      	ldr	r3, [pc, #372]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
    hNAND.Init.TARSetupTime = 0x0;
 8000624:	4b5b      	ldr	r3, [pc, #364]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
    hNAND.Config.BlockNbr = 0x400;
 800062a:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 800062c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
    hNAND.Config.BlockSize = 0x40;
 8000632:	4b58      	ldr	r3, [pc, #352]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
    hNAND.Config.PageSize = 0x800;
 8000638:	4b56      	ldr	r3, [pc, #344]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 800063a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
    hNAND.Config.PlaneNbr = 0x01;
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000642:	2201      	movs	r2, #1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
    hNAND.Config.PlaneSize = 0x400;
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
    hNAND.Config.SpareAreaSize = 0x40;
 800064e:	4b51      	ldr	r3, [pc, #324]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	629a      	str	r2, [r3, #40]	; 0x28

    /* NAND controller initialization */
    if(HAL_NAND_Init(&hNAND, &NAND_ComTiming, &NAND_AttTiming) != HAL_OK)
 8000654:	4a4e      	ldr	r2, [pc, #312]	; (8000790 <NandControllerInitAndTest+0x1c8>)
 8000656:	494d      	ldr	r1, [pc, #308]	; (800078c <NandControllerInitAndTest+0x1c4>)
 8000658:	484e      	ldr	r0, [pc, #312]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 800065a:	f000 fed9 	bl	8001410 <HAL_NAND_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <NandControllerInitAndTest+0xa0>
    {
        return NAND_STATUS_INIT_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	e08d      	b.n	8000784 <NandControllerInitAndTest+0x1bc>
    }

    NAND_AddressTypedef Address_BLOCK_0;
    NAND_AddressTypedef ReadAddress;

    Address_BLOCK_0.Page = PAGE_2;
 8000668:	2302      	movs	r3, #2
 800066a:	813b      	strh	r3, [r7, #8]
    Address_BLOCK_0.Plane = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	817b      	strh	r3, [r7, #10]
    Address_BLOCK_0.Block = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	81bb      	strh	r3, [r7, #12]

    ReadAddress.Block = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	80bb      	strh	r3, [r7, #4]
    ReadAddress.Plane = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	807b      	strh	r3, [r7, #2]


    /* Send NAND erase block operation */
    if (HAL_NAND_Erase_Block(&hNAND, &Address_BLOCK_0) != HAL_OK)
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4619      	mov	r1, r3
 8000682:	4844      	ldr	r0, [pc, #272]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 8000684:	f001 f95b 	bl	800193e <HAL_NAND_Erase_Block>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <NandControllerInitAndTest+0xca>
    {
        return NAND_STATUS_ERASE_ERROR;
 800068e:	2303      	movs	r3, #3
 8000690:	e078      	b.n	8000784 <NandControllerInitAndTest+0x1bc>
    }

    /* Load the buffer with AA */
    for(int i=0; i<BUFFER_SIZE; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	e007      	b.n	80006a8 <NandControllerInitAndTest+0xe0>
    {
        aTxBuffer[i] = 0XAA;
 8000698:	4a3f      	ldr	r2, [pc, #252]	; (8000798 <NandControllerInitAndTest+0x1d0>)
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	4413      	add	r3, r2
 800069e:	22aa      	movs	r2, #170	; 0xaa
 80006a0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<BUFFER_SIZE; i++)
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a4:	3301      	adds	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ae:	d3f3      	bcc.n	8000698 <NandControllerInitAndTest+0xd0>
    }

    /* program page2  recursively for 10000 iterations with aTxBuffer*/
    for(int i = 0; i < 10000; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	e00e      	b.n	80006d4 <NandControllerInitAndTest+0x10c>
    {
	   if (HAL_NAND_Write_Page_8b(&hNAND, &Address_BLOCK_0, aTxBuffer, 1) != HAL_OK)
 80006b6:	f107 0108 	add.w	r1, r7, #8
 80006ba:	2301      	movs	r3, #1
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <NandControllerInitAndTest+0x1d0>)
 80006be:	4835      	ldr	r0, [pc, #212]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 80006c0:	f001 f81a 	bl	80016f8 <HAL_NAND_Write_Page_8b>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <NandControllerInitAndTest+0x106>
	   {
			return NAND_STATUS_WRITE_ERROR;
 80006ca:	2304      	movs	r3, #4
 80006cc:	e05a      	b.n	8000784 <NandControllerInitAndTest+0x1bc>
    for(int i = 0; i < 10000; i++)
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	3301      	adds	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006da:	4293      	cmp	r3, r2
 80006dc:	ddeb      	ble.n	80006b6 <NandControllerInitAndTest+0xee>
	   }
    }
    /* read pages 1 to 3 to observe bit flips*/
    for(int p = 1; p<=3; p++)
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	e04b      	b.n	800077c <NandControllerInitAndTest+0x1b4>
	{
    	// set page address
		ReadAddress.Page = p;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	803b      	strh	r3, [r7, #0]
		//read operation for a page and load read data to aRxBuffer
		if (HAL_NAND_Read_Page_8b(&hNAND, &ReadAddress, aRxBuffer, 1) != HAL_OK){
 80006ea:	4639      	mov	r1, r7
 80006ec:	2301      	movs	r3, #1
 80006ee:	4a2b      	ldr	r2, [pc, #172]	; (800079c <NandControllerInitAndTest+0x1d4>)
 80006f0:	4828      	ldr	r0, [pc, #160]	; (8000794 <NandControllerInitAndTest+0x1cc>)
 80006f2:	f000 fedb 	bl	80014ac <HAL_NAND_Read_Page_8b>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <NandControllerInitAndTest+0x138>
			return NAND_STATUS_READ_ERROR;
 80006fc:	2305      	movs	r3, #5
 80006fe:	e041      	b.n	8000784 <NandControllerInitAndTest+0x1bc>
		}
		// iterate the read buffer for a page and compare with erase state to see bit flips
		int j = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<BUFFER_SIZE; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e011      	b.n	800072e <NandControllerInitAndTest+0x166>
		{
			if(aRxBuffer[i]==0XFF)
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <NandControllerInitAndTest+0x1d4>)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d108      	bne.n	8000728 <NandControllerInitAndTest+0x160>
			{
				stableBytes[j] = i;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	b299      	uxth	r1, r3
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <NandControllerInitAndTest+0x1d8>)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				j++;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	3301      	adds	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<BUFFER_SIZE; i++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000734:	d3e9      	bcc.n	800070a <NandControllerInitAndTest+0x142>
			}
		}
		printf("Stable Bits: in page: %d\n", p);
 8000736:	69f9      	ldr	r1, [r7, #28]
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <NandControllerInitAndTest+0x1dc>)
 800073a:	f002 f9fd 	bl	8002b38 <iprintf>
		printf("{");
 800073e:	207b      	movs	r0, #123	; 0x7b
 8000740:	f002 fa12 	bl	8002b68 <putchar>
		for(int i =0; i<j; i++)
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	e00a      	b.n	8000760 <NandControllerInitAndTest+0x198>
		{
			printf("%d,", stableBytes[i]);
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <NandControllerInitAndTest+0x1d8>)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000752:	4619      	mov	r1, r3
 8000754:	4814      	ldr	r0, [pc, #80]	; (80007a8 <NandControllerInitAndTest+0x1e0>)
 8000756:	f002 f9ef 	bl	8002b38 <iprintf>
		for(int i =0; i<j; i++)
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	3301      	adds	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbf0      	blt.n	800074a <NandControllerInitAndTest+0x182>
		}
		printf("}\n");
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <NandControllerInitAndTest+0x1e4>)
 800076a:	f002 fa6d 	bl	8002c48 <puts>
		HAL_Delay(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000772:	f000 fb9b 	bl	8000eac <HAL_Delay>
    for(int p = 1; p<=3; p++)
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3301      	adds	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	2b03      	cmp	r3, #3
 8000780:	ddb0      	ble.n	80006e4 <NandControllerInitAndTest+0x11c>
	}

    return NAND_STATUS_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000010c 	.word	0x2000010c
 8000790:	2000011c 	.word	0x2000011c
 8000794:	200000cc 	.word	0x200000cc
 8000798:	2000012c 	.word	0x2000012c
 800079c:	2000092c 	.word	0x2000092c
 80007a0:	2000112c 	.word	0x2000112c
 80007a4:	08003a74 	.word	0x08003a74
 80007a8:	08003a90 	.word	0x08003a90
 80007ac:	08003a94 	.word	0x08003a94

080007b0 <main>:
/* USER CODE END 0 */

int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    HAL_Init();
 80007b4:	f000 fb08 	bl	8000dc8 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80007b8:	f000 f80a 	bl	80007d0 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80007bc:	f000 f8f4 	bl	80009a8 <MX_GPIO_Init>
    MX_FMC_Init();
 80007c0:	f000 f890 	bl	80008e4 <MX_FMC_Init>
    MX_USART1_UART_Init();
 80007c4:	f000 f864 	bl	8000890 <MX_USART1_UART_Init>

    NandControllerInitAndTest();
 80007c8:	f7ff fefe 	bl	80005c8 <NandControllerInitAndTest>
    while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x1c>
	...

080007d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f9a2 	bl	8002b28 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xb8>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <SystemClock_Config+0xb8>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <SystemClock_Config+0xb8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <SystemClock_Config+0xbc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <SystemClock_Config+0xbc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <SystemClock_Config+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f953 	bl	8001af0 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000850:	f000 f8e0 	bl	8000a14 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fb80 	bl	8001f74 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xae>
    {
        Error_Handler();
 800087a:	f000 f8cb 	bl	8000a14 <Error_Handler>
    }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f001 fd1c 	bl	8002304 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80008d2:	f000 f89f 	bl	8000a14 <Error_Handler>
    }
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	40011000 	.word	0x40011000

080008e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0

    FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
    FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]


    /** Perform the NAND1 memory initialization sequence
     */
    hnand1.Instance = FMC_NAND_DEVICE;
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000906:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <MX_FMC_Init+0xc0>)
 8000908:	601a      	str	r2, [r3, #0]
    hnand1.Init.NandBank = FMC_NAND_BANK2;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_FMC_Init+0xbc>)
 800090c:	2210      	movs	r2, #16
 800090e:	605a      	str	r2, [r3, #4]
    hnand1.Init.Waitfeature = FMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000912:	2202      	movs	r2, #2
 8000914:	609a      	str	r2, [r3, #8]
    hnand1.Init.MemoryDataWidth = FMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
    hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_FMC_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
    hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
    hnand1.Init.TCLRSetupTime = 0;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_FMC_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
    hnand1.Init.TARSetupTime = 0;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
    /* hnand1.Config */
    hnand1.Config.PageSize = 0;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
    hnand1.Config.SpareAreaSize = 0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_FMC_Init+0xbc>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
    hnand1.Config.BlockSize = 0;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
    hnand1.Config.BlockNbr = 0;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
    hnand1.Config.PlaneNbr = 0;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_FMC_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
    hnand1.Config.PlaneSize = 0;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_FMC_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	639a      	str	r2, [r3, #56]	; 0x38
    hnand1.Config.ExtraCommandEnable = DISABLE;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_FMC_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* ComSpaceTiming */
    ComSpaceTiming.SetupTime = 252;
 8000960:	23fc      	movs	r3, #252	; 0xfc
 8000962:	613b      	str	r3, [r7, #16]
    ComSpaceTiming.WaitSetupTime = 252;
 8000964:	23fc      	movs	r3, #252	; 0xfc
 8000966:	617b      	str	r3, [r7, #20]
    ComSpaceTiming.HoldSetupTime = 252;
 8000968:	23fc      	movs	r3, #252	; 0xfc
 800096a:	61bb      	str	r3, [r7, #24]
    ComSpaceTiming.HiZSetupTime = 252;
 800096c:	23fc      	movs	r3, #252	; 0xfc
 800096e:	61fb      	str	r3, [r7, #28]
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = 252;
 8000970:	23fc      	movs	r3, #252	; 0xfc
 8000972:	603b      	str	r3, [r7, #0]
    AttSpaceTiming.WaitSetupTime = 252;
 8000974:	23fc      	movs	r3, #252	; 0xfc
 8000976:	607b      	str	r3, [r7, #4]
    AttSpaceTiming.HoldSetupTime = 252;
 8000978:	23fc      	movs	r3, #252	; 0xfc
 800097a:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.HiZSetupTime = 252;
 800097c:	23fc      	movs	r3, #252	; 0xfc
 800097e:	60fb      	str	r3, [r7, #12]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000980:	463a      	mov	r2, r7
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_FMC_Init+0xbc>)
 800098a:	f000 fd41 	bl	8001410 <HAL_NAND_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_FMC_Init+0xb4>
    {
        Error_Handler( );
 8000994:	f000 f83e 	bl	8000a14 <Error_Handler>
    }
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000213c 	.word	0x2000213c
 80009a4:	a0000060 	.word	0xa0000060

080009a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12c      	bne.n	8000af0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0x8c>)
 8000aec:	f000 fae6 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_FMC_MspInit+0x88>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d131      	bne.n	8000b84 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_FMC_MspInit+0x88>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_FMC_MspInit+0x8c>)
 8000b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <HAL_FMC_MspInit+0x8c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6393      	str	r3, [r2, #56]	; 0x38
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_FMC_MspInit+0x8c>)
 8000b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD6   ------> FMC_NWAIT
  PD7   ------> FMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b42:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <HAL_FMC_MspInit+0x90>)
 8000b5e:	f000 faad 	bl	80010bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
 8000b62:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8000b66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b74:	230c      	movs	r3, #12
 8000b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_FMC_MspInit+0x94>)
 8000b7e:	f000 fa9d 	bl	80010bc <HAL_GPIO_Init>
 8000b82:	e000      	b.n	8000b86 <HAL_FMC_MspInit+0x82>
    return;
 8000b84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000212c 	.word	0x2000212c
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8000ba4:	f7ff ffae 	bl	8000b04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f932 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_isatty>:

int _isatty(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x50>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x16>
		heap_end = &end;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <_sbrk+0x50>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <_sbrk+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <_sbrk+0x50>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <_sbrk+0x50>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d907      	bls.n	8000cea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cda:	f001 fefb 	bl	8002ad4 <__errno>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	e006      	b.n	8000cf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_sbrk+0x50>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <_sbrk+0x50>)
 8000cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20002130 	.word	0x20002130
 8000d04:	20002188 	.word	0x20002188

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SystemInit+0x60>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <SystemInit+0x60>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <SystemInit+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <SystemInit+0x64>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <SystemInit+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <SystemInit+0x64>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <SystemInit+0x64>)
 8000d34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <SystemInit+0x64>)
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <SystemInit+0x68>)
 8000d42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <SystemInit+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <SystemInit+0x64>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x60>)
 8000d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	24003010 	.word	0x24003010

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr  r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d94:	f842 3b04 	str.w	r3, [r2], #4

08000d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffb3 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f001 fe9d 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fd03 	bl	80007b0 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000db0:	08003b58 	.word	0x08003b58
  ldr  r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dbc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dc0:	20002184 	.word	0x20002184

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f92f 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fe12 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f939 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f90f 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	2000217c 	.word	0x2000217c

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000217c 	.word	0x2000217c

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_Delay+0x40>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff5c 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb0 	bl	8001010 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e177      	b.n	80013c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8166 	bne.w	80013c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x4a>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d123      	bne.n	800114e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	69b9      	ldr	r1, [r7, #24]
 800114a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0203 	and.w	r2, r3, #3
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00b      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	2b11      	cmp	r3, #17
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80c0 	beq.w	80013c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a64      	ldr	r2, [pc, #400]	; (80013dc <HAL_GPIO_Init+0x320>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b62      	ldr	r3, [pc, #392]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <HAL_GPIO_Init+0x324>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d031      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x334>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a53      	ldr	r2, [pc, #332]	; (80013f4 <HAL_GPIO_Init+0x338>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x222>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e012      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e010      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x324>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_GPIO_Init+0x350>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_GPIO_Init+0x350>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_GPIO_Init+0x350>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_GPIO_Init+0x350>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x350>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_GPIO_Init+0x350>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae84 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40022000 	.word	0x40022000
 8001408:	40022400 	.word	0x40022400
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e03e      	b.n	80014a4 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff fbae 	bl	8000b9c <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3304      	adds	r3, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f001 fa94 	bl	8002978 <FMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	461a      	mov	r2, r3
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	f001 face 	bl	80029fc <FMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	461a      	mov	r2, r3
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f001 fafc 	bl	8002a68 <FMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d108      	bne.n	800148a <HAL_NAND_Init+0x7a>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0204 	orr.w	r2, r2, #4
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e007      	b.n	800149a <HAL_NAND_Init+0x8a>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_NAND_Read_Page_8b+0x34>
 80014dc:	2302      	movs	r3, #2
 80014de:	e107      	b.n	80016f0 <HAL_NAND_Read_Page_8b+0x244>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d101      	bne.n	80014f8 <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
 80014f6:	e0fb      	b.n	80016f0 <HAL_NAND_Read_Page_8b+0x244>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d103      	bne.n	8001508 <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8001500:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	e002      	b.n	800150e <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	4618      	mov	r0, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	fb03 f300 	mul.w	r3, r3, r0
 8001530:	4413      	add	r3, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	440b      	add	r3, r1
 800153c:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800153e:	e0c1      	b.n	80016c4 <HAL_NAND_Read_Page_8b+0x218>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	3301      	adds	r3, #1
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d835      	bhi.n	80015ce <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d212      	bcs.n	800159a <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	0a1a      	lsrs	r2, r3, #8
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e058      	b.n	800164c <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	0a1a      	lsrs	r2, r3, #8
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	0c1a      	lsrs	r2, r3, #16
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	e03e      	b.n	800164c <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015de:	d217      	bcs.n	8001610 <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	0a1a      	lsrs	r2, r3, #8
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e01d      	b.n	800164c <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	0a1a      	lsrs	r2, r3, #8
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	0c1a      	lsrs	r2, r3, #16
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	2230      	movs	r2, #48	; 0x30
 8001654:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d124      	bne.n	80016aa <HAL_NAND_Read_Page_8b+0x1fe>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc18 	bl	8000e94 <HAL_GetTick>
 8001664:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001666:	e009      	b.n	800167c <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8001668:	f7ff fc14 	bl	8000e94 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001676:	d901      	bls.n	800167c <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 8001678:	2303      	movs	r3, #3
 800167a:	e039      	b.n	80016f0 <HAL_NAND_Read_Page_8b+0x244>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fa05 	bl	8001a8c <HAL_NAND_Read_Status>
 8001682:	4603      	mov	r3, r0
 8001684:	2b40      	cmp	r3, #64	; 0x40
 8001686:	d1ef      	bne.n	8001668 <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001692:	f3bf 8f4f 	dsb	sy
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 8001696:	e008      	b.n	80016aa <HAL_NAND_Read_Page_8b+0x1fe>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	1c59      	adds	r1, r3, #1
 800169e:	6079      	str	r1, [r7, #4]
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	3301      	adds	r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8f2      	bhi.n	8001698 <HAL_NAND_Read_Page_8b+0x1ec>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	3301      	adds	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_NAND_Read_Page_8b+0x232>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f4ff af31 	bcc.w	8001540 <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_NAND_Write_Page_8b+0x34>
 8001728:	2302      	movs	r3, #2
 800172a:	e104      	b.n	8001936 <HAL_NAND_Write_Page_8b+0x23e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d101      	bne.n	8001744 <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	e0f8      	b.n	8001936 <HAL_NAND_Write_Page_8b+0x23e>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d103      	bne.n	8001754 <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 800174c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	e002      	b.n	800175a <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	889b      	ldrh	r3, [r3, #4]
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	885b      	ldrh	r3, [r3, #2]
 8001772:	4618      	mov	r0, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001778:	fb03 f300 	mul.w	r3, r3, r0
 800177c:	4413      	add	r3, r2
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	440b      	add	r3, r1
 8001788:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800178a:	e0be      	b.n	800190a <HAL_NAND_Write_Page_8b+0x212>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	3301      	adds	r3, #1
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b6:	d835      	bhi.n	8001824 <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d212      	bcs.n	80017f0 <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	0a1a      	lsrs	r2, r3, #8
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e066      	b.n	80018be <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	0a1a      	lsrs	r2, r3, #8
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	0c1a      	lsrs	r2, r3, #16
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e04c      	b.n	80018be <HAL_NAND_Write_Page_8b+0x1c6>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d217      	bcs.n	8001866 <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	0a1a      	lsrs	r2, r3, #8
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e02b      	b.n	80018be <HAL_NAND_Write_Page_8b+0x1c6>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	0a1a      	lsrs	r2, r3, #8
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	f3bf 8f4f 	dsb	sy
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	0c1a      	lsrs	r2, r3, #16
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	f3bf 8f4f 	dsb	sy
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 80018aa:	e008      	b.n	80018be <HAL_NAND_Write_Page_8b+0x1c6>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	3301      	adds	r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d8f2      	bhi.n	80018ac <HAL_NAND_Write_Page_8b+0x1b4>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	2210      	movs	r2, #16
 80018ce:	701a      	strb	r2, [r3, #0]
    
    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80018d0:	e00c      	b.n	80018ec <HAL_NAND_Write_Page_8b+0x1f4>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fadf 	bl	8000e94 <HAL_GetTick>
 80018d6:	61b8      	str	r0, [r7, #24]
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 80018d8:	f7ff fadc 	bl	8000e94 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e6:	d901      	bls.n	80018ec <HAL_NAND_Write_Page_8b+0x1f4>
      {
        return HAL_TIMEOUT; 
 80018e8:	2303      	movs	r3, #3
 80018ea:	e024      	b.n	8001936 <HAL_NAND_Write_Page_8b+0x23e>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f8cd 	bl	8001a8c <HAL_NAND_Read_Status>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b40      	cmp	r3, #64	; 0x40
 80018f6:	d1ec      	bne.n	80018d2 <HAL_NAND_Write_Page_8b+0x1da>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	3301      	adds	r3, #1
 80018fc:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <HAL_NAND_Write_Page_8b+0x22c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	429a      	cmp	r2, r3
 8001920:	f4ff af34 	bcc.w	800178c <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_NAND_Erase_Block+0x20>
 800195a:	2302      	movs	r3, #2
 800195c:	e092      	b.n	8001a84 <HAL_NAND_Erase_Block+0x146>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d101      	bne.n	8001976 <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	e086      	b.n	8001a84 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b10      	cmp	r3, #16
 800197c:	d103      	bne.n	8001986 <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 800197e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e002      	b.n	800198c <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800198a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	2260      	movs	r2, #96	; 0x60
 800199c:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	4619      	mov	r1, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	4618      	mov	r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	fb03 f300 	mul.w	r3, r3, r0
 80019b8:	440b      	add	r3, r1
 80019ba:	b2d9      	uxtb	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	fb11 f303 	smulbb	r3, r1, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80019ce:	4413      	add	r3, r2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	889b      	ldrh	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	885b      	ldrh	r3, [r3, #2]
 80019e4:	4618      	mov	r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	fb03 f300 	mul.w	r3, r3, r0
 80019ee:	4413      	add	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	440b      	add	r3, r1
 80019fa:	0a1a      	lsrs	r2, r3, #8
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	461a      	mov	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	885b      	ldrh	r3, [r3, #2]
 8001a16:	4618      	mov	r0, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	fb03 f300 	mul.w	r3, r3, r0
 8001a20:	4413      	add	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	0c1a      	lsrs	r2, r3, #16
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	22d0      	movs	r2, #208	; 0xd0
 8001a40:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4a:	f7ff fa23 	bl	8000e94 <HAL_GetTick>
 8001a4e:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001a50:	e00d      	b.n	8001a6e <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8001a52:	f7ff fa1f 	bl	8000e94 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d905      	bls.n	8001a6e <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e00a      	b.n	8001a84 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f80c 	bl	8001a8c <HAL_NAND_Read_Status>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	d1eb      	bne.n	8001a52 <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d103      	bne.n	8001aac <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8001aa4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e002      	b.n	8001ab2 <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ab0:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	2270      	movs	r2, #112	; 0x70
 8001aba:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e007      	b.n	8001ae2 <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8001adc:	2340      	movs	r3, #64	; 0x40
 8001ade:	e000      	b.n	8001ae2 <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e22d      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d00c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d112      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4b9d      	ldr	r3, [pc, #628]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b99      	ldr	r3, [pc, #612]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e208      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8a      	ldr	r2, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f974 	bl	8000e94 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f970 	bl	8000e94 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1cd      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f960 	bl	8000e94 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f95c 	bl	8000e94 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1b9      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d063      	beq.n	8001cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e18d      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4952      	ldr	r1, [pc, #328]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e03a      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f915 	bl	8000e94 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f911 	bl	8000e94 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e16e      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4940      	ldr	r1, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f8f4 	bl	8000e94 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f8f0 	bl	8000e94 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e14d      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d030      	beq.n	8001d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x2b4>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f8d4 	bl	8000e94 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f8d0 	bl	8000e94 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e12d      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x2b4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f8bd 	bl	8000e94 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f8b9 	bl	8000e94 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e116      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a0 	beq.w	8001e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f87f 	bl	8000e94 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e011      	b.n	8001dbe <HAL_RCC_OscConfig+0x2ce>
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
 8001da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7ff f872 	bl	8000e94 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0cf      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
 8001dd2:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e01c      	b.n	8001e1a <HAL_RCC_OscConfig+0x32a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001de8:	4b60      	ldr	r3, [pc, #384]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a5f      	ldr	r2, [pc, #380]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x32a>
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a59      	ldr	r2, [pc, #356]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f837 	bl	8000e94 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff f833 	bl	8000e94 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e08e      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCC_OscConfig+0x33a>
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f821 	bl	8000e94 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f81d 	bl	8000e94 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e078      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d064      	beq.n	8001f5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d05c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d141      	bne.n	8001f2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_RCC_OscConfig+0x480>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7fe fff2 	bl	8000e94 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe ffee 	bl	8000e94 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04b      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	491d      	ldr	r1, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_RCC_OscConfig+0x480>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe ffc7 	bl	8000e94 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7fe ffc3 	bl	8000e94 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e020      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x41a>
 8001f28:	e018      	b.n	8001f5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x480>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe ffb0 	bl	8000e94 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe ffac 	bl	8000e94 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_OscConfig+0x47c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x448>
 8001f56:	e001      	b.n	8001f5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	42470060 	.word	0x42470060

08001f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0ca      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d90c      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b64      	ldr	r3, [pc, #400]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b6      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494c      	ldr	r1, [pc, #304]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d044      	beq.n	8002094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d119      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07d      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	2b03      	cmp	r3, #3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06d      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e065      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4933      	ldr	r1, [pc, #204]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7fe ff16 	bl	8000e94 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe ff12 	bl	8000e94 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e04d      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d20c      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e030      	b.n	800211e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4915      	ldr	r1, [pc, #84]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490d      	ldr	r1, [pc, #52]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f81d 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020fe:	4601      	mov	r1, r0
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	fa21 f303 	lsr.w	r3, r1, r3
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fe78 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	08003a98 	.word	0x08003a98
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214e:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d007      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x32>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d008      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x38>
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 808d 	bne.w	800227e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002166:	60bb      	str	r3, [r7, #8]
       break;
 8002168:	e08c      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 800216c:	60bb      	str	r3, [r7, #8]
      break;
 800216e:	e089      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217a:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	ea03 0501 	and.w	r5, r3, r1
 800219c:	ea04 0602 	and.w	r6, r4, r2
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 80021a2:	fb02 f106 	mul.w	r1, r2, r6
 80021a6:	2200      	movs	r2, #0
 80021a8:	fb02 f205 	mul.w	r2, r2, r5
 80021ac:	440a      	add	r2, r1
 80021ae:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 80021b0:	fba5 0101 	umull	r0, r1, r5, r1
 80021b4:	1853      	adds	r3, r2, r1
 80021b6:	4619      	mov	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	461a      	mov	r2, r3
 80021c0:	4623      	mov	r3, r4
 80021c2:	f7fe f865 	bl	8000290 <__aeabi_uldivmod>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e049      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	ea03 0501 	and.w	r5, r3, r1
 80021e4:	ea04 0602 	and.w	r6, r4, r2
 80021e8:	4629      	mov	r1, r5
 80021ea:	4632      	mov	r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0154      	lsls	r4, r2, #5
 80021f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fa:	014b      	lsls	r3, r1, #5
 80021fc:	4619      	mov	r1, r3
 80021fe:	4622      	mov	r2, r4
 8002200:	1b49      	subs	r1, r1, r5
 8002202:	eb62 0206 	sbc.w	r2, r2, r6
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0194      	lsls	r4, r2, #6
 8002210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002214:	018b      	lsls	r3, r1, #6
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	eb64 0402 	sbc.w	r4, r4, r2
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	00e2      	lsls	r2, r4, #3
 8002226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222a:	00d9      	lsls	r1, r3, #3
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	195b      	adds	r3, r3, r5
 8002232:	eb44 0406 	adc.w	r4, r4, r6
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	02a2      	lsls	r2, r4, #10
 8002240:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002244:	0299      	lsls	r1, r3, #10
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	4618      	mov	r0, r3
 800224c:	4621      	mov	r1, r4
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	f7fe f81a 	bl	8000290 <__aeabi_uldivmod>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	3301      	adds	r3, #1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	60bb      	str	r3, [r7, #8]
      break;
 800227c:	e002      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002280:	60bb      	str	r3, [r7, #8]
      break;
 8002282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002284:	68bb      	ldr	r3, [r7, #8]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	017d7840 	.word	0x017d7840

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000

080022b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b8:	f7ff fff0 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08003aa8 	.word	0x08003aa8

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff ffdc 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e4:	4601      	mov	r1, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	08003aa8 	.word	0x08003aa8

08002304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e03f      	b.n	8002396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fba2 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f90b 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800235c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800236c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800237c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af02      	add	r7, sp, #8
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 8083 	bne.w	80024c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit+0x2e>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07b      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_UART_Transmit+0x40>
 80023da:	2302      	movs	r3, #2
 80023dc:	e074      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2221      	movs	r2, #33	; 0x21
 80023f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fd4e 	bl	8000e94 <HAL_GetTick>
 80023f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002406:	e042      	b.n	800248e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241e:	d122      	bne.n	8002466 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f850 	bl	80024d0 <UART_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e046      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800244c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3302      	adds	r3, #2
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	e017      	b.n	800248e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3301      	adds	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	e013      	b.n	800248e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f82d 	bl	80024d0 <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e023      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	60ba      	str	r2, [r7, #8]
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1b7      	bne.n	8002408 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2200      	movs	r2, #0
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f814 	bl	80024d0 <UART_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e00a      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e0:	e02c      	b.n	800253c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d028      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f0:	f7fe fcd0 	bl	8000e94 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d21d      	bcs.n	800253c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800250e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e00f      	b.n	800255c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d0c3      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025a4:	f023 030c 	bic.w	r3, r3, #12
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	f040 80e4 	bne.w	800279c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4aab      	ldr	r2, [pc, #684]	; (8002888 <UART_SetConfig+0x324>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <UART_SetConfig+0x84>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4aaa      	ldr	r2, [pc, #680]	; (800288c <UART_SetConfig+0x328>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d16c      	bne.n	80026c2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025e8:	f7ff fe78 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4aa3      	ldr	r2, [pc, #652]	; (8002890 <UART_SetConfig+0x32c>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	011c      	lsls	r4, r3, #4
 800260c:	f7ff fe66 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002610:	4602      	mov	r2, r0
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb2 f5f3 	udiv	r5, r2, r3
 8002626:	f7ff fe59 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 800262a:	4602      	mov	r2, r0
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	4a93      	ldr	r2, [pc, #588]	; (8002890 <UART_SetConfig+0x32c>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2264      	movs	r2, #100	; 0x64
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	1aeb      	subs	r3, r5, r3
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	3332      	adds	r3, #50	; 0x32
 8002654:	4a8e      	ldr	r2, [pc, #568]	; (8002890 <UART_SetConfig+0x32c>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002662:	441c      	add	r4, r3
 8002664:	f7ff fe3a 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002668:	4602      	mov	r2, r0
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	441a      	add	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fbb2 f5f3 	udiv	r5, r2, r3
 800267e:	f7ff fe2d 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002682:	4602      	mov	r2, r0
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	4a7d      	ldr	r2, [pc, #500]	; (8002890 <UART_SetConfig+0x32c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2264      	movs	r2, #100	; 0x64
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	1aeb      	subs	r3, r5, r3
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	3332      	adds	r3, #50	; 0x32
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <UART_SetConfig+0x32c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	f003 0207 	and.w	r2, r3, #7
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4422      	add	r2, r4
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e154      	b.n	800296c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026c2:	f7ff fdf7 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <UART_SetConfig+0x32c>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	011c      	lsls	r4, r3, #4
 80026e6:	f7ff fde5 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009a      	lsls	r2, r3, #2
 80026f4:	441a      	add	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002700:	f7ff fdd8 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002704:	4602      	mov	r2, r0
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	009a      	lsls	r2, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	4a5d      	ldr	r2, [pc, #372]	; (8002890 <UART_SetConfig+0x32c>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	2264      	movs	r2, #100	; 0x64
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	1aeb      	subs	r3, r5, r3
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	3332      	adds	r3, #50	; 0x32
 800272e:	4a58      	ldr	r2, [pc, #352]	; (8002890 <UART_SetConfig+0x32c>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800273c:	441c      	add	r4, r3
 800273e:	f7ff fdb9 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002742:	4602      	mov	r2, r0
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fbb2 f5f3 	udiv	r5, r2, r3
 8002758:	f7ff fdac 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 800275c:	4602      	mov	r2, r0
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	4a47      	ldr	r2, [pc, #284]	; (8002890 <UART_SetConfig+0x32c>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2264      	movs	r2, #100	; 0x64
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	1aeb      	subs	r3, r5, r3
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	3332      	adds	r3, #50	; 0x32
 8002786:	4a42      	ldr	r2, [pc, #264]	; (8002890 <UART_SetConfig+0x32c>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	f003 0207 	and.w	r2, r3, #7
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4422      	add	r2, r4
 8002798:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800279a:	e0e7      	b.n	800296c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a39      	ldr	r2, [pc, #228]	; (8002888 <UART_SetConfig+0x324>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <UART_SetConfig+0x24c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a38      	ldr	r2, [pc, #224]	; (800288c <UART_SetConfig+0x328>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d171      	bne.n	8002894 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027b0:	f7ff fd94 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4a31      	ldr	r2, [pc, #196]	; (8002890 <UART_SetConfig+0x32c>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	011c      	lsls	r4, r3, #4
 80027d4:	f7ff fd82 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009a      	lsls	r2, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80027ee:	f7ff fd75 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <UART_SetConfig+0x32c>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2264      	movs	r2, #100	; 0x64
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	1aeb      	subs	r3, r5, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <UART_SetConfig+0x32c>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	441c      	add	r4, r3
 800282a:	f7ff fd57 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 800282e:	4602      	mov	r2, r0
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009a      	lsls	r2, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fbb2 f5f3 	udiv	r5, r2, r3
 8002844:	f7ff fd4a 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002848:	4602      	mov	r2, r0
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009a      	lsls	r2, r3, #2
 8002852:	441a      	add	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <UART_SetConfig+0x32c>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2264      	movs	r2, #100	; 0x64
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	1aeb      	subs	r3, r5, r3
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <UART_SetConfig+0x32c>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 020f 	and.w	r2, r3, #15
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4422      	add	r2, r4
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	e071      	b.n	800296c <UART_SetConfig+0x408>
 8002888:	40011000 	.word	0x40011000
 800288c:	40011400 	.word	0x40011400
 8002890:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002894:	f7ff fd0e 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002898:	4602      	mov	r2, r0
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009a      	lsls	r2, r3, #2
 80028a2:	441a      	add	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4a31      	ldr	r2, [pc, #196]	; (8002974 <UART_SetConfig+0x410>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	011c      	lsls	r4, r3, #4
 80028b8:	f7ff fcfc 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80028d2:	f7ff fcef 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <UART_SetConfig+0x410>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2264      	movs	r2, #100	; 0x64
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	1aeb      	subs	r3, r5, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <UART_SetConfig+0x410>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	441c      	add	r4, r3
 800290e:	f7ff fcd1 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002912:	4602      	mov	r2, r0
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fbb2 f5f3 	udiv	r5, r2, r3
 8002928:	f7ff fcc4 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 800292c:	4602      	mov	r2, r0
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009a      	lsls	r2, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <UART_SetConfig+0x410>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	1aeb      	subs	r3, r5, r3
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	3332      	adds	r3, #50	; 0x32
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <UART_SetConfig+0x410>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	f003 020f 	and.w	r2, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4422      	add	r2, r4
 8002968:	609a      	str	r2, [r3, #8]
}
 800296a:	e7ff      	b.n	800296c <UART_SetConfig+0x408>
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bdb0      	pop	{r4, r5, r7, pc}
 8002974:	51eb851f 	.word	0x51eb851f

08002978 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));   

  if(Init->NandBank == FMC_NAND_BANK2)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b10      	cmp	r3, #16
 800298c:	d103      	bne.n	8002996 <FMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e002      	b.n	800299c <FMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FMC_PCR2_PWAITEN  | FMC_PCR2_PBKEN | FMC_PCR2_PTYP | \
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <FMC_NAND_Init+0x80>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
                       FMC_PCR2_PWID | FMC_PCR2_ECCEN | FMC_PCR2_TCLR | \
                       FMC_PCR2_TAR | FMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
                     Init->MemoryDataWidth             |\
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
                     FMC_PCR_MEMORY_TYPE_NAND          |\
 80029ac:	431a      	orrs	r2, r3
                     Init->EccComputation              |\
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth             |\
 80029b2:	431a      	orrs	r2, r3
                     Init->ECCPageSize                 |\
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation              |\
 80029b8:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)     |\
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                 |\
 80029c0:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                 |\
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FMC_NAND_BANK2)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d103      	bne.n	80029e4 <FMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e002      	b.n	80029ea <FMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0

}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	fff00181 	.word	0xfff00181

080029fc <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d103      	bne.n	8002a1a <FMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e002      	b.n	8002a20 <FMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PMEM2_MEMSET2  | FMC_PMEM2_MEMWAIT2 | FMC_PMEM2_MEMHOLD2 | \
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
                       FMC_PMEM2_MEMHIZ2)); 
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a2e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8002a36:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8002a3e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FMC_NAND_BANK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d103      	bne.n	8002a54 <FMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	e002      	b.n	8002a5a <FMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FMC_NAND_BANK(Bank));
  
  if(Bank == FMC_NAND_BANK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d103      	bne.n	8002a86 <FMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e002      	b.n	8002a8c <FMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FMC_PATT2_ATTSET2  | FMC_PATT2_ATTWAIT2 | FMC_PATT2_ATTHOLD2 | \
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
                       FMC_PATT2_ATTHIZ2));
  
  /* Set FMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002a9a:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)      |\
 8002aa2:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)     |\
 8002aaa:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                  |\
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
                       
  if(Bank == FMC_NAND_BANK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d103      	bne.n	8002ac0 <FMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	e002      	b.n	8002ac6 <FMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	4e0d      	ldr	r6, [pc, #52]	; (8002b18 <__libc_init_array+0x38>)
 8002ae4:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae6:	1ba4      	subs	r4, r4, r6
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	2500      	movs	r5, #0
 8002aec:	42a5      	cmp	r5, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	4e0b      	ldr	r6, [pc, #44]	; (8002b20 <__libc_init_array+0x40>)
 8002af2:	4c0c      	ldr	r4, [pc, #48]	; (8002b24 <__libc_init_array+0x44>)
 8002af4:	f000 ffb2 	bl	8003a5c <_init>
 8002af8:	1ba4      	subs	r4, r4, r6
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	2500      	movs	r5, #0
 8002afe:	42a5      	cmp	r5, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b08:	4798      	blx	r3
 8002b0a:	3501      	adds	r5, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b12:	4798      	blx	r3
 8002b14:	3501      	adds	r5, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08003b50 	.word	0x08003b50
 8002b1c:	08003b50 	.word	0x08003b50
 8002b20:	08003b50 	.word	0x08003b50
 8002b24:	08003b54 	.word	0x08003b54

08002b28 <memset>:
 8002b28:	4402      	add	r2, r0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <iprintf>:
 8002b38:	b40f      	push	{r0, r1, r2, r3}
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <iprintf+0x2c>)
 8002b3c:	b513      	push	{r0, r1, r4, lr}
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	b124      	cbz	r4, 8002b4c <iprintf+0x14>
 8002b42:	69a3      	ldr	r3, [r4, #24]
 8002b44:	b913      	cbnz	r3, 8002b4c <iprintf+0x14>
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 fa36 	bl	8002fb8 <__sinit>
 8002b4c:	ab05      	add	r3, sp, #20
 8002b4e:	9a04      	ldr	r2, [sp, #16]
 8002b50:	68a1      	ldr	r1, [r4, #8]
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	4620      	mov	r0, r4
 8002b56:	f000 fbef 	bl	8003338 <_vfiprintf_r>
 8002b5a:	b002      	add	sp, #8
 8002b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b60:	b004      	add	sp, #16
 8002b62:	4770      	bx	lr
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <putchar>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <putchar+0x24>)
 8002b6c:	681c      	ldr	r4, [r3, #0]
 8002b6e:	4605      	mov	r5, r0
 8002b70:	b124      	cbz	r4, 8002b7c <putchar+0x14>
 8002b72:	69a3      	ldr	r3, [r4, #24]
 8002b74:	b913      	cbnz	r3, 8002b7c <putchar+0x14>
 8002b76:	4620      	mov	r0, r4
 8002b78:	f000 fa1e 	bl	8002fb8 <__sinit>
 8002b7c:	68a2      	ldr	r2, [r4, #8]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	4620      	mov	r0, r4
 8002b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b86:	f000 be75 	b.w	8003874 <_putc_r>
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <_puts_r>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	460e      	mov	r6, r1
 8002b94:	4605      	mov	r5, r0
 8002b96:	b118      	cbz	r0, 8002ba0 <_puts_r+0x10>
 8002b98:	6983      	ldr	r3, [r0, #24]
 8002b9a:	b90b      	cbnz	r3, 8002ba0 <_puts_r+0x10>
 8002b9c:	f000 fa0c 	bl	8002fb8 <__sinit>
 8002ba0:	69ab      	ldr	r3, [r5, #24]
 8002ba2:	68ac      	ldr	r4, [r5, #8]
 8002ba4:	b913      	cbnz	r3, 8002bac <_puts_r+0x1c>
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f000 fa06 	bl	8002fb8 <__sinit>
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <_puts_r+0xac>)
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	d117      	bne.n	8002be2 <_puts_r+0x52>
 8002bb2:	686c      	ldr	r4, [r5, #4]
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	071b      	lsls	r3, r3, #28
 8002bb8:	d51d      	bpl.n	8002bf6 <_puts_r+0x66>
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	b1db      	cbz	r3, 8002bf6 <_puts_r+0x66>
 8002bbe:	3e01      	subs	r6, #1
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60a3      	str	r3, [r4, #8]
 8002bca:	b9e9      	cbnz	r1, 8002c08 <_puts_r+0x78>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da2e      	bge.n	8002c2e <_puts_r+0x9e>
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	210a      	movs	r1, #10
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f000 f83f 	bl	8002c58 <__swbuf_r>
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d011      	beq.n	8002c02 <_puts_r+0x72>
 8002bde:	200a      	movs	r0, #10
 8002be0:	e011      	b.n	8002c06 <_puts_r+0x76>
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <_puts_r+0xb0>)
 8002be4:	429c      	cmp	r4, r3
 8002be6:	d101      	bne.n	8002bec <_puts_r+0x5c>
 8002be8:	68ac      	ldr	r4, [r5, #8]
 8002bea:	e7e3      	b.n	8002bb4 <_puts_r+0x24>
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <_puts_r+0xb4>)
 8002bee:	429c      	cmp	r4, r3
 8002bf0:	bf08      	it	eq
 8002bf2:	68ec      	ldreq	r4, [r5, #12]
 8002bf4:	e7de      	b.n	8002bb4 <_puts_r+0x24>
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f000 f87f 	bl	8002cfc <__swsetup_r>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0dd      	beq.n	8002bbe <_puts_r+0x2e>
 8002c02:	f04f 30ff 	mov.w	r0, #4294967295
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da04      	bge.n	8002c16 <_puts_r+0x86>
 8002c0c:	69a2      	ldr	r2, [r4, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dc06      	bgt.n	8002c20 <_puts_r+0x90>
 8002c12:	290a      	cmp	r1, #10
 8002c14:	d004      	beq.n	8002c20 <_puts_r+0x90>
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	6022      	str	r2, [r4, #0]
 8002c1c:	7019      	strb	r1, [r3, #0]
 8002c1e:	e7cf      	b.n	8002bc0 <_puts_r+0x30>
 8002c20:	4622      	mov	r2, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f818 	bl	8002c58 <__swbuf_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d1c9      	bne.n	8002bc0 <_puts_r+0x30>
 8002c2c:	e7e9      	b.n	8002c02 <_puts_r+0x72>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	200a      	movs	r0, #10
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	6022      	str	r2, [r4, #0]
 8002c36:	7018      	strb	r0, [r3, #0]
 8002c38:	e7e5      	b.n	8002c06 <_puts_r+0x76>
 8002c3a:	bf00      	nop
 8002c3c:	08003ad4 	.word	0x08003ad4
 8002c40:	08003af4 	.word	0x08003af4
 8002c44:	08003ab4 	.word	0x08003ab4

08002c48 <puts>:
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <puts+0xc>)
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	f7ff bf9f 	b.w	8002b90 <_puts_r>
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <__swbuf_r>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	460e      	mov	r6, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	4605      	mov	r5, r0
 8002c60:	b118      	cbz	r0, 8002c6a <__swbuf_r+0x12>
 8002c62:	6983      	ldr	r3, [r0, #24]
 8002c64:	b90b      	cbnz	r3, 8002c6a <__swbuf_r+0x12>
 8002c66:	f000 f9a7 	bl	8002fb8 <__sinit>
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <__swbuf_r+0x98>)
 8002c6c:	429c      	cmp	r4, r3
 8002c6e:	d12a      	bne.n	8002cc6 <__swbuf_r+0x6e>
 8002c70:	686c      	ldr	r4, [r5, #4]
 8002c72:	69a3      	ldr	r3, [r4, #24]
 8002c74:	60a3      	str	r3, [r4, #8]
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	071a      	lsls	r2, r3, #28
 8002c7a:	d52e      	bpl.n	8002cda <__swbuf_r+0x82>
 8002c7c:	6923      	ldr	r3, [r4, #16]
 8002c7e:	b363      	cbz	r3, 8002cda <__swbuf_r+0x82>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	1ac0      	subs	r0, r0, r3
 8002c86:	6963      	ldr	r3, [r4, #20]
 8002c88:	b2f6      	uxtb	r6, r6
 8002c8a:	4283      	cmp	r3, r0
 8002c8c:	4637      	mov	r7, r6
 8002c8e:	dc04      	bgt.n	8002c9a <__swbuf_r+0x42>
 8002c90:	4621      	mov	r1, r4
 8002c92:	4628      	mov	r0, r5
 8002c94:	f000 f926 	bl	8002ee4 <_fflush_r>
 8002c98:	bb28      	cbnz	r0, 8002ce6 <__swbuf_r+0x8e>
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60a3      	str	r3, [r4, #8]
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	701e      	strb	r6, [r3, #0]
 8002ca8:	6963      	ldr	r3, [r4, #20]
 8002caa:	3001      	adds	r0, #1
 8002cac:	4283      	cmp	r3, r0
 8002cae:	d004      	beq.n	8002cba <__swbuf_r+0x62>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	07db      	lsls	r3, r3, #31
 8002cb4:	d519      	bpl.n	8002cea <__swbuf_r+0x92>
 8002cb6:	2e0a      	cmp	r6, #10
 8002cb8:	d117      	bne.n	8002cea <__swbuf_r+0x92>
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 f911 	bl	8002ee4 <_fflush_r>
 8002cc2:	b190      	cbz	r0, 8002cea <__swbuf_r+0x92>
 8002cc4:	e00f      	b.n	8002ce6 <__swbuf_r+0x8e>
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <__swbuf_r+0x9c>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d101      	bne.n	8002cd0 <__swbuf_r+0x78>
 8002ccc:	68ac      	ldr	r4, [r5, #8]
 8002cce:	e7d0      	b.n	8002c72 <__swbuf_r+0x1a>
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <__swbuf_r+0xa0>)
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	bf08      	it	eq
 8002cd6:	68ec      	ldreq	r4, [r5, #12]
 8002cd8:	e7cb      	b.n	8002c72 <__swbuf_r+0x1a>
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f000 f80d 	bl	8002cfc <__swsetup_r>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d0cc      	beq.n	8002c80 <__swbuf_r+0x28>
 8002ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8002cea:	4638      	mov	r0, r7
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08003ad4 	.word	0x08003ad4
 8002cf4:	08003af4 	.word	0x08003af4
 8002cf8:	08003ab4 	.word	0x08003ab4

08002cfc <__swsetup_r>:
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <__swsetup_r+0xcc>)
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	681d      	ldr	r5, [r3, #0]
 8002d02:	4606      	mov	r6, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	b125      	cbz	r5, 8002d12 <__swsetup_r+0x16>
 8002d08:	69ab      	ldr	r3, [r5, #24]
 8002d0a:	b913      	cbnz	r3, 8002d12 <__swsetup_r+0x16>
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f953 	bl	8002fb8 <__sinit>
 8002d12:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <__swsetup_r+0xd0>)
 8002d14:	429c      	cmp	r4, r3
 8002d16:	d10f      	bne.n	8002d38 <__swsetup_r+0x3c>
 8002d18:	686c      	ldr	r4, [r5, #4]
 8002d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	0715      	lsls	r5, r2, #28
 8002d22:	d42c      	bmi.n	8002d7e <__swsetup_r+0x82>
 8002d24:	06d0      	lsls	r0, r2, #27
 8002d26:	d411      	bmi.n	8002d4c <__swsetup_r+0x50>
 8002d28:	2209      	movs	r2, #9
 8002d2a:	6032      	str	r2, [r6, #0]
 8002d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	f04f 30ff 	mov.w	r0, #4294967295
 8002d36:	e03e      	b.n	8002db6 <__swsetup_r+0xba>
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <__swsetup_r+0xd4>)
 8002d3a:	429c      	cmp	r4, r3
 8002d3c:	d101      	bne.n	8002d42 <__swsetup_r+0x46>
 8002d3e:	68ac      	ldr	r4, [r5, #8]
 8002d40:	e7eb      	b.n	8002d1a <__swsetup_r+0x1e>
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <__swsetup_r+0xd8>)
 8002d44:	429c      	cmp	r4, r3
 8002d46:	bf08      	it	eq
 8002d48:	68ec      	ldreq	r4, [r5, #12]
 8002d4a:	e7e6      	b.n	8002d1a <__swsetup_r+0x1e>
 8002d4c:	0751      	lsls	r1, r2, #29
 8002d4e:	d512      	bpl.n	8002d76 <__swsetup_r+0x7a>
 8002d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d52:	b141      	cbz	r1, 8002d66 <__swsetup_r+0x6a>
 8002d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	d002      	beq.n	8002d62 <__swsetup_r+0x66>
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f000 fa19 	bl	8003194 <_free_r>
 8002d62:	2300      	movs	r3, #0
 8002d64:	6363      	str	r3, [r4, #52]	; 0x34
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d6c:	81a3      	strh	r3, [r4, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6063      	str	r3, [r4, #4]
 8002d72:	6923      	ldr	r3, [r4, #16]
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	b94b      	cbnz	r3, 8002d96 <__swsetup_r+0x9a>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d003      	beq.n	8002d96 <__swsetup_r+0x9a>
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 f9bf 	bl	8003114 <__smakebuf_r>
 8002d96:	89a2      	ldrh	r2, [r4, #12]
 8002d98:	f012 0301 	ands.w	r3, r2, #1
 8002d9c:	d00c      	beq.n	8002db8 <__swsetup_r+0xbc>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60a3      	str	r3, [r4, #8]
 8002da2:	6963      	ldr	r3, [r4, #20]
 8002da4:	425b      	negs	r3, r3
 8002da6:	61a3      	str	r3, [r4, #24]
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	b953      	cbnz	r3, 8002dc2 <__swsetup_r+0xc6>
 8002dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002db4:	d1ba      	bne.n	8002d2c <__swsetup_r+0x30>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	0792      	lsls	r2, r2, #30
 8002dba:	bf58      	it	pl
 8002dbc:	6963      	ldrpl	r3, [r4, #20]
 8002dbe:	60a3      	str	r3, [r4, #8]
 8002dc0:	e7f2      	b.n	8002da8 <__swsetup_r+0xac>
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	e7f7      	b.n	8002db6 <__swsetup_r+0xba>
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	08003ad4 	.word	0x08003ad4
 8002dd0:	08003af4 	.word	0x08003af4
 8002dd4:	08003ab4 	.word	0x08003ab4

08002dd8 <__sflush_r>:
 8002dd8:	898a      	ldrh	r2, [r1, #12]
 8002dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	4605      	mov	r5, r0
 8002de0:	0710      	lsls	r0, r2, #28
 8002de2:	460c      	mov	r4, r1
 8002de4:	d458      	bmi.n	8002e98 <__sflush_r+0xc0>
 8002de6:	684b      	ldr	r3, [r1, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dc05      	bgt.n	8002df8 <__sflush_r+0x20>
 8002dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dc02      	bgt.n	8002df8 <__sflush_r+0x20>
 8002df2:	2000      	movs	r0, #0
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	d0f9      	beq.n	8002df2 <__sflush_r+0x1a>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e04:	682f      	ldr	r7, [r5, #0]
 8002e06:	6a21      	ldr	r1, [r4, #32]
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	d032      	beq.n	8002e72 <__sflush_r+0x9a>
 8002e0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	075a      	lsls	r2, r3, #29
 8002e12:	d505      	bpl.n	8002e20 <__sflush_r+0x48>
 8002e14:	6863      	ldr	r3, [r4, #4]
 8002e16:	1ac0      	subs	r0, r0, r3
 8002e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e1a:	b10b      	cbz	r3, 8002e20 <__sflush_r+0x48>
 8002e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e1e:	1ac0      	subs	r0, r0, r3
 8002e20:	2300      	movs	r3, #0
 8002e22:	4602      	mov	r2, r0
 8002e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e26:	6a21      	ldr	r1, [r4, #32]
 8002e28:	4628      	mov	r0, r5
 8002e2a:	47b0      	blx	r6
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	d106      	bne.n	8002e40 <__sflush_r+0x68>
 8002e32:	6829      	ldr	r1, [r5, #0]
 8002e34:	291d      	cmp	r1, #29
 8002e36:	d848      	bhi.n	8002eca <__sflush_r+0xf2>
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <__sflush_r+0x108>)
 8002e3a:	40ca      	lsrs	r2, r1
 8002e3c:	07d6      	lsls	r6, r2, #31
 8002e3e:	d544      	bpl.n	8002eca <__sflush_r+0xf2>
 8002e40:	2200      	movs	r2, #0
 8002e42:	6062      	str	r2, [r4, #4]
 8002e44:	04d9      	lsls	r1, r3, #19
 8002e46:	6922      	ldr	r2, [r4, #16]
 8002e48:	6022      	str	r2, [r4, #0]
 8002e4a:	d504      	bpl.n	8002e56 <__sflush_r+0x7e>
 8002e4c:	1c42      	adds	r2, r0, #1
 8002e4e:	d101      	bne.n	8002e54 <__sflush_r+0x7c>
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	b903      	cbnz	r3, 8002e56 <__sflush_r+0x7e>
 8002e54:	6560      	str	r0, [r4, #84]	; 0x54
 8002e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e58:	602f      	str	r7, [r5, #0]
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	d0c9      	beq.n	8002df2 <__sflush_r+0x1a>
 8002e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e62:	4299      	cmp	r1, r3
 8002e64:	d002      	beq.n	8002e6c <__sflush_r+0x94>
 8002e66:	4628      	mov	r0, r5
 8002e68:	f000 f994 	bl	8003194 <_free_r>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	6360      	str	r0, [r4, #52]	; 0x34
 8002e70:	e7c0      	b.n	8002df4 <__sflush_r+0x1c>
 8002e72:	2301      	movs	r3, #1
 8002e74:	4628      	mov	r0, r5
 8002e76:	47b0      	blx	r6
 8002e78:	1c41      	adds	r1, r0, #1
 8002e7a:	d1c8      	bne.n	8002e0e <__sflush_r+0x36>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0c5      	beq.n	8002e0e <__sflush_r+0x36>
 8002e82:	2b1d      	cmp	r3, #29
 8002e84:	d001      	beq.n	8002e8a <__sflush_r+0xb2>
 8002e86:	2b16      	cmp	r3, #22
 8002e88:	d101      	bne.n	8002e8e <__sflush_r+0xb6>
 8002e8a:	602f      	str	r7, [r5, #0]
 8002e8c:	e7b1      	b.n	8002df2 <__sflush_r+0x1a>
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e94:	81a3      	strh	r3, [r4, #12]
 8002e96:	e7ad      	b.n	8002df4 <__sflush_r+0x1c>
 8002e98:	690f      	ldr	r7, [r1, #16]
 8002e9a:	2f00      	cmp	r7, #0
 8002e9c:	d0a9      	beq.n	8002df2 <__sflush_r+0x1a>
 8002e9e:	0793      	lsls	r3, r2, #30
 8002ea0:	680e      	ldr	r6, [r1, #0]
 8002ea2:	bf08      	it	eq
 8002ea4:	694b      	ldreq	r3, [r1, #20]
 8002ea6:	600f      	str	r7, [r1, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	2300      	movne	r3, #0
 8002eac:	eba6 0807 	sub.w	r8, r6, r7
 8002eb0:	608b      	str	r3, [r1, #8]
 8002eb2:	f1b8 0f00 	cmp.w	r8, #0
 8002eb6:	dd9c      	ble.n	8002df2 <__sflush_r+0x1a>
 8002eb8:	4643      	mov	r3, r8
 8002eba:	463a      	mov	r2, r7
 8002ebc:	6a21      	ldr	r1, [r4, #32]
 8002ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	47b0      	blx	r6
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	dc06      	bgt.n	8002ed6 <__sflush_r+0xfe>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ece:	81a3      	strh	r3, [r4, #12]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	e78e      	b.n	8002df4 <__sflush_r+0x1c>
 8002ed6:	4407      	add	r7, r0
 8002ed8:	eba8 0800 	sub.w	r8, r8, r0
 8002edc:	e7e9      	b.n	8002eb2 <__sflush_r+0xda>
 8002ede:	bf00      	nop
 8002ee0:	20400001 	.word	0x20400001

08002ee4 <_fflush_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	690b      	ldr	r3, [r1, #16]
 8002ee8:	4605      	mov	r5, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	b1db      	cbz	r3, 8002f26 <_fflush_r+0x42>
 8002eee:	b118      	cbz	r0, 8002ef8 <_fflush_r+0x14>
 8002ef0:	6983      	ldr	r3, [r0, #24]
 8002ef2:	b90b      	cbnz	r3, 8002ef8 <_fflush_r+0x14>
 8002ef4:	f000 f860 	bl	8002fb8 <__sinit>
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <_fflush_r+0x48>)
 8002efa:	429c      	cmp	r4, r3
 8002efc:	d109      	bne.n	8002f12 <_fflush_r+0x2e>
 8002efe:	686c      	ldr	r4, [r5, #4]
 8002f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f04:	b17b      	cbz	r3, 8002f26 <_fflush_r+0x42>
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f0e:	f7ff bf63 	b.w	8002dd8 <__sflush_r>
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <_fflush_r+0x4c>)
 8002f14:	429c      	cmp	r4, r3
 8002f16:	d101      	bne.n	8002f1c <_fflush_r+0x38>
 8002f18:	68ac      	ldr	r4, [r5, #8]
 8002f1a:	e7f1      	b.n	8002f00 <_fflush_r+0x1c>
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <_fflush_r+0x50>)
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	bf08      	it	eq
 8002f22:	68ec      	ldreq	r4, [r5, #12]
 8002f24:	e7ec      	b.n	8002f00 <_fflush_r+0x1c>
 8002f26:	2000      	movs	r0, #0
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08003ad4 	.word	0x08003ad4
 8002f30:	08003af4 	.word	0x08003af4
 8002f34:	08003ab4 	.word	0x08003ab4

08002f38 <std>:
 8002f38:	2300      	movs	r3, #0
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f42:	6083      	str	r3, [r0, #8]
 8002f44:	8181      	strh	r1, [r0, #12]
 8002f46:	6643      	str	r3, [r0, #100]	; 0x64
 8002f48:	81c2      	strh	r2, [r0, #14]
 8002f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f4e:	6183      	str	r3, [r0, #24]
 8002f50:	4619      	mov	r1, r3
 8002f52:	2208      	movs	r2, #8
 8002f54:	305c      	adds	r0, #92	; 0x5c
 8002f56:	f7ff fde7 	bl	8002b28 <memset>
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <std+0x38>)
 8002f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <std+0x3c>)
 8002f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <std+0x40>)
 8002f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <std+0x44>)
 8002f68:	6224      	str	r4, [r4, #32]
 8002f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	08003901 	.word	0x08003901
 8002f74:	08003923 	.word	0x08003923
 8002f78:	0800395b 	.word	0x0800395b
 8002f7c:	0800397f 	.word	0x0800397f

08002f80 <_cleanup_r>:
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <_cleanup_r+0x8>)
 8002f82:	f000 b885 	b.w	8003090 <_fwalk_reent>
 8002f86:	bf00      	nop
 8002f88:	08002ee5 	.word	0x08002ee5

08002f8c <__sfmoreglue>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	1e4a      	subs	r2, r1, #1
 8002f90:	2568      	movs	r5, #104	; 0x68
 8002f92:	4355      	muls	r5, r2
 8002f94:	460e      	mov	r6, r1
 8002f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f9a:	f000 f949 	bl	8003230 <_malloc_r>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	b140      	cbz	r0, 8002fb4 <__sfmoreglue+0x28>
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8002fa8:	300c      	adds	r0, #12
 8002faa:	60a0      	str	r0, [r4, #8]
 8002fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fb0:	f7ff fdba 	bl	8002b28 <memset>
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}

08002fb8 <__sinit>:
 8002fb8:	6983      	ldr	r3, [r0, #24]
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	bb33      	cbnz	r3, 800300e <__sinit+0x56>
 8002fc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002fc4:	6503      	str	r3, [r0, #80]	; 0x50
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <__sinit+0x58>)
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <__sinit+0x5c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6282      	str	r2, [r0, #40]	; 0x28
 8002fce:	4298      	cmp	r0, r3
 8002fd0:	bf04      	itt	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	6183      	streq	r3, [r0, #24]
 8002fd6:	f000 f81f 	bl	8003018 <__sfp>
 8002fda:	6060      	str	r0, [r4, #4]
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f000 f81b 	bl	8003018 <__sfp>
 8002fe2:	60a0      	str	r0, [r4, #8]
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f000 f817 	bl	8003018 <__sfp>
 8002fea:	2200      	movs	r2, #0
 8002fec:	60e0      	str	r0, [r4, #12]
 8002fee:	2104      	movs	r1, #4
 8002ff0:	6860      	ldr	r0, [r4, #4]
 8002ff2:	f7ff ffa1 	bl	8002f38 <std>
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2109      	movs	r1, #9
 8002ffa:	68a0      	ldr	r0, [r4, #8]
 8002ffc:	f7ff ff9c 	bl	8002f38 <std>
 8003000:	2202      	movs	r2, #2
 8003002:	2112      	movs	r1, #18
 8003004:	68e0      	ldr	r0, [r4, #12]
 8003006:	f7ff ff97 	bl	8002f38 <std>
 800300a:	2301      	movs	r3, #1
 800300c:	61a3      	str	r3, [r4, #24]
 800300e:	bd10      	pop	{r4, pc}
 8003010:	08003ab0 	.word	0x08003ab0
 8003014:	08002f81 	.word	0x08002f81

08003018 <__sfp>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <__sfp+0x70>)
 800301c:	681e      	ldr	r6, [r3, #0]
 800301e:	69b3      	ldr	r3, [r6, #24]
 8003020:	4607      	mov	r7, r0
 8003022:	b913      	cbnz	r3, 800302a <__sfp+0x12>
 8003024:	4630      	mov	r0, r6
 8003026:	f7ff ffc7 	bl	8002fb8 <__sinit>
 800302a:	3648      	adds	r6, #72	; 0x48
 800302c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003030:	3b01      	subs	r3, #1
 8003032:	d503      	bpl.n	800303c <__sfp+0x24>
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	b133      	cbz	r3, 8003046 <__sfp+0x2e>
 8003038:	6836      	ldr	r6, [r6, #0]
 800303a:	e7f7      	b.n	800302c <__sfp+0x14>
 800303c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003040:	b16d      	cbz	r5, 800305e <__sfp+0x46>
 8003042:	3468      	adds	r4, #104	; 0x68
 8003044:	e7f4      	b.n	8003030 <__sfp+0x18>
 8003046:	2104      	movs	r1, #4
 8003048:	4638      	mov	r0, r7
 800304a:	f7ff ff9f 	bl	8002f8c <__sfmoreglue>
 800304e:	6030      	str	r0, [r6, #0]
 8003050:	2800      	cmp	r0, #0
 8003052:	d1f1      	bne.n	8003038 <__sfp+0x20>
 8003054:	230c      	movs	r3, #12
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4604      	mov	r4, r0
 800305a:	4620      	mov	r0, r4
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <__sfp+0x74>)
 8003060:	6665      	str	r5, [r4, #100]	; 0x64
 8003062:	e9c4 5500 	strd	r5, r5, [r4]
 8003066:	60a5      	str	r5, [r4, #8]
 8003068:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800306c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003070:	2208      	movs	r2, #8
 8003072:	4629      	mov	r1, r5
 8003074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003078:	f7ff fd56 	bl	8002b28 <memset>
 800307c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003084:	e7e9      	b.n	800305a <__sfp+0x42>
 8003086:	bf00      	nop
 8003088:	08003ab0 	.word	0x08003ab0
 800308c:	ffff0001 	.word	0xffff0001

08003090 <_fwalk_reent>:
 8003090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003094:	4680      	mov	r8, r0
 8003096:	4689      	mov	r9, r1
 8003098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800309c:	2600      	movs	r6, #0
 800309e:	b914      	cbnz	r4, 80030a6 <_fwalk_reent+0x16>
 80030a0:	4630      	mov	r0, r6
 80030a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80030aa:	3f01      	subs	r7, #1
 80030ac:	d501      	bpl.n	80030b2 <_fwalk_reent+0x22>
 80030ae:	6824      	ldr	r4, [r4, #0]
 80030b0:	e7f5      	b.n	800309e <_fwalk_reent+0xe>
 80030b2:	89ab      	ldrh	r3, [r5, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d907      	bls.n	80030c8 <_fwalk_reent+0x38>
 80030b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030bc:	3301      	adds	r3, #1
 80030be:	d003      	beq.n	80030c8 <_fwalk_reent+0x38>
 80030c0:	4629      	mov	r1, r5
 80030c2:	4640      	mov	r0, r8
 80030c4:	47c8      	blx	r9
 80030c6:	4306      	orrs	r6, r0
 80030c8:	3568      	adds	r5, #104	; 0x68
 80030ca:	e7ee      	b.n	80030aa <_fwalk_reent+0x1a>

080030cc <__swhatbuf_r>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	460e      	mov	r6, r1
 80030d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d4:	2900      	cmp	r1, #0
 80030d6:	b096      	sub	sp, #88	; 0x58
 80030d8:	4614      	mov	r4, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	da07      	bge.n	80030ee <__swhatbuf_r+0x22>
 80030de:	2300      	movs	r3, #0
 80030e0:	602b      	str	r3, [r5, #0]
 80030e2:	89b3      	ldrh	r3, [r6, #12]
 80030e4:	061a      	lsls	r2, r3, #24
 80030e6:	d410      	bmi.n	800310a <__swhatbuf_r+0x3e>
 80030e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ec:	e00e      	b.n	800310c <__swhatbuf_r+0x40>
 80030ee:	466a      	mov	r2, sp
 80030f0:	f000 fc6c 	bl	80039cc <_fstat_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	dbf2      	blt.n	80030de <__swhatbuf_r+0x12>
 80030f8:	9a01      	ldr	r2, [sp, #4]
 80030fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003102:	425a      	negs	r2, r3
 8003104:	415a      	adcs	r2, r3
 8003106:	602a      	str	r2, [r5, #0]
 8003108:	e7ee      	b.n	80030e8 <__swhatbuf_r+0x1c>
 800310a:	2340      	movs	r3, #64	; 0x40
 800310c:	2000      	movs	r0, #0
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	b016      	add	sp, #88	; 0x58
 8003112:	bd70      	pop	{r4, r5, r6, pc}

08003114 <__smakebuf_r>:
 8003114:	898b      	ldrh	r3, [r1, #12]
 8003116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003118:	079d      	lsls	r5, r3, #30
 800311a:	4606      	mov	r6, r0
 800311c:	460c      	mov	r4, r1
 800311e:	d507      	bpl.n	8003130 <__smakebuf_r+0x1c>
 8003120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	2301      	movs	r3, #1
 800312a:	6163      	str	r3, [r4, #20]
 800312c:	b002      	add	sp, #8
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	ab01      	add	r3, sp, #4
 8003132:	466a      	mov	r2, sp
 8003134:	f7ff ffca 	bl	80030cc <__swhatbuf_r>
 8003138:	9900      	ldr	r1, [sp, #0]
 800313a:	4605      	mov	r5, r0
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f877 	bl	8003230 <_malloc_r>
 8003142:	b948      	cbnz	r0, 8003158 <__smakebuf_r+0x44>
 8003144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003148:	059a      	lsls	r2, r3, #22
 800314a:	d4ef      	bmi.n	800312c <__smakebuf_r+0x18>
 800314c:	f023 0303 	bic.w	r3, r3, #3
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	e7e3      	b.n	8003120 <__smakebuf_r+0xc>
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <__smakebuf_r+0x7c>)
 800315a:	62b3      	str	r3, [r6, #40]	; 0x28
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	6020      	str	r0, [r4, #0]
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	9b00      	ldr	r3, [sp, #0]
 8003168:	6163      	str	r3, [r4, #20]
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	6120      	str	r0, [r4, #16]
 800316e:	b15b      	cbz	r3, 8003188 <__smakebuf_r+0x74>
 8003170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003174:	4630      	mov	r0, r6
 8003176:	f000 fc3b 	bl	80039f0 <_isatty_r>
 800317a:	b128      	cbz	r0, 8003188 <__smakebuf_r+0x74>
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	81a3      	strh	r3, [r4, #12]
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	431d      	orrs	r5, r3
 800318c:	81a5      	strh	r5, [r4, #12]
 800318e:	e7cd      	b.n	800312c <__smakebuf_r+0x18>
 8003190:	08002f81 	.word	0x08002f81

08003194 <_free_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4605      	mov	r5, r0
 8003198:	2900      	cmp	r1, #0
 800319a:	d045      	beq.n	8003228 <_free_r+0x94>
 800319c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a0:	1f0c      	subs	r4, r1, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfb8      	it	lt
 80031a6:	18e4      	addlt	r4, r4, r3
 80031a8:	f000 fc44 	bl	8003a34 <__malloc_lock>
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <_free_r+0x98>)
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	4610      	mov	r0, r2
 80031b2:	b933      	cbnz	r3, 80031c2 <_free_r+0x2e>
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	6014      	str	r4, [r2, #0]
 80031b8:	4628      	mov	r0, r5
 80031ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031be:	f000 bc3a 	b.w	8003a36 <__malloc_unlock>
 80031c2:	42a3      	cmp	r3, r4
 80031c4:	d90c      	bls.n	80031e0 <_free_r+0x4c>
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	1862      	adds	r2, r4, r1
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bf04      	itt	eq
 80031ce:	681a      	ldreq	r2, [r3, #0]
 80031d0:	685b      	ldreq	r3, [r3, #4]
 80031d2:	6063      	str	r3, [r4, #4]
 80031d4:	bf04      	itt	eq
 80031d6:	1852      	addeq	r2, r2, r1
 80031d8:	6022      	streq	r2, [r4, #0]
 80031da:	6004      	str	r4, [r0, #0]
 80031dc:	e7ec      	b.n	80031b8 <_free_r+0x24>
 80031de:	4613      	mov	r3, r2
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	b10a      	cbz	r2, 80031e8 <_free_r+0x54>
 80031e4:	42a2      	cmp	r2, r4
 80031e6:	d9fa      	bls.n	80031de <_free_r+0x4a>
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	1858      	adds	r0, r3, r1
 80031ec:	42a0      	cmp	r0, r4
 80031ee:	d10b      	bne.n	8003208 <_free_r+0x74>
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	4401      	add	r1, r0
 80031f4:	1858      	adds	r0, r3, r1
 80031f6:	4282      	cmp	r2, r0
 80031f8:	6019      	str	r1, [r3, #0]
 80031fa:	d1dd      	bne.n	80031b8 <_free_r+0x24>
 80031fc:	6810      	ldr	r0, [r2, #0]
 80031fe:	6852      	ldr	r2, [r2, #4]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	4401      	add	r1, r0
 8003204:	6019      	str	r1, [r3, #0]
 8003206:	e7d7      	b.n	80031b8 <_free_r+0x24>
 8003208:	d902      	bls.n	8003210 <_free_r+0x7c>
 800320a:	230c      	movs	r3, #12
 800320c:	602b      	str	r3, [r5, #0]
 800320e:	e7d3      	b.n	80031b8 <_free_r+0x24>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	1821      	adds	r1, r4, r0
 8003214:	428a      	cmp	r2, r1
 8003216:	bf04      	itt	eq
 8003218:	6811      	ldreq	r1, [r2, #0]
 800321a:	6852      	ldreq	r2, [r2, #4]
 800321c:	6062      	str	r2, [r4, #4]
 800321e:	bf04      	itt	eq
 8003220:	1809      	addeq	r1, r1, r0
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	605c      	str	r4, [r3, #4]
 8003226:	e7c7      	b.n	80031b8 <_free_r+0x24>
 8003228:	bd38      	pop	{r3, r4, r5, pc}
 800322a:	bf00      	nop
 800322c:	20002134 	.word	0x20002134

08003230 <_malloc_r>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	1ccd      	adds	r5, r1, #3
 8003234:	f025 0503 	bic.w	r5, r5, #3
 8003238:	3508      	adds	r5, #8
 800323a:	2d0c      	cmp	r5, #12
 800323c:	bf38      	it	cc
 800323e:	250c      	movcc	r5, #12
 8003240:	2d00      	cmp	r5, #0
 8003242:	4606      	mov	r6, r0
 8003244:	db01      	blt.n	800324a <_malloc_r+0x1a>
 8003246:	42a9      	cmp	r1, r5
 8003248:	d903      	bls.n	8003252 <_malloc_r+0x22>
 800324a:	230c      	movs	r3, #12
 800324c:	6033      	str	r3, [r6, #0]
 800324e:	2000      	movs	r0, #0
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	f000 fbef 	bl	8003a34 <__malloc_lock>
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <_malloc_r+0xac>)
 8003258:	6814      	ldr	r4, [r2, #0]
 800325a:	4621      	mov	r1, r4
 800325c:	b991      	cbnz	r1, 8003284 <_malloc_r+0x54>
 800325e:	4c20      	ldr	r4, [pc, #128]	; (80032e0 <_malloc_r+0xb0>)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	b91b      	cbnz	r3, 800326c <_malloc_r+0x3c>
 8003264:	4630      	mov	r0, r6
 8003266:	f000 fb3b 	bl	80038e0 <_sbrk_r>
 800326a:	6020      	str	r0, [r4, #0]
 800326c:	4629      	mov	r1, r5
 800326e:	4630      	mov	r0, r6
 8003270:	f000 fb36 	bl	80038e0 <_sbrk_r>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d124      	bne.n	80032c2 <_malloc_r+0x92>
 8003278:	230c      	movs	r3, #12
 800327a:	6033      	str	r3, [r6, #0]
 800327c:	4630      	mov	r0, r6
 800327e:	f000 fbda 	bl	8003a36 <__malloc_unlock>
 8003282:	e7e4      	b.n	800324e <_malloc_r+0x1e>
 8003284:	680b      	ldr	r3, [r1, #0]
 8003286:	1b5b      	subs	r3, r3, r5
 8003288:	d418      	bmi.n	80032bc <_malloc_r+0x8c>
 800328a:	2b0b      	cmp	r3, #11
 800328c:	d90f      	bls.n	80032ae <_malloc_r+0x7e>
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	50cd      	str	r5, [r1, r3]
 8003292:	18cc      	adds	r4, r1, r3
 8003294:	4630      	mov	r0, r6
 8003296:	f000 fbce 	bl	8003a36 <__malloc_unlock>
 800329a:	f104 000b 	add.w	r0, r4, #11
 800329e:	1d23      	adds	r3, r4, #4
 80032a0:	f020 0007 	bic.w	r0, r0, #7
 80032a4:	1ac3      	subs	r3, r0, r3
 80032a6:	d0d3      	beq.n	8003250 <_malloc_r+0x20>
 80032a8:	425a      	negs	r2, r3
 80032aa:	50e2      	str	r2, [r4, r3]
 80032ac:	e7d0      	b.n	8003250 <_malloc_r+0x20>
 80032ae:	428c      	cmp	r4, r1
 80032b0:	684b      	ldr	r3, [r1, #4]
 80032b2:	bf16      	itet	ne
 80032b4:	6063      	strne	r3, [r4, #4]
 80032b6:	6013      	streq	r3, [r2, #0]
 80032b8:	460c      	movne	r4, r1
 80032ba:	e7eb      	b.n	8003294 <_malloc_r+0x64>
 80032bc:	460c      	mov	r4, r1
 80032be:	6849      	ldr	r1, [r1, #4]
 80032c0:	e7cc      	b.n	800325c <_malloc_r+0x2c>
 80032c2:	1cc4      	adds	r4, r0, #3
 80032c4:	f024 0403 	bic.w	r4, r4, #3
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d005      	beq.n	80032d8 <_malloc_r+0xa8>
 80032cc:	1a21      	subs	r1, r4, r0
 80032ce:	4630      	mov	r0, r6
 80032d0:	f000 fb06 	bl	80038e0 <_sbrk_r>
 80032d4:	3001      	adds	r0, #1
 80032d6:	d0cf      	beq.n	8003278 <_malloc_r+0x48>
 80032d8:	6025      	str	r5, [r4, #0]
 80032da:	e7db      	b.n	8003294 <_malloc_r+0x64>
 80032dc:	20002134 	.word	0x20002134
 80032e0:	20002138 	.word	0x20002138

080032e4 <__sfputc_r>:
 80032e4:	6893      	ldr	r3, [r2, #8]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	b410      	push	{r4}
 80032ec:	6093      	str	r3, [r2, #8]
 80032ee:	da08      	bge.n	8003302 <__sfputc_r+0x1e>
 80032f0:	6994      	ldr	r4, [r2, #24]
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	db01      	blt.n	80032fa <__sfputc_r+0x16>
 80032f6:	290a      	cmp	r1, #10
 80032f8:	d103      	bne.n	8003302 <__sfputc_r+0x1e>
 80032fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032fe:	f7ff bcab 	b.w	8002c58 <__swbuf_r>
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	1c58      	adds	r0, r3, #1
 8003306:	6010      	str	r0, [r2, #0]
 8003308:	7019      	strb	r1, [r3, #0]
 800330a:	4608      	mov	r0, r1
 800330c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003310:	4770      	bx	lr

08003312 <__sfputs_r>:
 8003312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003314:	4606      	mov	r6, r0
 8003316:	460f      	mov	r7, r1
 8003318:	4614      	mov	r4, r2
 800331a:	18d5      	adds	r5, r2, r3
 800331c:	42ac      	cmp	r4, r5
 800331e:	d101      	bne.n	8003324 <__sfputs_r+0x12>
 8003320:	2000      	movs	r0, #0
 8003322:	e007      	b.n	8003334 <__sfputs_r+0x22>
 8003324:	463a      	mov	r2, r7
 8003326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332a:	4630      	mov	r0, r6
 800332c:	f7ff ffda 	bl	80032e4 <__sfputc_r>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d1f3      	bne.n	800331c <__sfputs_r+0xa>
 8003334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003338 <_vfiprintf_r>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	460c      	mov	r4, r1
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	4617      	mov	r7, r2
 8003342:	461d      	mov	r5, r3
 8003344:	4606      	mov	r6, r0
 8003346:	b118      	cbz	r0, 8003350 <_vfiprintf_r+0x18>
 8003348:	6983      	ldr	r3, [r0, #24]
 800334a:	b90b      	cbnz	r3, 8003350 <_vfiprintf_r+0x18>
 800334c:	f7ff fe34 	bl	8002fb8 <__sinit>
 8003350:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <_vfiprintf_r+0x20c>)
 8003352:	429c      	cmp	r4, r3
 8003354:	d158      	bne.n	8003408 <_vfiprintf_r+0xd0>
 8003356:	6874      	ldr	r4, [r6, #4]
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	0718      	lsls	r0, r3, #28
 800335c:	d55e      	bpl.n	800341c <_vfiprintf_r+0xe4>
 800335e:	6923      	ldr	r3, [r4, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05b      	beq.n	800341c <_vfiprintf_r+0xe4>
 8003364:	2300      	movs	r3, #0
 8003366:	9309      	str	r3, [sp, #36]	; 0x24
 8003368:	2320      	movs	r3, #32
 800336a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800336e:	2330      	movs	r3, #48	; 0x30
 8003370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003374:	9503      	str	r5, [sp, #12]
 8003376:	f04f 0b01 	mov.w	fp, #1
 800337a:	46b8      	mov	r8, r7
 800337c:	4645      	mov	r5, r8
 800337e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003382:	b10b      	cbz	r3, 8003388 <_vfiprintf_r+0x50>
 8003384:	2b25      	cmp	r3, #37	; 0x25
 8003386:	d154      	bne.n	8003432 <_vfiprintf_r+0xfa>
 8003388:	ebb8 0a07 	subs.w	sl, r8, r7
 800338c:	d00b      	beq.n	80033a6 <_vfiprintf_r+0x6e>
 800338e:	4653      	mov	r3, sl
 8003390:	463a      	mov	r2, r7
 8003392:	4621      	mov	r1, r4
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff ffbc 	bl	8003312 <__sfputs_r>
 800339a:	3001      	adds	r0, #1
 800339c:	f000 80c2 	beq.w	8003524 <_vfiprintf_r+0x1ec>
 80033a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a2:	4453      	add	r3, sl
 80033a4:	9309      	str	r3, [sp, #36]	; 0x24
 80033a6:	f898 3000 	ldrb.w	r3, [r8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80ba 	beq.w	8003524 <_vfiprintf_r+0x1ec>
 80033b0:	2300      	movs	r3, #0
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	9307      	str	r3, [sp, #28]
 80033be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c2:	931a      	str	r3, [sp, #104]	; 0x68
 80033c4:	46a8      	mov	r8, r5
 80033c6:	2205      	movs	r2, #5
 80033c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033cc:	485e      	ldr	r0, [pc, #376]	; (8003548 <_vfiprintf_r+0x210>)
 80033ce:	f7fc ff0f 	bl	80001f0 <memchr>
 80033d2:	9b04      	ldr	r3, [sp, #16]
 80033d4:	bb78      	cbnz	r0, 8003436 <_vfiprintf_r+0xfe>
 80033d6:	06d9      	lsls	r1, r3, #27
 80033d8:	bf44      	itt	mi
 80033da:	2220      	movmi	r2, #32
 80033dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e0:	071a      	lsls	r2, r3, #28
 80033e2:	bf44      	itt	mi
 80033e4:	222b      	movmi	r2, #43	; 0x2b
 80033e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033ea:	782a      	ldrb	r2, [r5, #0]
 80033ec:	2a2a      	cmp	r2, #42	; 0x2a
 80033ee:	d02a      	beq.n	8003446 <_vfiprintf_r+0x10e>
 80033f0:	9a07      	ldr	r2, [sp, #28]
 80033f2:	46a8      	mov	r8, r5
 80033f4:	2000      	movs	r0, #0
 80033f6:	250a      	movs	r5, #10
 80033f8:	4641      	mov	r1, r8
 80033fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	2b09      	cmp	r3, #9
 8003402:	d969      	bls.n	80034d8 <_vfiprintf_r+0x1a0>
 8003404:	b360      	cbz	r0, 8003460 <_vfiprintf_r+0x128>
 8003406:	e024      	b.n	8003452 <_vfiprintf_r+0x11a>
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <_vfiprintf_r+0x214>)
 800340a:	429c      	cmp	r4, r3
 800340c:	d101      	bne.n	8003412 <_vfiprintf_r+0xda>
 800340e:	68b4      	ldr	r4, [r6, #8]
 8003410:	e7a2      	b.n	8003358 <_vfiprintf_r+0x20>
 8003412:	4b4f      	ldr	r3, [pc, #316]	; (8003550 <_vfiprintf_r+0x218>)
 8003414:	429c      	cmp	r4, r3
 8003416:	bf08      	it	eq
 8003418:	68f4      	ldreq	r4, [r6, #12]
 800341a:	e79d      	b.n	8003358 <_vfiprintf_r+0x20>
 800341c:	4621      	mov	r1, r4
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff fc6c 	bl	8002cfc <__swsetup_r>
 8003424:	2800      	cmp	r0, #0
 8003426:	d09d      	beq.n	8003364 <_vfiprintf_r+0x2c>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	b01d      	add	sp, #116	; 0x74
 800342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003432:	46a8      	mov	r8, r5
 8003434:	e7a2      	b.n	800337c <_vfiprintf_r+0x44>
 8003436:	4a44      	ldr	r2, [pc, #272]	; (8003548 <_vfiprintf_r+0x210>)
 8003438:	1a80      	subs	r0, r0, r2
 800343a:	fa0b f000 	lsl.w	r0, fp, r0
 800343e:	4318      	orrs	r0, r3
 8003440:	9004      	str	r0, [sp, #16]
 8003442:	4645      	mov	r5, r8
 8003444:	e7be      	b.n	80033c4 <_vfiprintf_r+0x8c>
 8003446:	9a03      	ldr	r2, [sp, #12]
 8003448:	1d11      	adds	r1, r2, #4
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	9103      	str	r1, [sp, #12]
 800344e:	2a00      	cmp	r2, #0
 8003450:	db01      	blt.n	8003456 <_vfiprintf_r+0x11e>
 8003452:	9207      	str	r2, [sp, #28]
 8003454:	e004      	b.n	8003460 <_vfiprintf_r+0x128>
 8003456:	4252      	negs	r2, r2
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	9207      	str	r2, [sp, #28]
 800345e:	9304      	str	r3, [sp, #16]
 8003460:	f898 3000 	ldrb.w	r3, [r8]
 8003464:	2b2e      	cmp	r3, #46	; 0x2e
 8003466:	d10e      	bne.n	8003486 <_vfiprintf_r+0x14e>
 8003468:	f898 3001 	ldrb.w	r3, [r8, #1]
 800346c:	2b2a      	cmp	r3, #42	; 0x2a
 800346e:	d138      	bne.n	80034e2 <_vfiprintf_r+0x1aa>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	1d1a      	adds	r2, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	9203      	str	r2, [sp, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	bfb8      	it	lt
 800347c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003480:	f108 0802 	add.w	r8, r8, #2
 8003484:	9305      	str	r3, [sp, #20]
 8003486:	4d33      	ldr	r5, [pc, #204]	; (8003554 <_vfiprintf_r+0x21c>)
 8003488:	f898 1000 	ldrb.w	r1, [r8]
 800348c:	2203      	movs	r2, #3
 800348e:	4628      	mov	r0, r5
 8003490:	f7fc feae 	bl	80001f0 <memchr>
 8003494:	b140      	cbz	r0, 80034a8 <_vfiprintf_r+0x170>
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	1b40      	subs	r0, r0, r5
 800349a:	fa03 f000 	lsl.w	r0, r3, r0
 800349e:	9b04      	ldr	r3, [sp, #16]
 80034a0:	4303      	orrs	r3, r0
 80034a2:	f108 0801 	add.w	r8, r8, #1
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	f898 1000 	ldrb.w	r1, [r8]
 80034ac:	482a      	ldr	r0, [pc, #168]	; (8003558 <_vfiprintf_r+0x220>)
 80034ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034b2:	2206      	movs	r2, #6
 80034b4:	f108 0701 	add.w	r7, r8, #1
 80034b8:	f7fc fe9a 	bl	80001f0 <memchr>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d037      	beq.n	8003530 <_vfiprintf_r+0x1f8>
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <_vfiprintf_r+0x224>)
 80034c2:	bb1b      	cbnz	r3, 800350c <_vfiprintf_r+0x1d4>
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	3307      	adds	r3, #7
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	3308      	adds	r3, #8
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d2:	444b      	add	r3, r9
 80034d4:	9309      	str	r3, [sp, #36]	; 0x24
 80034d6:	e750      	b.n	800337a <_vfiprintf_r+0x42>
 80034d8:	fb05 3202 	mla	r2, r5, r2, r3
 80034dc:	2001      	movs	r0, #1
 80034de:	4688      	mov	r8, r1
 80034e0:	e78a      	b.n	80033f8 <_vfiprintf_r+0xc0>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f108 0801 	add.w	r8, r8, #1
 80034e8:	9305      	str	r3, [sp, #20]
 80034ea:	4619      	mov	r1, r3
 80034ec:	250a      	movs	r5, #10
 80034ee:	4640      	mov	r0, r8
 80034f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034f4:	3a30      	subs	r2, #48	; 0x30
 80034f6:	2a09      	cmp	r2, #9
 80034f8:	d903      	bls.n	8003502 <_vfiprintf_r+0x1ca>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0c3      	beq.n	8003486 <_vfiprintf_r+0x14e>
 80034fe:	9105      	str	r1, [sp, #20]
 8003500:	e7c1      	b.n	8003486 <_vfiprintf_r+0x14e>
 8003502:	fb05 2101 	mla	r1, r5, r1, r2
 8003506:	2301      	movs	r3, #1
 8003508:	4680      	mov	r8, r0
 800350a:	e7f0      	b.n	80034ee <_vfiprintf_r+0x1b6>
 800350c:	ab03      	add	r3, sp, #12
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4622      	mov	r2, r4
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <_vfiprintf_r+0x228>)
 8003514:	a904      	add	r1, sp, #16
 8003516:	4630      	mov	r0, r6
 8003518:	f3af 8000 	nop.w
 800351c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003520:	4681      	mov	r9, r0
 8003522:	d1d5      	bne.n	80034d0 <_vfiprintf_r+0x198>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	065b      	lsls	r3, r3, #25
 8003528:	f53f af7e 	bmi.w	8003428 <_vfiprintf_r+0xf0>
 800352c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352e:	e77d      	b.n	800342c <_vfiprintf_r+0xf4>
 8003530:	ab03      	add	r3, sp, #12
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4622      	mov	r2, r4
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <_vfiprintf_r+0x228>)
 8003538:	a904      	add	r1, sp, #16
 800353a:	4630      	mov	r0, r6
 800353c:	f000 f888 	bl	8003650 <_printf_i>
 8003540:	e7ec      	b.n	800351c <_vfiprintf_r+0x1e4>
 8003542:	bf00      	nop
 8003544:	08003ad4 	.word	0x08003ad4
 8003548:	08003b14 	.word	0x08003b14
 800354c:	08003af4 	.word	0x08003af4
 8003550:	08003ab4 	.word	0x08003ab4
 8003554:	08003b1a 	.word	0x08003b1a
 8003558:	08003b1e 	.word	0x08003b1e
 800355c:	00000000 	.word	0x00000000
 8003560:	08003313 	.word	0x08003313

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4691      	mov	r9, r2
 800356a:	461f      	mov	r7, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	4293      	cmp	r3, r2
 8003576:	bfb8      	it	lt
 8003578:	4613      	movlt	r3, r2
 800357a:	f8c9 3000 	str.w	r3, [r9]
 800357e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003582:	4606      	mov	r6, r0
 8003584:	460c      	mov	r4, r1
 8003586:	b112      	cbz	r2, 800358e <_printf_common+0x2a>
 8003588:	3301      	adds	r3, #1
 800358a:	f8c9 3000 	str.w	r3, [r9]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	0699      	lsls	r1, r3, #26
 8003592:	bf42      	ittt	mi
 8003594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003598:	3302      	addmi	r3, #2
 800359a:	f8c9 3000 	strmi.w	r3, [r9]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	f015 0506 	ands.w	r5, r5, #6
 80035a4:	d107      	bne.n	80035b6 <_printf_common+0x52>
 80035a6:	f104 0a19 	add.w	sl, r4, #25
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	f8d9 2000 	ldr.w	r2, [r9]
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	42ab      	cmp	r3, r5
 80035b4:	dc28      	bgt.n	8003608 <_printf_common+0xa4>
 80035b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	3300      	adds	r3, #0
 80035be:	bf18      	it	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	0692      	lsls	r2, r2, #26
 80035c4:	d42d      	bmi.n	8003622 <_printf_common+0xbe>
 80035c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ca:	4639      	mov	r1, r7
 80035cc:	4630      	mov	r0, r6
 80035ce:	47c0      	blx	r8
 80035d0:	3001      	adds	r0, #1
 80035d2:	d020      	beq.n	8003616 <_printf_common+0xb2>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	68e5      	ldr	r5, [r4, #12]
 80035d8:	f8d9 2000 	ldr.w	r2, [r9]
 80035dc:	f003 0306 	and.w	r3, r3, #6
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	bf08      	it	eq
 80035e4:	1aad      	subeq	r5, r5, r2
 80035e6:	68a3      	ldr	r3, [r4, #8]
 80035e8:	6922      	ldr	r2, [r4, #16]
 80035ea:	bf0c      	ite	eq
 80035ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f0:	2500      	movne	r5, #0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	bfc4      	itt	gt
 80035f6:	1a9b      	subgt	r3, r3, r2
 80035f8:	18ed      	addgt	r5, r5, r3
 80035fa:	f04f 0900 	mov.w	r9, #0
 80035fe:	341a      	adds	r4, #26
 8003600:	454d      	cmp	r5, r9
 8003602:	d11a      	bne.n	800363a <_printf_common+0xd6>
 8003604:	2000      	movs	r0, #0
 8003606:	e008      	b.n	800361a <_printf_common+0xb6>
 8003608:	2301      	movs	r3, #1
 800360a:	4652      	mov	r2, sl
 800360c:	4639      	mov	r1, r7
 800360e:	4630      	mov	r0, r6
 8003610:	47c0      	blx	r8
 8003612:	3001      	adds	r0, #1
 8003614:	d103      	bne.n	800361e <_printf_common+0xba>
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361e:	3501      	adds	r5, #1
 8003620:	e7c3      	b.n	80035aa <_printf_common+0x46>
 8003622:	18e1      	adds	r1, r4, r3
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	2030      	movs	r0, #48	; 0x30
 8003628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800362c:	4422      	add	r2, r4
 800362e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003636:	3302      	adds	r3, #2
 8003638:	e7c5      	b.n	80035c6 <_printf_common+0x62>
 800363a:	2301      	movs	r3, #1
 800363c:	4622      	mov	r2, r4
 800363e:	4639      	mov	r1, r7
 8003640:	4630      	mov	r0, r6
 8003642:	47c0      	blx	r8
 8003644:	3001      	adds	r0, #1
 8003646:	d0e6      	beq.n	8003616 <_printf_common+0xb2>
 8003648:	f109 0901 	add.w	r9, r9, #1
 800364c:	e7d8      	b.n	8003600 <_printf_common+0x9c>
	...

08003650 <_printf_i>:
 8003650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003654:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003658:	460c      	mov	r4, r1
 800365a:	7e09      	ldrb	r1, [r1, #24]
 800365c:	b085      	sub	sp, #20
 800365e:	296e      	cmp	r1, #110	; 0x6e
 8003660:	4617      	mov	r7, r2
 8003662:	4606      	mov	r6, r0
 8003664:	4698      	mov	r8, r3
 8003666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003668:	f000 80b3 	beq.w	80037d2 <_printf_i+0x182>
 800366c:	d822      	bhi.n	80036b4 <_printf_i+0x64>
 800366e:	2963      	cmp	r1, #99	; 0x63
 8003670:	d036      	beq.n	80036e0 <_printf_i+0x90>
 8003672:	d80a      	bhi.n	800368a <_printf_i+0x3a>
 8003674:	2900      	cmp	r1, #0
 8003676:	f000 80b9 	beq.w	80037ec <_printf_i+0x19c>
 800367a:	2958      	cmp	r1, #88	; 0x58
 800367c:	f000 8083 	beq.w	8003786 <_printf_i+0x136>
 8003680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003684:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003688:	e032      	b.n	80036f0 <_printf_i+0xa0>
 800368a:	2964      	cmp	r1, #100	; 0x64
 800368c:	d001      	beq.n	8003692 <_printf_i+0x42>
 800368e:	2969      	cmp	r1, #105	; 0x69
 8003690:	d1f6      	bne.n	8003680 <_printf_i+0x30>
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	0605      	lsls	r5, r0, #24
 8003698:	f103 0104 	add.w	r1, r3, #4
 800369c:	d52a      	bpl.n	80036f4 <_printf_i+0xa4>
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da03      	bge.n	80036ae <_printf_i+0x5e>
 80036a6:	222d      	movs	r2, #45	; 0x2d
 80036a8:	425b      	negs	r3, r3
 80036aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036ae:	486f      	ldr	r0, [pc, #444]	; (800386c <_printf_i+0x21c>)
 80036b0:	220a      	movs	r2, #10
 80036b2:	e039      	b.n	8003728 <_printf_i+0xd8>
 80036b4:	2973      	cmp	r1, #115	; 0x73
 80036b6:	f000 809d 	beq.w	80037f4 <_printf_i+0x1a4>
 80036ba:	d808      	bhi.n	80036ce <_printf_i+0x7e>
 80036bc:	296f      	cmp	r1, #111	; 0x6f
 80036be:	d020      	beq.n	8003702 <_printf_i+0xb2>
 80036c0:	2970      	cmp	r1, #112	; 0x70
 80036c2:	d1dd      	bne.n	8003680 <_printf_i+0x30>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f043 0320 	orr.w	r3, r3, #32
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	e003      	b.n	80036d6 <_printf_i+0x86>
 80036ce:	2975      	cmp	r1, #117	; 0x75
 80036d0:	d017      	beq.n	8003702 <_printf_i+0xb2>
 80036d2:	2978      	cmp	r1, #120	; 0x78
 80036d4:	d1d4      	bne.n	8003680 <_printf_i+0x30>
 80036d6:	2378      	movs	r3, #120	; 0x78
 80036d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036dc:	4864      	ldr	r0, [pc, #400]	; (8003870 <_printf_i+0x220>)
 80036de:	e055      	b.n	800378c <_printf_i+0x13c>
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	1d19      	adds	r1, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6011      	str	r1, [r2, #0]
 80036e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e08c      	b.n	800380e <_printf_i+0x1be>
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6011      	str	r1, [r2, #0]
 80036f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036fc:	bf18      	it	ne
 80036fe:	b21b      	sxthne	r3, r3
 8003700:	e7cf      	b.n	80036a2 <_printf_i+0x52>
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	6825      	ldr	r5, [r4, #0]
 8003706:	1d18      	adds	r0, r3, #4
 8003708:	6010      	str	r0, [r2, #0]
 800370a:	0628      	lsls	r0, r5, #24
 800370c:	d501      	bpl.n	8003712 <_printf_i+0xc2>
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	e002      	b.n	8003718 <_printf_i+0xc8>
 8003712:	0668      	lsls	r0, r5, #25
 8003714:	d5fb      	bpl.n	800370e <_printf_i+0xbe>
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	4854      	ldr	r0, [pc, #336]	; (800386c <_printf_i+0x21c>)
 800371a:	296f      	cmp	r1, #111	; 0x6f
 800371c:	bf14      	ite	ne
 800371e:	220a      	movne	r2, #10
 8003720:	2208      	moveq	r2, #8
 8003722:	2100      	movs	r1, #0
 8003724:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003728:	6865      	ldr	r5, [r4, #4]
 800372a:	60a5      	str	r5, [r4, #8]
 800372c:	2d00      	cmp	r5, #0
 800372e:	f2c0 8095 	blt.w	800385c <_printf_i+0x20c>
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	f021 0104 	bic.w	r1, r1, #4
 8003738:	6021      	str	r1, [r4, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d13d      	bne.n	80037ba <_printf_i+0x16a>
 800373e:	2d00      	cmp	r5, #0
 8003740:	f040 808e 	bne.w	8003860 <_printf_i+0x210>
 8003744:	4665      	mov	r5, ip
 8003746:	2a08      	cmp	r2, #8
 8003748:	d10b      	bne.n	8003762 <_printf_i+0x112>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	07db      	lsls	r3, r3, #31
 800374e:	d508      	bpl.n	8003762 <_printf_i+0x112>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	6862      	ldr	r2, [r4, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	bfde      	ittt	le
 8003758:	2330      	movle	r3, #48	; 0x30
 800375a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800375e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003762:	ebac 0305 	sub.w	r3, ip, r5
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	f8cd 8000 	str.w	r8, [sp]
 800376c:	463b      	mov	r3, r7
 800376e:	aa03      	add	r2, sp, #12
 8003770:	4621      	mov	r1, r4
 8003772:	4630      	mov	r0, r6
 8003774:	f7ff fef6 	bl	8003564 <_printf_common>
 8003778:	3001      	adds	r0, #1
 800377a:	d14d      	bne.n	8003818 <_printf_i+0x1c8>
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	b005      	add	sp, #20
 8003782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003786:	4839      	ldr	r0, [pc, #228]	; (800386c <_printf_i+0x21c>)
 8003788:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	6821      	ldr	r1, [r4, #0]
 8003790:	1d1d      	adds	r5, r3, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6015      	str	r5, [r2, #0]
 8003796:	060a      	lsls	r2, r1, #24
 8003798:	d50b      	bpl.n	80037b2 <_printf_i+0x162>
 800379a:	07ca      	lsls	r2, r1, #31
 800379c:	bf44      	itt	mi
 800379e:	f041 0120 	orrmi.w	r1, r1, #32
 80037a2:	6021      	strmi	r1, [r4, #0]
 80037a4:	b91b      	cbnz	r3, 80037ae <_printf_i+0x15e>
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	f022 0220 	bic.w	r2, r2, #32
 80037ac:	6022      	str	r2, [r4, #0]
 80037ae:	2210      	movs	r2, #16
 80037b0:	e7b7      	b.n	8003722 <_printf_i+0xd2>
 80037b2:	064d      	lsls	r5, r1, #25
 80037b4:	bf48      	it	mi
 80037b6:	b29b      	uxthmi	r3, r3
 80037b8:	e7ef      	b.n	800379a <_printf_i+0x14a>
 80037ba:	4665      	mov	r5, ip
 80037bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80037c0:	fb02 3311 	mls	r3, r2, r1, r3
 80037c4:	5cc3      	ldrb	r3, [r0, r3]
 80037c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037ca:	460b      	mov	r3, r1
 80037cc:	2900      	cmp	r1, #0
 80037ce:	d1f5      	bne.n	80037bc <_printf_i+0x16c>
 80037d0:	e7b9      	b.n	8003746 <_printf_i+0xf6>
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	6825      	ldr	r5, [r4, #0]
 80037d6:	6961      	ldr	r1, [r4, #20]
 80037d8:	1d18      	adds	r0, r3, #4
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	0628      	lsls	r0, r5, #24
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	d501      	bpl.n	80037e6 <_printf_i+0x196>
 80037e2:	6019      	str	r1, [r3, #0]
 80037e4:	e002      	b.n	80037ec <_printf_i+0x19c>
 80037e6:	066a      	lsls	r2, r5, #25
 80037e8:	d5fb      	bpl.n	80037e2 <_printf_i+0x192>
 80037ea:	8019      	strh	r1, [r3, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	4665      	mov	r5, ip
 80037f2:	e7b9      	b.n	8003768 <_printf_i+0x118>
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	1d19      	adds	r1, r3, #4
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	681d      	ldr	r5, [r3, #0]
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	2100      	movs	r1, #0
 8003800:	4628      	mov	r0, r5
 8003802:	f7fc fcf5 	bl	80001f0 <memchr>
 8003806:	b108      	cbz	r0, 800380c <_printf_i+0x1bc>
 8003808:	1b40      	subs	r0, r0, r5
 800380a:	6060      	str	r0, [r4, #4]
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	2300      	movs	r3, #0
 8003812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003816:	e7a7      	b.n	8003768 <_printf_i+0x118>
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	462a      	mov	r2, r5
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	47c0      	blx	r8
 8003822:	3001      	adds	r0, #1
 8003824:	d0aa      	beq.n	800377c <_printf_i+0x12c>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	079b      	lsls	r3, r3, #30
 800382a:	d413      	bmi.n	8003854 <_printf_i+0x204>
 800382c:	68e0      	ldr	r0, [r4, #12]
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	4298      	cmp	r0, r3
 8003832:	bfb8      	it	lt
 8003834:	4618      	movlt	r0, r3
 8003836:	e7a3      	b.n	8003780 <_printf_i+0x130>
 8003838:	2301      	movs	r3, #1
 800383a:	464a      	mov	r2, r9
 800383c:	4639      	mov	r1, r7
 800383e:	4630      	mov	r0, r6
 8003840:	47c0      	blx	r8
 8003842:	3001      	adds	r0, #1
 8003844:	d09a      	beq.n	800377c <_printf_i+0x12c>
 8003846:	3501      	adds	r5, #1
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	9a03      	ldr	r2, [sp, #12]
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	42ab      	cmp	r3, r5
 8003850:	dcf2      	bgt.n	8003838 <_printf_i+0x1e8>
 8003852:	e7eb      	b.n	800382c <_printf_i+0x1dc>
 8003854:	2500      	movs	r5, #0
 8003856:	f104 0919 	add.w	r9, r4, #25
 800385a:	e7f5      	b.n	8003848 <_printf_i+0x1f8>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ac      	bne.n	80037ba <_printf_i+0x16a>
 8003860:	7803      	ldrb	r3, [r0, #0]
 8003862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800386a:	e76c      	b.n	8003746 <_printf_i+0xf6>
 800386c:	08003b25 	.word	0x08003b25
 8003870:	08003b36 	.word	0x08003b36

08003874 <_putc_r>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	460d      	mov	r5, r1
 8003878:	4614      	mov	r4, r2
 800387a:	4606      	mov	r6, r0
 800387c:	b118      	cbz	r0, 8003886 <_putc_r+0x12>
 800387e:	6983      	ldr	r3, [r0, #24]
 8003880:	b90b      	cbnz	r3, 8003886 <_putc_r+0x12>
 8003882:	f7ff fb99 	bl	8002fb8 <__sinit>
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <_putc_r+0x60>)
 8003888:	429c      	cmp	r4, r3
 800388a:	d112      	bne.n	80038b2 <_putc_r+0x3e>
 800388c:	6874      	ldr	r4, [r6, #4]
 800388e:	68a3      	ldr	r3, [r4, #8]
 8003890:	3b01      	subs	r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	da16      	bge.n	80038c6 <_putc_r+0x52>
 8003898:	69a2      	ldr	r2, [r4, #24]
 800389a:	4293      	cmp	r3, r2
 800389c:	db02      	blt.n	80038a4 <_putc_r+0x30>
 800389e:	b2eb      	uxtb	r3, r5
 80038a0:	2b0a      	cmp	r3, #10
 80038a2:	d110      	bne.n	80038c6 <_putc_r+0x52>
 80038a4:	4622      	mov	r2, r4
 80038a6:	4629      	mov	r1, r5
 80038a8:	4630      	mov	r0, r6
 80038aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80038ae:	f7ff b9d3 	b.w	8002c58 <__swbuf_r>
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <_putc_r+0x64>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	d101      	bne.n	80038bc <_putc_r+0x48>
 80038b8:	68b4      	ldr	r4, [r6, #8]
 80038ba:	e7e8      	b.n	800388e <_putc_r+0x1a>
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <_putc_r+0x68>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	bf08      	it	eq
 80038c2:	68f4      	ldreq	r4, [r6, #12]
 80038c4:	e7e3      	b.n	800388e <_putc_r+0x1a>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	6022      	str	r2, [r4, #0]
 80038cc:	701d      	strb	r5, [r3, #0]
 80038ce:	b2e8      	uxtb	r0, r5
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	bf00      	nop
 80038d4:	08003ad4 	.word	0x08003ad4
 80038d8:	08003af4 	.word	0x08003af4
 80038dc:	08003ab4 	.word	0x08003ab4

080038e0 <_sbrk_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4c06      	ldr	r4, [pc, #24]	; (80038fc <_sbrk_r+0x1c>)
 80038e4:	2300      	movs	r3, #0
 80038e6:	4605      	mov	r5, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	f7fd f9e0 	bl	8000cb0 <_sbrk>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_sbrk_r+0x1a>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_sbrk_r+0x1a>
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	20002180 	.word	0x20002180

08003900 <__sread>:
 8003900:	b510      	push	{r4, lr}
 8003902:	460c      	mov	r4, r1
 8003904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003908:	f000 f896 	bl	8003a38 <_read_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	bfab      	itete	ge
 8003910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003912:	89a3      	ldrhlt	r3, [r4, #12]
 8003914:	181b      	addge	r3, r3, r0
 8003916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800391a:	bfac      	ite	ge
 800391c:	6563      	strge	r3, [r4, #84]	; 0x54
 800391e:	81a3      	strhlt	r3, [r4, #12]
 8003920:	bd10      	pop	{r4, pc}

08003922 <__swrite>:
 8003922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003926:	461f      	mov	r7, r3
 8003928:	898b      	ldrh	r3, [r1, #12]
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	4605      	mov	r5, r0
 800392e:	460c      	mov	r4, r1
 8003930:	4616      	mov	r6, r2
 8003932:	d505      	bpl.n	8003940 <__swrite+0x1e>
 8003934:	2302      	movs	r3, #2
 8003936:	2200      	movs	r2, #0
 8003938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393c:	f000 f868 	bl	8003a10 <_lseek_r>
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	4632      	mov	r2, r6
 800394e:	463b      	mov	r3, r7
 8003950:	4628      	mov	r0, r5
 8003952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	f000 b817 	b.w	8003988 <_write_r>

0800395a <__sseek>:
 800395a:	b510      	push	{r4, lr}
 800395c:	460c      	mov	r4, r1
 800395e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003962:	f000 f855 	bl	8003a10 <_lseek_r>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	bf15      	itete	ne
 800396c:	6560      	strne	r0, [r4, #84]	; 0x54
 800396e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003976:	81a3      	strheq	r3, [r4, #12]
 8003978:	bf18      	it	ne
 800397a:	81a3      	strhne	r3, [r4, #12]
 800397c:	bd10      	pop	{r4, pc}

0800397e <__sclose>:
 800397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003982:	f000 b813 	b.w	80039ac <_close_r>
	...

08003988 <_write_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4c07      	ldr	r4, [pc, #28]	; (80039a8 <_write_r+0x20>)
 800398c:	4605      	mov	r5, r0
 800398e:	4608      	mov	r0, r1
 8003990:	4611      	mov	r1, r2
 8003992:	2200      	movs	r2, #0
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f7fc fdfa 	bl	8000590 <_write>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_write_r+0x1e>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_write_r+0x1e>
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	20002180 	.word	0x20002180

080039ac <_close_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4c06      	ldr	r4, [pc, #24]	; (80039c8 <_close_r+0x1c>)
 80039b0:	2300      	movs	r3, #0
 80039b2:	4605      	mov	r5, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	f7fd f945 	bl	8000c46 <_close>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d102      	bne.n	80039c6 <_close_r+0x1a>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	b103      	cbz	r3, 80039c6 <_close_r+0x1a>
 80039c4:	602b      	str	r3, [r5, #0]
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	20002180 	.word	0x20002180

080039cc <_fstat_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4c07      	ldr	r4, [pc, #28]	; (80039ec <_fstat_r+0x20>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	4605      	mov	r5, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	f7fd f940 	bl	8000c5e <_fstat>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d102      	bne.n	80039e8 <_fstat_r+0x1c>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	b103      	cbz	r3, 80039e8 <_fstat_r+0x1c>
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	bd38      	pop	{r3, r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	20002180 	.word	0x20002180

080039f0 <_isatty_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4c06      	ldr	r4, [pc, #24]	; (8003a0c <_isatty_r+0x1c>)
 80039f4:	2300      	movs	r3, #0
 80039f6:	4605      	mov	r5, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	f7fd f93f 	bl	8000c7e <_isatty>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_isatty_r+0x1a>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_isatty_r+0x1a>
 8003a08:	602b      	str	r3, [r5, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	20002180 	.word	0x20002180

08003a10 <_lseek_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4c07      	ldr	r4, [pc, #28]	; (8003a30 <_lseek_r+0x20>)
 8003a14:	4605      	mov	r5, r0
 8003a16:	4608      	mov	r0, r1
 8003a18:	4611      	mov	r1, r2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	6022      	str	r2, [r4, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f7fd f938 	bl	8000c94 <_lseek>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_lseek_r+0x1e>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_lseek_r+0x1e>
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20002180 	.word	0x20002180

08003a34 <__malloc_lock>:
 8003a34:	4770      	bx	lr

08003a36 <__malloc_unlock>:
 8003a36:	4770      	bx	lr

08003a38 <_read_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4c07      	ldr	r4, [pc, #28]	; (8003a58 <_read_r+0x20>)
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd f8e0 	bl	8000c0c <_read>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_read_r+0x1e>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_read_r+0x1e>
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20002180 	.word	0x20002180

08003a5c <_init>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr

08003a68 <_fini>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr
